CONFIG = ["# This is the PRC configuration file for a published TTW client. Note that only\n# this file and Panda3D's Confauto.prc are included. Any relevant directives in\n# Config.prc should be reproduced here.\n\n# Client settings\nwindow-title Toontown World [Pre-Alpha]\nserver-version ttw-pre-alpha-2.5.1\n\n# Audio\n#audio-library-name p3openal_audio\naudio-library-name p3fmod_audio\n\nsync-video #f\nwant-dev #f\npreload-avatars #t\nwant-keep-alive #f\ntexture-anisotropic-degree 16\ncursor-filename /phase_3/etc/toonmono.cur\nicon-filename /phase_3/etc/icon.ico\n\n# Useless Variables\nshow-frame-rate-meter #f\ncursor-hidden #f\nundecorated #f\n\n# Resources settings\nmodel-path /\nmodel-cache-models #f\nmodel-cache-textures #f\nvfs-mount phase_3.mf /\nvfs-mount phase_3.5.mf /\nvfs-mount phase_4.mf /\nvfs-mount phase_5.mf /\nvfs-mount phase_5.5.mf /\nvfs-mount phase_6.mf /\nvfs-mount phase_7.mf /\nvfs-mount phase_8.mf /\nvfs-mount phase_9.mf /\nvfs-mount phase_10.mf /\nvfs-mount phase_11.mf /\nvfs-mount phase_12.mf /\nvfs-mount phase_13.mf /\ndefault-model-extension .bam\n\n\n# Now that we've loaded the phase files, tell panda to trust the TTRCA\n# ssl-certificates /phase_3/etc/TTRCA.crt\n#<dev>\n# ssl-certificates /phase_3/etc/TTRDev.crt\n# want-dev-certificate-trust #t\n#</dev>\n# server-force-ssl #f\n\n\n\n# DC files are NOT configured.\n# They're wrapped up into the code automatically.\n\n# Beta Modifications\n# Temporary modifications for unimplemented features go here.\nwant-pets #f\nwant-news-tab #f\nwant-news-page #f\nwant-gardening #f\nwant-gifting #f\n\n\n# Chat Settings\nforce-avatar-understandable #t\nforce-player-understandable #t\n\n\n# Holidays and Events\nforce-holiday-decorations \nactive-holidays 0\nwant-arg-manager #f\nshow-total-population #t\n\n# Server:\nserver-timezone BST/EDT/-5\nserver-port 7198\naccount-server-endpoint https://toontownworldonline.com/api/\n\n# Cog battles:\nbase-xp-multiplier 1.0\nwant-accessories #t\nwant-parties #t \nwant-picnic-games #f \nwant-fishing #t\nestate-day-night #t \nshow-total-population #t\nwant-toontorial #t\nwant-doomsday #f\nwant-whitelist #t\nwant-suit-planners #t\n# Holidays and Events\nwant-arg-manager #t\nwant-mega-invasions #f\nmega-invasion-cog-type nc\nboarding-group-merges #t \nwant-speedhack-fix #t \nwant-cogdominiums #f\nwant-game-tables #f\nforce-skip-tutorial #f\n\n\n\n\n"]
DC = 'from direct.distributed import DistributedObject/AI/UD\nfrom direct.distributed import DistributedNode/AI/UD\nfrom direct.distributed import DistributedSmoothNode/AI\nfrom direct.distributed import DistributedCartesianGrid/AI\nfrom direct.distributed import DistributedCamera/AI/OV\nfrom otp.distributed import Account/AI/UD\nfrom otp.ai import TimeManager/AI\nfrom otp.ai import MagicWordManager/AI\nfrom otp.avatar import DistributedAvatar/AI/UD\nfrom otp.avatar import DistributedPlayer/AI\nfrom otp.friends import FriendManager/AI\nfrom otp.friends import AvatarFriendsManager/UD\nfrom otp.friends import PlayerFriendsManager/UD\nfrom otp.friends import GuildManager/AI/UD\nfrom otp.friends import FriendInfo\nfrom otp.friends import AvatarFriendInfo\nfrom otp.distributed import ObjectServer/AI/UD\nfrom otp.distributed import DistributedDistrict/AI/UD\nfrom otp.distributed import DistributedDirectory/AI\nfrom otp.distributed import DistributedTestObject/AI\nfrom otp.snapshot import SnapshotDispatcher/AI/UD\nfrom otp.snapshot import SnapshotRenderer/AI/UD\nfrom otp.uberdog import OtpAvatarManager/AI/UD\nfrom otp.chat import ChatAgent/UD\nfrom otp.uberdog import SpeedchatRelay/UD\nfrom otp.distributed import CentralLogger/AI/UD\nfrom otp.web import SettingsMgr/AI/UD\nfrom otp.status import StatusDatabase/UD\nfrom otp.avatar import AvatarHandle\nfrom toontown.building import DistributedLibraryInterior/AI\nfrom direct.distributed import DistributedObjectGlobal\nfrom toontown.ai import WelcomeValleyManager/AI\nfrom toontown.building import DistributedAnimatedProp/AI\nfrom toontown.toon import DistributedToon/AI/UD\nfrom toontown.safezone import DistributedTrolley/AI\nfrom toontown.safezone import DistributedPartyGate/AI\nfrom toontown.suit import DistributedSuitPlanner/AI\nfrom toontown.suit import DistributedSuitBase/AI\nfrom toontown.suit import DistributedSuit/AI\nfrom toontown.suit import DistributedTutorialSuit/AI\nfrom toontown.suit import DistributedFactorySuit/AI\nfrom toontown.suit import DistributedMintSuit/AI\nfrom toontown.suit import DistributedStageSuit/AI\nfrom toontown.suit import DistributedSellbotBoss/AI\nfrom toontown.suit import DistributedCashbotBoss/AI\nfrom toontown.coghq import DistributedCashbotBossSafe/AI\nfrom toontown.coghq import DistributedCashbotBossCrane/AI\nfrom toontown.suit import DistributedCashbotBossGoon/AI\nfrom toontown.battle import DistributedBattleBase/AI\nfrom toontown.battle import DistributedBattle/AI\nfrom toontown.battle import DistributedBattleBldg/AI\nfrom toontown.tutorial import DistributedBattleTutorial/AI\nfrom toontown.coghq import DistributedBattleFactory/AI\nfrom toontown.battle import DistributedBattleFinal/AI\nfrom toontown.safezone import DistributedBoat/AI\nfrom toontown.safezone import DistributedButterfly/AI\nfrom toontown.safezone import DistributedMMPiano/AI\nfrom toontown.safezone import DistributedDGFlower/AI\nfrom toontown.fishing import DistributedFishingPond/AI\nfrom toontown.fishing import DistributedFishingTarget/AI\nfrom toontown.fishing import DistributedPondBingoManager/AI\nfrom toontown.safezone import DistributedFishingSpot/AI\nfrom toontown.estate import DistributedCannon/AI\nfrom toontown.estate import DistributedTarget/AI\nfrom toontown.minigame import DistributedMinigame/AI\nfrom toontown.minigame import DistributedMinigameTemplate/AI\nfrom toontown.minigame import DistributedRaceGame/AI\nfrom toontown.minigame import DistributedCannonGame/AI\nfrom toontown.minigame import DistributedPhotoGame/AI\nfrom toontown.minigame import DistributedRingGame/AI\nfrom toontown.minigame import DistributedTagGame/AI\nfrom toontown.minigame import DistributedMazeGame/AI\nfrom toontown.minigame import DistributedTugOfWarGame/AI\nfrom toontown.minigame import DistributedCatchGame/AI\nfrom toontown.minigame import DistributedDivingGame/AI\nfrom toontown.minigame import DistributedTargetGame/AI\nfrom toontown.estate import EstateManager/AI\nfrom toontown.estate import DistributedEstate/AI\nfrom toontown.estate import DistributedHouse/AI\nfrom toontown.estate import DistributedHouseInterior/AI\nfrom toontown.estate import DistributedGarden/AI\nfrom toontown.shtiker import DeleteManager/AI\nfrom toontown.ai import NewsManager/AI\nfrom toontown.shtiker import PurchaseManager/AI\nfrom toontown.shtiker import NewbiePurchaseManager/AI\nfrom toontown.tutorial import TutorialManager/AI\nfrom toontown.catalog import CatalogManager/AI\nfrom toontown.safezone import DistributedTreasure/AI\nfrom toontown.coghq import DistributedCashbotBossTreasure/AI\nfrom toontown.building import DistributedTrophyMgr/AI\nfrom toontown.building import DistributedBuilding/AI\nfrom toontown.building import DistributedAnimBuilding/AI\nfrom toontown.building import DistributedToonInterior/AI\nfrom toontown.building import DistributedToonHallInterior/AI\nfrom toontown.building import DistributedSuitInterior/AI\nfrom toontown.building import DistributedHQInterior/AI\nfrom toontown.building import DistributedGagshopInterior/AI\nfrom toontown.building import DistributedPetshopInterior/AI\nfrom toontown.building import DistributedKartShopInterior/AI\nfrom toontown.building import DistributedDoor/AI\nfrom toontown.building import DistributedAnimDoor/AI\nfrom toontown.estate import DistributedHouseDoor/AI\nfrom toontown.coghq import DistributedCogHQDoor/AI\nfrom toontown.coghq import DistributedSellbotHQDoor/AI\nfrom toontown.toon import DistributedNPCToonBase/AI\nfrom toontown.toon import DistributedNPCToon/AI\nfrom toontown.toon import DistributedNPCSnowballGiver/AI\nfrom toontown.toon import DistributedNPCSpecialQuestGiver/AI\nfrom toontown.toon import DistributedNPCFlippyInToonHall/AI\nfrom toontown.toon import DistributedNPCScientist/AI\nfrom toontown.toon import DistributedNPCClerk/AI\nfrom toontown.toon import DistributedNPCTailor/AI\nfrom toontown.toon import DistributedNPCBlocker/AI\nfrom toontown.toon import DistributedNPCFisherman/AI\nfrom toontown.toon import DistributedNPCPartyPerson/AI\nfrom toontown.toon import DistributedNPCPetclerk/AI\nfrom toontown.toon import DistributedNPCKartClerk/AI\nfrom toontown.building import DistributedKnockKnockDoor/AI\nfrom toontown.building import DistributedElevator/AI\nfrom toontown.building import DistributedElevatorFSM/AI\nfrom toontown.building import DistributedElevatorExt/AI\nfrom toontown.building import DistributedElevatorInt/AI\nfrom toontown.coghq import DistributedFactoryElevatorExt/AI\nfrom toontown.coghq import DistributedMintElevatorExt/AI\nfrom toontown.coghq import DistributedLawOfficeElevatorExt/AI\nfrom toontown.coghq import DistributedLawOfficeElevatorInt/AI\nfrom toontown.building import DistributedElevatorFloor/AI\nfrom toontown.building import DistributedBossElevator/AI\nfrom toontown.building import DistributedVPElevator/AI\nfrom toontown.building import DistributedCFOElevator/AI\nfrom toontown.building import DistributedCJElevator/AI\nfrom toontown.building import DistributedBBElevator/AI\nfrom toontown.building import DistributedBoardingParty/AI\nfrom toontown.building import DistributedTutorialInterior/AI\nfrom toontown.estate import DistributedBankMgr/AI\nfrom toontown.estate import DistributedMailbox/AI\nfrom toontown.estate import DistributedFurnitureManager/AI\nfrom toontown.estate import DistributedFurnitureItem/AI\nfrom toontown.estate import DistributedBank/AI\nfrom toontown.estate import DistributedCloset/AI\nfrom toontown.estate import DistributedTrunk/AI\nfrom toontown.estate import DistributedPhone/AI\nfrom toontown.effects import DistributedFireworkShow/AI\nfrom toontown.estate import DistributedFireworksCannon/AI\nfrom toontown.coghq import LobbyManager/AI\nfrom otp.level import DistributedLevel/AI\nfrom otp.level import DistributedEntity/AI\nfrom otp.level import DistributedInteractiveEntity/AI\nfrom toontown.coghq import DistributedFactory/AI\nfrom toontown.coghq import DistributedLawOffice/AI\nfrom toontown.coghq import DistributedLawOfficeFloor/AI\nfrom toontown.coghq import DistributedLift/AI\nfrom toontown.coghq import DistributedDoorEntity/AI\nfrom toontown.coghq import DistributedSwitch/AI\nfrom toontown.coghq import DistributedButton/AI\nfrom toontown.coghq import DistributedTrigger/AI\nfrom toontown.coghq import DistributedCrushableEntity/AI\nfrom toontown.coghq import DistributedCrusherEntity/AI\nfrom toontown.coghq import DistributedStomper/AI\nfrom toontown.coghq import DistributedStomperPair/AI\nfrom toontown.coghq import DistributedLaserField/AI\nfrom toontown.coghq import DistributedGolfGreenGame/AI\nfrom toontown.coghq import DistributedSecurityCamera/AI\nfrom toontown.coghq import DistributedMover/AI\nfrom toontown.coghq import DistributedElevatorMarker/AI\nfrom toontown.coghq import DistributedBarrelBase/AI\nfrom toontown.coghq import DistributedGagBarrel/AI\nfrom toontown.coghq import DistributedBeanBarrel/AI\nfrom toontown.coghq import DistributedHealBarrel/AI\nfrom toontown.coghq import DistributedGrid/AI\nfrom toontown.coghq import ActiveCell/AI\nfrom toontown.coghq import DirectionalCell/AI\nfrom toontown.coghq import CrusherCell/AI\nfrom toontown.coghq import DistributedCrate/AI\nfrom toontown.coghq import DistributedSinkingPlatform/AI\nfrom toontown.suit import DistributedGoon/AI\nfrom toontown.suit import DistributedGridGoon/AI\nfrom toontown.coghq import BattleBlocker/AI\nfrom toontown.ai import DistributedBlackCatMgr/AI\nfrom toontown.ai import DistributedPolarBearMgr/AI\nfrom toontown.ai import DistributedPolarPlaceEffectMgr/AI\nfrom toontown.ai import DistributedGreenToonEffectMgr/AI\nfrom toontown.ai import DistributedResistanceEmoteMgr/AI\nfrom toontown.ai import DistributedScavengerHuntTarget/AI\nfrom toontown.ai import DistributedTrickOrTreatTarget/AI\nfrom toontown.ai import DistributedWinterCarolingTarget/AI\nfrom toontown.coghq import DistributedMint/AI\nfrom toontown.coghq import DistributedMintRoom/AI\nfrom toontown.coghq import DistributedMintBattle/AI\nfrom toontown.coghq import DistributedStage/AI\nfrom toontown.coghq import DistributedStageRoom/AI\nfrom toontown.coghq import DistributedStageBattle/AI\nfrom toontown.pets.PetDCImports/AI import *\nfrom toontown.pets import DistributedPetProxy/AI\nfrom toontown.coghq.InGameEditorDCImports/AI import *\nfrom toontown.distributed import ToontownDistrict/AI\nfrom toontown.distributed import ToontownDistrictStats/AI\nfrom toontown.racing import DistributedVehicle/AI\nfrom toontown.racing import DistributedStartingBlock/AI\nfrom toontown.racing import DistributedRace/AI\nfrom toontown.racing import DistributedKartPad/AI\nfrom toontown.racing import DistributedRacePad/AI\nfrom toontown.racing import DistributedViewPad/AI\nfrom toontown.racing import DistributedStartingBlock/AI\nfrom toontown.racing import DistributedLeaderBoard/AI\nfrom toontown.racing import DistributedGag/AI\nfrom toontown.racing import DistributedProjectile/AI\nfrom toontown.racing.DistributedStartingBlock/AI import DistributedViewingBlock/AI\nfrom toontown.uberdog.ClientServicesManager/UD import ClientServicesManager/UD\nfrom toontown.uberdog.DistributedDeliveryManager/AI/UD import DistributedDeliveryManager/AI/UD\nfrom toontown.uberdog.DistributedDataStoreManager/AI/UD import DistributedDataStoreManager/AI/UD\nfrom toontown.suit import DistributedLawbotBoss/AI\nfrom toontown.coghq import DistributedLawbotBossGavel/AI\nfrom toontown.suit import DistributedLawbotBossSuit/AI\nfrom toontown.coghq import DistributedLawbotCannon/AI\nfrom toontown.coghq import DistributedLawbotChair/AI\nfrom toontown.estate import DistributedLawnDecor/AI\nfrom toontown.estate import DistributedGardenPlot/AI\nfrom toontown.estate import DistributedGardenBox/AI\nfrom toontown.estate import DistributedFlower/AI\nfrom toontown.estate import DistributedGagTree/AI\nfrom toontown.estate import DistributedStatuary/AI\nfrom toontown.estate import DistributedToonStatuary/AI\nfrom toontown.estate import DistributedChangingStatuary/AI\nfrom toontown.estate import DistributedAnimatedStatuary/AI\nfrom toontown.estate import DistributedPlantBase/AI\nfrom toontown.estate import DistributedLawnDecor/AI\nfrom toontown.minigame import DistributedTravelGame/AI\nfrom toontown.minigame import DistributedPairingGame/AI\nfrom toontown.minigame import DistributedVineGame/AI\nfrom toontown.golf import DistributedPhysicsWorld/AI\nfrom toontown.golf import DistributedGolfHole/AI\nfrom toontown.golf import DistributedGolfCourse/AI\nfrom toontown.parties import DistributedParty/AI\nfrom toontown.parties import DistributedPartyActivity/AI\nfrom toontown.parties import DistributedPartyTeamActivity/AI\nfrom toontown.parties import DistributedPartyCannon/AI\nfrom toontown.parties import DistributedPartyCannonActivity/AI\nfrom toontown.parties import DistributedPartyCatchActivity/AI\nfrom toontown.parties import DistributedPartyWinterCatchActivity/AI\nfrom toontown.parties import DistributedPartyCogActivity/AI\nfrom toontown.parties import DistributedPartyWinterCogActivity/AI\nfrom toontown.parties import DistributedPartyFireworksActivity/AI\nfrom toontown.parties import DistributedPartyDanceActivityBase/AI\nfrom toontown.parties import DistributedPartyDanceActivity/AI\nfrom toontown.parties import DistributedPartyDance20Activity/AI\nfrom toontown.parties import DistributedPartyValentineDanceActivity/AI\nfrom toontown.parties import DistributedPartyValentineDance20Activity/AI\nfrom toontown.parties import DistributedPartyTrampolineActivity/AI\nfrom toontown.parties import DistributedPartyValentineTrampolineActivity/AI\nfrom toontown.parties import DistributedPartyVictoryTrampolineActivity/AI\nfrom toontown.parties import DistributedPartyWinterTrampolineActivity/AI\nfrom toontown.parties import DistributedPartyTugOfWarActivity/AI\nfrom toontown.parties import DistributedPartyJukeboxActivityBase/AI\nfrom toontown.parties import DistributedPartyJukeboxActivity/AI\nfrom toontown.parties import DistributedPartyJukebox40Activity/AI\nfrom toontown.parties import DistributedPartyValentineJukeboxActivity/AI\nfrom toontown.parties import DistributedPartyValentineJukebox40Activity/AI\nfrom toontown.friends import TTPlayerFriendsManager/UD\nfrom toontown.friends import TTRFriendsManager/UD\nfrom toontown.uberdog import TTSpeedchatRelay/UD\nfrom toontown.safezone import DistributedGolfKart/AI\nfrom toontown.safezone import DistributedPicnicBasket/AI\nfrom toontown.distributed import DistributedTimer/AI\nfrom toontown.suit import DistributedBossbotBoss/AI\nfrom toontown.coghq import DistributedCogKart/AI\nfrom toontown.coghq import DistributedCountryClub/AI\nfrom toontown.coghq import DistributedCountryClubRoom/AI\nfrom toontown.coghq import DistributedMoleField/AI\nfrom toontown.coghq import DistributedCountryClubBattle/AI\nfrom toontown.building import DistributedClubElevator/AI\nfrom toontown.coghq import DistributedMaze/AI\nfrom toontown.battle import DistributedBattleWaiters/AI\nfrom toontown.coghq import DistributedFoodBelt/AI\nfrom toontown.coghq import DistributedBanquetTable/AI\nfrom toontown.battle import DistributedBattleDiners/AI\nfrom toontown.coghq import DistributedGolfSpot/AI\nfrom toontown.minigame import DistributedIceGame/AI\nfrom toontown.minigame import DistributedCogThiefGame/AI\nfrom toontown.minigame import DistributedTwoDGame/AI\nfrom toontown.safezone import DistributedPicnicTable/AI\nfrom toontown.safezone import DistributedChineseCheckers/AI\nfrom toontown.safezone import DistributedCheckers/AI\nfrom toontown.safezone import DistributedFindFour/AI\nfrom toontown.uberdog.DistributedMailManager/AI/UD import DistributedMailManager/AI/UD\nfrom toontown.uberdog.DistributedPartyManager/AI/UD import DistributedPartyManager/AI/UD\nfrom toontown.rpc.AwardManager/UD import AwardManager/UD\nfrom toontown.uberdog.DistributedCpuInfoMgr/AI/UD import DistributedCpuInfoMgr/AI/UD\nfrom toontown.uberdog.DistributedSecurityMgr/AI/UD import DistributedSecurityMgr/AI/UD\nfrom toontown.rpc.RATManager/UD import RATManager/UD\nfrom toontown.uberdog.DistributedInGameNewsMgr/AI/UD import DistributedInGameNewsMgr/AI/UD\nfrom toontown.uberdog.DistributedWhitelistMgr/AI/UD import DistributedWhitelistMgr/AI/UD\nfrom toontown.coderedemption.TTCodeRedemptionMgr/AI/UD import TTCodeRedemptionMgr/AI/UD\nfrom toontown.distributed.NonRepeatableRandomSourceAI import NonRepeatableRandomSourceAI\nfrom toontown.distributed.NonRepeatableRandomSourceUD import NonRepeatableRandomSourceUD\nfrom toontown.ai.DistributedPhaseEventMgr/AI import DistributedPhaseEventMgr/AI\nfrom toontown.ai.DistributedHydrantZeroMgr/AI import DistributedHydrantZeroMgr/AI\nfrom toontown.ai.DistributedMailboxZeroMgr/AI import DistributedMailboxZeroMgr/AI\nfrom toontown.ai.DistributedTrashcanZeroMgr/AI import DistributedTrashcanZeroMgr/AI\nfrom toontown.ai import DistributedSillyMeterMgr/AI\nfrom toontown.cogdominium import DistributedCogdoInterior/AI\nfrom toontown.cogdominium import DistributedCogdoBattleBldg/AI\nfrom toontown.cogdominium import DistributedCogdoElevatorExt/AI\nfrom toontown.cogdominium import DistributedCogdoElevatorInt/AI\nfrom toontown.cogdominium import DistributedCogdoBarrel/AI\nfrom toontown.cogdominium import DistCogdoGame/AI\nfrom toontown.cogdominium import DistCogdoLevelGame/AI\nfrom toontown.cogdominium import DistCogdoBoardroomGame/AI\nfrom toontown.cogdominium import DistCogdoCraneGame/AI\nfrom toontown.cogdominium import DistCogdoMazeGame/AI\nfrom toontown.cogdominium import DistCogdoFlyingGame/AI\nfrom toontown.cogdominium import DistCogdoCrane/AI\nfrom toontown.cogdominium import DistCogdoCraneMoneyBag/AI\nfrom toontown.cogdominium import DistCogdoCraneCog/AI\nfrom toontown.parties.GlobalPartyManager/AI/UD import GlobalPartyManager/AI/UD\n\ntypedef uint8 bool;\n\ntypedef uint32 DoId;\n\ntypedef DoId DoIdList[];\n\nstruct AvatarPendingDel {\n  uint32 Avatar;\n  uint32 date;\n};\n\ndclass Account {\n  uint32 ACCOUNT_AV_SET[6] required db;\n  uint32 ESTATE_ID db;\n  AvatarPendingDel ACCOUNT_AV_SET_DEL[] db;\n  string CREATED db;\n  string LAST_LOGIN db;\n  string ACCOUNT_ID db;\n  uint16 ADMIN_ACCESS db;\n  uint32 MONEY db;\n  uint8 BETA_KEY_QUEST db;\n};\n\nstruct BarrierData {\n  uint16 context;\n  string name;\n  DoIdList avIds;\n};\n\ndclass DistributedObject {\n  setBarrierData(BarrierData []) broadcast ram;\n  setBarrierReady(uint16) airecv clsend;\n  execCommand(string, DoId, DoId, uint32);\n  broadcastMessage() broadcast;\n};\n\ndclass DistributedTestObject : DistributedObject {\n  uint32 AutoInterest[];\n  setParentingRules(string, string) broadcast ram;\n  setRequiredField(uint32) required broadcast ram;\n  setB(uint32) broadcast;\n  setBA(uint32) broadcast airecv;\n  setBO(uint32) broadcast ownsend;\n  setBR(uint32) broadcast ram;\n  setBRA(uint32) broadcast ram airecv;\n  setBRO(uint32) broadcast ram ownsend;\n  setBROA(uint32) broadcast ram ownsend airecv;\n};\n\nstruct OSInfo {\n  string name;\n  int16 platform;\n  int16 major;\n  int16 minor;\n};\n\nstruct CPUSpeed {\n  int32/1000 maxSpeed;\n  int32/1000 currentSpeed;\n};\n\ndclass TimeManager : DistributedObject {\n  requestServerTime(uint8) airecv clsend;\n  serverTime(uint8, int32, uint32);\n  setDisconnectReason(uint8) airecv clsend;\n  setExceptionInfo(string(0-1024)) airecv clsend;\n  setSignature(string(0-1024), char [16], char [16]) airecv clsend;\n  setFrameRate(uint16/10, uint16/1000, uint16, string(0-256), uint32/10, uint32/10, string(0-256), uint16, uint16, uint32/10, uint32/10, uint32/10, uint32, OSInfo, CPUSpeed, uint16, uint16, string(0-256)) airecv clsend;\n  setCpuInfo(string(0-1024), string) airecv clsend;\n  checkForGarbageLeaks(bool) airecv clsend;\n  setNumAIGarbageLeaks(uint32);\n  setClientGarbageLeak(uint32, string(0-1024)) airecv clsend;\n  checkAvOnDistrict(uint32, DoId) clsend airecv;\n  checkAvOnDistrictResult(uint32, DoId, bool);\n};\n\ndclass ObjectServer {\n  setName(string) airecv ram required;\n  setDcHash(uint32) ram required;\n  setDateCreated(uint32) airecv;\n};\n\ndclass DistributedDirectory : DistributedObject {\n  setParentingRules(string, string) broadcast ram;\n};\n\ndclass DistributedDistrict : DistributedObject {\n  setName(string) required broadcast ram;\n  setAvailable(uint8) required broadcast ram;\n};\n\ndclass DistributedNode : DistributedObject {\n  setParentStr(blob) broadcast ram ownsend airecv;\n  setParent(uint32) broadcast ram ownsend airecv;\n  setX(int16/10) broadcast ram ownsend airecv;\n  setY(int16/10) broadcast ram ownsend airecv;\n  setZ(int16/10) broadcast ram ownsend airecv;\n  setH(int16%360/10) broadcast ram ownsend airecv;\n  setP(int16%360/10) broadcast ram ownsend airecv;\n  setR(int16%360/10) broadcast ram ownsend airecv;\n  setPos : setX, setY, setZ;\n  setHpr : setH, setP, setR;\n  setPosHpr : setX, setY, setZ, setH, setP, setR;\n  setXY : setX, setY;\n  setXZ : setX, setZ;\n  setXYH : setX, setY, setH;\n  setXYZH : setX, setY, setZ, setH;\n};\n\ndclass DistributedSmoothNode : DistributedNode {\n  setComponentL(uint64) broadcast ram ownsend airecv;\n  setComponentX(int16/10) broadcast ram ownsend airecv;\n  setComponentY(int16/10) broadcast ram ownsend airecv;\n  setComponentZ(int16/10) broadcast ram ownsend airecv;\n  setComponentH(int16%360/10) broadcast ram ownsend airecv;\n  setComponentP(int16%360/10) broadcast ram ownsend airecv;\n  setComponentR(int16%360/10) broadcast ram ownsend airecv;\n  setComponentT(int16) broadcast ram ownsend airecv;\n  setSmStop : setComponentT;\n  setSmH : setComponentH, setComponentT;\n  setSmZ : setComponentZ, setComponentT;\n  setSmXY : setComponentX, setComponentY, setComponentT;\n  setSmXZ : setComponentX, setComponentZ, setComponentT;\n  setSmPos : setComponentX, setComponentY, setComponentZ, setComponentT;\n  setSmHpr : setComponentH, setComponentP, setComponentR, setComponentT;\n  setSmXYH : setComponentX, setComponentY, setComponentH, setComponentT;\n  setSmXYZH : setComponentX, setComponentY, setComponentZ, setComponentH, setComponentT;\n  setSmPosHpr : setComponentX, setComponentY, setComponentZ, setComponentH, setComponentP, setComponentR, setComponentT;\n  setSmPosHprL : setComponentL, setComponentX, setComponentY, setComponentZ, setComponentH, setComponentP, setComponentR, setComponentT;\n  clearSmoothing(int8) broadcast ownsend;\n  suggestResync(uint32, int16, int16, int32, uint16, uint16/100) ownrecv clsend;\n  returnResync(uint32, int16, int32, uint16, uint16/100) ownrecv clsend;\n};\n\ndclass DistributedCartesianGrid : DistributedNode {\n  setCellWidth(uint32) required broadcast ram;\n  setParentingRules(string, string) broadcast ram;\n};\n\nstruct Fixture {\n  int32/10 x;\n  int32/10 y;\n  int32/10 z;\n  int16/10 h;\n  int16/10 p;\n  int16/10 r;\n  string state;\n};\n\ndclass DistributedCamera : DistributedNode {\n  setCamParent(uint32) required broadcast ram ownsend airecv;\n  setFixtures(Fixture []) required broadcast ram ownsend airecv;\n};\n\nstruct TalkModification {\n  uint16 offset;\n  uint16 size;\n};\n\ndclass TalkPath_owner {\n  setTalk(DoId, DoId, string(0-256), string(0-400), TalkModification [], uint8) broadcast ownsend;\n};\n\ndclass TalkPath_whisper {\n  setTalkWhisper(DoId, DoId, string(0-256), string(0-400), TalkModification [], uint8) ownrecv clsend;\n};\n\ndclass TalkPath_group {\n  setTalkGroup(DoId, DoId, string(0-256), string(0-400), TalkModification [], uint8) clsend airecv;\n};\n\ndclass TalkPath_account {\n  setTalkAccount(DoId, DoId, string(0-256), string(0-400), TalkModification [], uint8) airecv clsend;\n};\n\ndclass AvatarHandle : TalkPath_whisper {\n};\n\ndclass DistributedAvatar : DistributedSmoothNode, TalkPath_whisper {\n  setName(string) required broadcast db airecv;\n  friendsNotify(DoId, int8) ownrecv airecv;\n  checkAvOnShard(DoId) clsend airecv;\n  confirmAvOnShard(DoId, int8);\n  setTalk(DoId, DoId, string(0-256), string(0-400), TalkModification [], uint8) broadcast;\n  setTalkWhisper(DoId, DoId, string(0-256), string(0-400), TalkModification [], uint8) ownrecv;\n};\n\nstruct FriendEntry {\n  uint32 friendId;\n  uint8 friendType;\n};\n\ndclass DistributedPlayer : DistributedAvatar {\n  arrivedOnDistrict(DoId) ownrecv ram;\n  setAccountName(string) required ownrecv db;\n  setWhisperSCFrom(DoId, uint16) ownrecv clsend;\n  setWhisperSCCustomFrom(DoId, uint16) ownrecv clsend;\n  setWhisperSCEmoteFrom(DoId, uint16) ownrecv clsend;\n  setSystemMessage(DoId, string(0-256)) ownrecv;\n  setCommonChatFlags(uint8) broadcast ownrecv ram airecv;\n  setWhitelistChatFlags(uint8) broadcast ownrecv ram airecv;\n  setSC(uint16) broadcast ownsend airecv;\n  setSCCustom(uint16) broadcast ownsend airecv;\n  setFriendsList(FriendEntry []) ownrecv required db airecv;\n  setDISLname(string) broadcast ownrecv ram;\n  setDISLid(uint32) broadcast ownrecv ram db airecv required;\n  OwningAccount(DoId);\n  string WishName db ram;\n  uint8 WishNameState db ram;\n  uint32 WishNameTimestamp db ram;\n  setPreviousAccess(uint8) required db airecv;\n  setAccess(uint8) broadcast ownrecv required ram airecv;\n  setAdminAccess(uint16) ownrecv required airecv;\n  setAsGM(bool) required ram broadcast ownrecv airecv;\n};\n\ndclass MagicWordManager : DistributedObject {\n  sendMagicWord(string, uint32, bool) airecv clsend;\n  sendMagicWordResponse(string);\n};\n\ndclass OtpAvatarManager : DistributedObject {\n  online();\n  requestAvatarList(uint32) airecv clsend;\n  rejectAvatarList(uint32);\n  avatarListResponse(blob);\n  requestAvatarSlot(uint32, uint32, uint8) clsend airecv;\n  rejectAvatarSlot(uint32, uint32, uint8);\n  avatarSlotResponse(uint32, uint8);\n  requestPlayAvatar(uint32, uint32, uint32) clsend airecv;\n  rejectPlayAvatar(uint32, uint32);\n  playAvatarResponse(uint32, uint32, uint8, uint8);\n  rejectCreateAvatar(uint32);\n  createAvatarResponse(uint32, uint32, uint8, uint8);\n  requestRemoveAvatar(uint32, uint32, uint32, string(0-256)) airecv clsend;\n  rejectRemoveAvatar(uint32);\n  removeAvatarResponse(uint32, uint32);\n  requestShareAvatar(uint32, uint32, uint32, uint8) airecv clsend;\n  rejectShareAvatar(uint32);\n  shareAvatarResponse(uint32, uint32, uint8);\n};\n\ndclass ChatAgent : DistributedObject {\n  adminChat(uint32, string);\n  chatMessage(string(0-256), uint8) clsend;\n  muteAccount(DoId, int32) clsend;\n  unmuteAccount(DoId) clsend;\n  whisperMessage(uint32, string(0-256)) clsend;\n  sfWhisperMessage(uint32, string(0-256)) clsend;\n};\n\ndclass FriendManager : DistributedObject {\n  friendQuery(int32) airecv clsend;\n  cancelFriendQuery(int32) airecv clsend;\n  inviteeFriendConsidering(int8, int32) airecv clsend;\n  inviteeFriendResponse(int8, int32) airecv clsend;\n  inviteeAcknowledgeCancel(int32) airecv clsend;\n  friendConsidering(int8, int32);\n  friendResponse(int8, int32);\n  inviteeFriendQuery(int32, string, blob, int32);\n  inviteeCancelFriendQuery(int32);\n  requestSecret() airecv clsend;\n  requestSecretResponse(int8, string);\n  submitSecret(string(0-256)) airecv clsend;\n  submitSecretResponse(int8, int32);\n};\n\nstruct FriendInfo {\n  string avatarName;\n  uint32 avatarId;\n  string playerName;\n  uint8 onlineYesNo;\n  uint8 openChatEnabledYesNo;\n  uint8 openChatFriendshipYesNo;\n  uint8 wlChatEnabledYesNo;\n  string location;\n  string sublocation;\n  uint32 timestamp;\n};\n\nstruct AvatarFriendInfo {\n  string avatarName;\n  string playerName;\n  uint32 playerId;\n  uint8 onlineYesNo;\n  uint8 openChatEnabledYesNo;\n  uint8 openChatFriendshipYesNo;\n  uint8 wlChatEnabledYesNo;\n};\n\nstruct MemberInfo {\n  uint32 avatarId;\n  string avatarName;\n  uint8 avatarRank;\n  uint8 avatarOnline;\n  uint32 bandManagerId;\n  uint32 bandId;\n};\n\nstruct leaderBoardRecordResponces {\n  char found;\n  uint32 id;\n  string text;\n  int32 value;\n};\n\nstruct leaderBoardRecord {\n  uint32 id;\n  string text;\n  int32 value;\n};\n\ndclass LeaderBoardReceiver {\n  getTopTenResponce(string, leaderBoardRecord []);\n  getValuesResponce(string, leaderBoardRecordResponces []);\n};\n\ndclass LeaderBoard : LeaderBoardReceiver {\n  setValue(string [], uint32, string, int32);\n  alterValue(string [], uint32, string, int32);\n  setHighScore(string [], uint32, string, int32);\n  getValues(string, uint32 []);\n  getTopTen(string);\n  getValuesRespondTo(string, uint32 [], uint32);\n  getTopTenRespondTo(string, uint32);\n};\n\ndclass GuildManager : DistributedObject, LeaderBoardReceiver, TalkPath_group {\n  online();\n  guildRejectInvite(uint32, uint32);\n  invitationFrom(uint32, string, uint32, string);\n  requestInvite(uint32) airecv clsend;\n  memberList() airecv clsend;\n  createGuild() airecv clsend;\n  acceptInvite() airecv clsend;\n  declineInvite() airecv clsend;\n  setWantName(string(0-256)) airecv clsend;\n  removeMember(uint32) airecv clsend;\n  changeRank(uint32, uint8) airecv clsend;\n  changeRankAvocate(uint32) airecv clsend;\n  statusRequest() airecv clsend;\n  requestLeaderboardTopTen() airecv clsend;\n  guildStatusUpdate(uint32, string(0-256), uint8);\n  guildNameReject(uint32);\n  guildNameChange(string, uint8);\n  receiveMember(MemberInfo);\n  receiveMembersDone();\n  guildAcceptInvite(uint32);\n  guildDeclineInvite(uint32);\n  updateRep(uint32, uint32);\n  leaderboardTopTen(leaderBoardRecord []);\n  recvAvatarOnline(uint32, string, uint32, uint32);\n  recvAvatarOffline(uint32, string);\n  sendChat(string(0-256), uint8, uint32) airecv clsend;\n  sendWLChat(string(0-256), uint8, uint32) airecv clsend;\n  sendSC(uint16) airecv clsend;\n  sendSCQuest(uint16, uint16, uint16) airecv clsend;\n  recvChat(uint32, string, uint8, uint32);\n  recvWLChat(uint32, string, uint8, uint32);\n  recvSC(uint32, uint16);\n  recvSCQuest(uint32, uint16, uint16, uint16);\n  sendTokenRequest() airecv clsend;\n  recvTokenGenerated(string);\n  recvTokenInviteValue(string, int8);\n  sendTokenForJoinRequest(string(0-256), string(0-256)) airecv clsend;\n  recvTokenRedeemMessage(string);\n  recvTokenRedeemedByPlayerMessage(string);\n  sendTokenRValue(string(0-256), int8) airecv clsend;\n  sendPermToken() airecv clsend;\n  sendNonPermTokenCount() airecv clsend;\n  recvPermToken(string);\n  recvNonPermTokenCount(uint8);\n  sendClearTokens(uint8) airecv clsend;\n  sendAvatarBandId(uint32, uint32, uint32);\n  recvMemberAdded(MemberInfo, uint32, string);\n  notifyGuildKicksMaxed();\n  recvMemberRemoved(uint32, uint32, string, string);\n  recvMemberUpdateName(uint32, string);\n  recvMemberUpdateRank(uint32, uint32, string, string, uint8, bool);\n  recvMemberUpdateBandId(uint32, uint32, uint32);\n  avatarOnline(uint32, uint16);\n  avatarOffline(uint32);\n  reflectTeleportQuery(uint32, uint32, uint32, uint32, uint32) clsend airecv;\n  teleportQuery(uint32, uint32, uint32, uint32, uint32);\n  reflectTeleportResponse(uint32, int8, uint32, uint32, uint32) clsend airecv;\n  teleportResponse(uint32, int8, uint32, uint32, uint32);\n  requestGuildMatesList(uint32, uint32, uint32);\n  updateAvatarName(uint32, string);\n  avatarDeleted(uint32);\n};\n\ndclass AvatarFriendsManager : DistributedObject {\n  online();\n  requestInvite(uint32) airecv clsend;\n  friendConsidering(uint32) airecv clsend;\n  invitationFrom(uint32, string);\n  retractInvite(uint32);\n  rejectInvite(uint32, uint32);\n  requestRemove(uint32) airecv clsend;\n  rejectRemove(uint32, uint32);\n  updateAvatarFriend(uint32, AvatarFriendInfo);\n  removeAvatarFriend(uint32);\n  updateAvatarName(uint32, string);\n  avatarOnline(uint32, uint32, string, bool, bool, string, string);\n  avatarOffline(uint32);\n};\n\ndclass PlayerFriendsManager : DistributedObject, TalkPath_account {\n  requestInvite(uint32, uint32, uint8) airecv clsend;\n  invitationFrom(uint32, string);\n  retractInvite(uint32);\n  invitationResponse(uint32, uint16, uint32);\n  requestDecline(uint32, uint32) airecv clsend;\n  requestDeclineWithReason(uint32, uint32, uint32) airecv clsend;\n  requestRemove(uint32, uint32) airecv clsend;\n  secretResponse(string);\n  rejectSecret(string);\n  rejectUseSecret(string);\n  updatePlayerFriend(uint32, FriendInfo, uint8);\n  removePlayerFriend(uint32);\n};\n\ndclass SnapshotDispatcher : DistributedObject {\n  online();\n  requestRender(uint32);\n  avatarDeleted(uint32);\n  requestNewWork(uint32);\n  errorFetchingAvatar(uint32, uint32);\n  errorRenderingAvatar(uint32, uint32);\n  renderSuccessful(uint32, uint32);\n};\n\ndclass SnapshotRenderer : DistributedObject {\n  online();\n  requestRender(uint32, uint32, string);\n};\n\ndclass SpeedchatRelay : DistributedObject, TalkPath_account {\n  forwardSpeedchat(uint32, uint8, uint32 [], uint32, string(0-256), uint8) clsend;\n};\n\ndclass CentralLogger : DistributedObject {\n  sendMessage(string(0-256), string(0-1024), uint32, uint32) clsend;\n  logAIGarbage() airecv;\n};\n\ndclass SettingsMgr : DistributedObject {\n  requestAllChangedSettings() airecv clsend;\n  settingChange(string, string) airecv;\n};\n\ndclass StatusDatabase : DistributedObject {\n  requestOfflineAvatarStatus(uint32 []) airecv clsend;\n  recvOfflineAvatarStatus(uint32, uint32);\n};\n\ndclass CallbackObject {\n  callback(uint32, bool, uint8);\n};\n\nstruct GiftItem {\n  blob Item;\n  string giftTag;\n};\n\nstruct gardenSpecial {\n  uint8 index;\n  uint8 count;\n};\n\nstruct simpleMail {\n  uint64 msgId;\n  uint32 senderId;\n  uint16 year;\n  uint8 month;\n  uint8 day;\n  string body;\n};\n\nstruct invite {\n  uint64 inviteKey;\n  uint64 partyId;\n  uint8 status;\n};\n\nstruct decoration {\n  uint8 decorId;\n  uint8 x;\n  uint8 y;\n  uint8 h;\n};\n\nstruct activity {\n  uint8 activityId;\n  uint8 x;\n  uint8 y;\n  uint8 h;\n};\n\nstruct party {\n  uint64 partyId;\n  uint32 hostId;\n  uint16 startYear;\n  uint8 startMonth;\n  uint8 startDay;\n  uint8 startHour;\n  uint8 startMinute;\n  uint16 endYear;\n  uint8 endMonth;\n  uint8 endDay;\n  uint8 endHour;\n  uint8 endMinute;\n  uint8 isPrivate;\n  uint8 inviteTheme;\n  activity activities[];\n  decoration decors[];\n  uint8 status;\n};\n\nstruct partyReply {\n  uint32 inviteeId;\n  uint8 status;\n};\n\nstruct repliesForOneParty {\n  uint64 partyId;\n  partyReply partyReplies[];\n};\n\nstruct publicPartyInfo {\n  uint32 shardId;\n  uint32 zoneId;\n  uint8 numberOfGuests;\n  string hostName;\n  uint8 activityIds[];\n  uint16 minLeft;\n};\n\nstruct jukeboxSongInfo {\n  uint8/10 phase;\n  string fileName;\n};\n\nstruct partyCloudColor {\n  uint16 cloudNumber;\n  uint8/100 r;\n  uint8/100 g;\n  uint8/100 b;\n};\n\nstruct datetime {\n  uint16 year;\n  uint8 month;\n  uint8 day;\n  uint8 hour;\n  uint8 minutes;\n  uint8 seconds;\n};\n\ndclass ToontownDistrict : DistributedDistrict {\n  setParentingRules(string, string) broadcast ram;\n  allowAHNNLog(bool) broadcast required ram;\n  rpcSetAvailable(bool) airecv;\n};\n\ndclass ToontownDistrictStats : DistributedObject {\n  settoontownDistrictId(uint32) broadcast required ram;\n  setAvatarCount(uint32) broadcast required ram;\n  setNewAvatarCount(uint32) broadcast required ram;\n  setStats : setAvatarCount, setNewAvatarCount;\n};\n\ndclass WelcomeValleyManager : DistributedObject {\n  clientSetZone(uint32) airecv clsend;\n  requestZoneIdMessage(uint32, uint16) airecv clsend;\n  requestZoneIdResponse(uint32, uint16);\n};\n\ndclass DistributedAnimatedProp : DistributedObject {\n  setPropId(uint16) required broadcast ram;\n  setAvatarInteract(uint32) required broadcast ram;\n  requestInteract() airecv clsend;\n  rejectInteract();\n  requestExit() airecv clsend;\n  avatarExit(uint32) broadcast;\n  setState(string, int16) required broadcast ram;\n};\n\ntypedef int16 pair16[2];\n\ndclass DistributedToon : DistributedPlayer {\n  setWantBetaKeyQuest(uint8) required db airecv;\n  setWebAccountId(uint32) required airecv;\n  setDNAString(blob) required broadcast ownrecv db;\n  setGM(uint8) required broadcast ownrecv db;\n  setMaxBankMoney(int32) required broadcast ownrecv db;\n  setBankMoney(int32) required broadcast ownrecv db;\n  setMaxMoney(int32) required broadcast ownrecv db;\n  setMoney(int32) required broadcast ownrecv db;\n  setMaxHp(int16) required broadcast ownrecv db;\n  setHp(int16) required broadcast ownrecv db;\n  toonUp(uint16) broadcast ownrecv;\n  takeDamage(uint16) broadcast ownrecv;\n  setBattleId(uint32) required broadcast ram;\n  setExperience(blob) required broadcast db;\n  setMaxCarry(uint8) required ownrecv db;\n  setTrackAccess(uint16 []) required broadcast ownrecv db;\n  setTrackProgress(int8, uint32) required ownrecv db;\n  setTrackBonusLevel(int8 []) required broadcast ownrecv db;\n  setInventory(blob) required broadcast db;\n  setMaxNPCFriends(uint16) required ownrecv db;\n  setNPCFriendsDict(FriendEntry []) required ownrecv db;\n  setDefaultShard(uint32) required ownrecv broadcast db;\n  setDefaultZone(uint32) required ownrecv broadcast db;\n  setShtickerBook(blob) required ownrecv db;\n  setZonesVisited(uint32 []) required ownrecv db;\n  setHoodsVisited(uint32 []) required ownrecv db;\n  setInterface(blob) required ownrecv db;\n  setLastHood(uint32) required ownrecv broadcast db;\n  setTutorialAck(uint8) required ownrecv db;\n  setMaxClothes(uint32) required ownrecv db;\n  setClothesTopsList(uint8 []) required ownrecv db;\n  setClothesBottomsList(uint8 []) required ownrecv db;\n  setMaxAccessories(uint32) required ownrecv db;\n  setHatList(uint8 []) required ownrecv db;\n  setGlassesList(uint8 []) required ownrecv db;\n  setBackpackList(uint8 []) required ownrecv db;\n  setShoesList(uint8 []) required ownrecv db;\n  setHat(uint8, uint8, uint8) required broadcast db ownrecv;\n  setGlasses(uint8, uint8, uint8) required broadcast db ownrecv;\n  setBackpack(uint8, uint8, uint8) required broadcast db ownrecv;\n  setShoes(uint8, uint8, uint8) required broadcast db ownrecv;\n  setGardenSpecials(gardenSpecial []) required ownrecv db airecv;\n  setEarnedExperience(uint16 []) ownrecv;\n  setTunnelIn(int16, int16/10, int16/10, int16/10, int16/100, int32/100) ownsend broadcast;\n  setTunnelOut(int16, int16/10, int16/10, int16/10, int16/10, int16/100, int32/100) ownsend broadcast;\n  setAnimState(char [0-1024], int16/1000, int16) broadcast ram ownsend airecv;\n  setEmoteState(int16, int16/1000, int16) broadcast ram ownsend;\n  setEmoteAccess(uint8 []) required ownrecv db;\n  setCustomMessages(uint16 []) required ownrecv db;\n  setSleepAutoReply(uint32) broadcast clsend ownrecv;\n  setResistanceMessages(pair16 []) required ownrecv db;\n  setPetTrickPhrases(uint8 []) required ownrecv db;\n  setCatalogSchedule(uint16, uint32) required ownrecv db;\n  setCatalog(blob, blob, blob) required ownrecv db;\n  setMailboxContents(blob) required ownrecv db;\n  setDeliverySchedule(blob) required ownrecv db airecv;\n  setGiftSchedule(blob) required ownrecv db airecv;\n  setAwardMailboxContents(blob) required ownrecv db;\n  setAwardSchedule(blob) required ownrecv db airecv;\n  setAwardNotify(uint8) required ownrecv db;\n  setCatalogNotify(uint8, uint8) required ownrecv db;\n  setRedeemedCodes(uint16 []) required ownrecv db;\n  playSplashEffect(int16/10, int16/10, int16/10) broadcast ownsend;\n  setWhisperSCToontaskFrom(uint32, uint32, uint32, uint32, uint8) ownrecv clsend;\n  setSCToontask(uint32, uint32, uint32, uint8) broadcast ownsend;\n  reqSCResistance(uint16, uint32 []) ownsend airecv;\n  setSCResistance(uint16, uint32 []) broadcast ownrecv;\n  setSpeedChatStyleIndex(uint8) required ownsend broadcast db;\n  setTrophyScore(uint16) broadcast ownrecv ram;\n  setTeleportAccess(uint32 []) required ownrecv db;\n  checkTeleportAccess(uint16) airecv ownsend;\n  setTeleportOverride(uint8) clsend airecv;\n  battleSOS(uint32) ownrecv clsend;\n  teleportQuery(uint32) ownrecv clsend;\n  teleportResponse(uint32, int8, uint32, uint32, uint32) ownrecv clsend;\n  teleportResponseToAI(uint32, int8, uint32, uint32, uint32, uint32) ownsend airecv;\n  teleportGiveup(uint32) ownrecv clsend;\n  teleportGreeting(uint32) broadcast ownsend;\n  setCogStatus(uint32 []) required ownrecv db;\n  setCogCount(uint32 []) required ownrecv db;\n  setCogRadar(uint8 []) required ownrecv db;\n  setBuildingRadar(uint8 []) required ownrecv db;\n  setCogLevels(uint8 []) required broadcast ownrecv db;\n  setCogTypes(uint8 []) required broadcast ownrecv db;\n  setCogParts(uint32 []) required broadcast ownrecv db;\n  setCogMerits(uint16 []) required ownrecv db;\n  setCogIndex(int8) broadcast ram;\n  setDisguisePageFlag(int8) ownrecv;\n  setSosPageFlag(int8) ownrecv;\n  setHouseId(uint32) required ownrecv db;\n  setQuests(uint32 []) required broadcast ownrecv db;\n  setQuestHistory(uint16 []) required ownrecv db;\n  setRewardHistory(uint8, uint16 []) required ownrecv db;\n  setQuestCarryLimit(uint8) required ownrecv db;\n  requestDeleteQuest(uint32 []) ownsend airecv;\n  setCheesyEffect(int16, uint32, uint32) required broadcast ownrecv db;\n  setGhostMode(uint8) broadcast ownrecv ram;\n  setPosIndex(uint8) required ownrecv db;\n  setFishCollection(uint8 [], uint8 [], uint16 []) required ownrecv db;\n  setMaxFishTank(uint8) required ownrecv db;\n  setFishTank(uint8 [], uint8 [], uint16 []) required ownrecv db;\n  setFishingRod(uint8) required broadcast ownrecv db;\n  setFishingTrophies(uint8 []) required ownrecv db;\n  setFlowerCollection(uint8 [], uint8 []) required ownrecv db;\n  setFlowerBasket(uint8 [], uint8 []) required ownrecv db;\n  setMaxFlowerBasket(uint8) required ownrecv db;\n  setGardenTrophies(uint8 []) required ownrecv db;\n  setShovel(uint8) required broadcast ownrecv db;\n  setShovelSkill(uint32) required ownrecv db;\n  setWateringCan(uint8) required broadcast ownrecv db;\n  setWateringCanSkill(uint32) required ownrecv db;\n  promoteShovel(uint8) ownrecv;\n  promoteWateringCan(uint8) ownrecv;\n  reactivateWater() ownrecv;\n  presentPie(int16/10, int16/10, int16/10, int16/10, int32) broadcast ownsend;\n  tossPie(int16/10, int16/10, int16/10, int16/10, uint8, uint8, uint8, int32) broadcast ownsend;\n  pieSplat(int16/10, int16/10, int16/10, uint8, uint8, int32) broadcast ownsend;\n  setPieType(uint8) broadcast ownrecv ram;\n  setNumPies(uint16) broadcast ownrecv ram;\n  setPieThrowType(uint8) broadcast ownrecv ram;\n  setHealthDisplay(uint8) broadcast ownrecv ram;\n  catalogGenClothes(uint32) broadcast ownrecv;\n  catalogGenAccessories(uint32) broadcast ownrecv;\n  setPetId(uint32) required broadcast ownrecv db;\n  setPetMovie(uint32, uint8) ownsend airecv;\n  setPetTutorialDone(uint8) required ownsend airecv db;\n  setFishBingoTutorialDone(uint8) required ownsend airecv db;\n  setFishBingoMarkTutorialDone(uint8) required ownsend airecv db;\n  setKartBodyType(int8) required broadcast ownrecv db;\n  setKartBodyColor(int8) required broadcast ownrecv db;\n  setKartAccessoryColor(int8) required broadcast ownrecv db;\n  setKartEngineBlockType(int8) required broadcast ownrecv db;\n  setKartSpoilerType(int8) required broadcast ownrecv db;\n  setKartFrontWheelWellType(int8) required broadcast ownrecv db;\n  setKartBackWheelWellType(int8) required broadcast ownrecv db;\n  setKartRimType(int8) required broadcast ownrecv db;\n  setKartDecalType(int8) required broadcast ownrecv db;\n  updateKartDNAField(int8, int8) ownsend airecv;\n  addOwnedAccessory(int8) ownsend airecv;\n  removeOwnedAccessory(int8) ownsend airecv;\n  setTickets(uint32) required broadcast ownrecv db;\n  setKartingHistory(uint8 [16]) required ownrecv db;\n  setKartingTrophies(uint8 [33]) required ownrecv db;\n  setKartingPersonalBest(uint32/1000 [6]) required ownrecv db;\n  setKartingPersonalBest2(uint32/1000 [12]) required ownrecv db;\n  setKartAccessoriesOwned(int8 [16]) required broadcast ownrecv db;\n  setCurrentKart(uint32) broadcast ownrecv ram;\n  squish(uint8) ownsend airecv;\n  announceBingo() broadcast ownrecv;\n  trickOrTreatTargetMet(uint32) ownrecv;\n  trickOrTreatMilestoneMet() ownrecv;\n  winterCarolingTargetMet(uint32) ownrecv;\n  setCogSummonsEarned(uint8 []) required ownrecv db;\n  reqCogSummons(char [0-256], uint32) ownsend airecv;\n  cogSummonsResponse(string, uint32, uint32) ownrecv;\n  reqUseSpecial(int32) ownsend airecv;\n  useSpecialResponse(string) ownrecv;\n  setGardenStarted(uint8) required ownrecv db;\n  sendToGolfCourse(uint32) ownrecv;\n  setGolfHistory(uint16 [18]) required ownrecv db;\n  setPackedGolfHoleBest(uint8 [18]) required ownrecv db;\n  setGolfCourseBest(uint8 [3]) required ownrecv db;\n  setUnlimitedSwing(uint8) broadcast ownrecv ram;\n  logSuspiciousEvent(char [0-1024]) ownsend airecv;\n  logMessage(char [0-1024]) ownsend airecv;\n  forceLogoutWithNotify() ownrecv;\n  setPinkSlips(uint8) required ownrecv db;\n  setNametagStyle(uint8) required broadcast ownrecv db;\n  setMail(simpleMail []) ownrecv;\n  setNumMailItems(uint32) airecv;\n  setSimpleMailNotify(uint8) ownrecv airecv;\n  setInvites(invite []) ownrecv airecv ram;\n  setPartiesInvitedTo(party []) ownrecv airecv ram;\n  setHostedParties(party []) ownrecv airecv ram;\n  setPartyReplies(repliesForOneParty []) ownrecv airecv ram;\n  updateInvite(uint64, uint8) ownrecv airecv;\n  updateReply(uint64, uint64, uint8) ownrecv airecv;\n  setPartyCanStart(uint64) ownrecv airecv;\n  setPartyStatus(uint64, uint8) ownrecv airecv;\n  announcePartyStarted(uint64) ownrecv;\n  setNeverStartedPartyRefunded(uint64, int8, uint16) ownrecv;\n  setModuleInfo(string []) airecv clsend;\n  setDISLname(string) ram;\n  setDISLid(uint32) ram db airecv;\n  flagAv(uint32, uint16, string []) airecv ownsend;\n  setBuffs(uint32 []) required ownrecv db;\n  magicFanfare() broadcast;\n  magicTeleportRequest(uint32) ownrecv;\n  magicTeleportResponse(uint32, uint32) ownsend airecv;\n  magicTeleportInitiate(uint32, uint32) ownrecv;\n  keepAlive() ownsend airecv;\n  setLastSeen(uint32) required db;\n};\n\ndclass DistributedPartyGate : DistributedObject {\n  getPartyList(uint32) airecv clsend;\n  partyChoiceRequest(uint32, uint64, uint64) airecv clsend;\n  listAllPublicParties(publicPartyInfo []);\n  partyRequestDenied(uint8);\n  setParty(publicPartyInfo, uint32);\n};\n\ndclass DistributedTrolley : DistributedObject {\n  setState(string, int16) broadcast ram;\n  fillSlot0(uint32) broadcast ram;\n  fillSlot1(uint32) broadcast ram;\n  fillSlot2(uint32) broadcast ram;\n  fillSlot3(uint32) broadcast ram;\n  emptySlot0(uint32, int16) broadcast ram;\n  emptySlot1(uint32, int16) broadcast ram;\n  emptySlot2(uint32, int16) broadcast ram;\n  emptySlot3(uint32, int16) broadcast ram;\n  requestBoard() airecv clsend;\n  rejectBoard(uint32);\n  requestExit() airecv clsend;\n  setMinigameZone(uint32, uint16);\n};\n\ndclass DistributedSuitPlanner : DistributedObject {\n  setZoneId(uint32) required broadcast ram;\n  suitListQuery() airecv clsend;\n  suitListResponse(uint8 []);\n  buildingListQuery() airecv clsend;\n  buildingListResponse(uint8 []);\n};\n\ndclass DistributedSuitBase : DistributedObject {\n  denyBattle();\n  setDNAString(blob) required broadcast ram;\n  setLevelDist(int16) required broadcast ram;\n  setBrushOff(int16) broadcast;\n  setWaiter(uint8) broadcast ram;\n  setSkelecog(uint8) required broadcast ram;\n  setSkeleRevives(uint8) required broadcast ram;\n  setHP(int16) required broadcast ram;\n};\n\ndclass DistributedSuit : DistributedSuitBase {\n  requestBattle(int16/10, int16/10, int16/10, int16/10, int16/10, int16/10) airecv clsend;\n  setSPDoId(uint32) required broadcast ram;\n  setPathEndpoints(uint16, uint16, uint16, uint16) required broadcast ram;\n  setPathPosition(uint16, int16) required broadcast ram;\n  setPathState(int8) required broadcast ram;\n  debugSuitPosition(int16/10, int16, int16/10, int16/10, int16) broadcast;\n};\n\ndclass DistributedTutorialSuit : DistributedSuitBase {\n  requestBattle(int16/10, int16/10, int16/10, int16/10, int16/10, int16/10) airecv clsend;\n};\n\ndclass DistributedFactorySuit : DistributedSuitBase {\n  setLevelDoId(uint32) required broadcast ram;\n  setCogId(uint32) required broadcast ram;\n  setReserve(uint8) required broadcast ram;\n  requestBattle(int16/10, int16/10, int16/10, int16/10, int16/10, int16/10) airecv clsend;\n  setAlert(uint32) airecv clsend;\n  setConfrontToon(uint32) broadcast;\n  setStrayed() airecv clsend;\n  setReturn() broadcast;\n};\n\ndclass DistributedMintSuit : DistributedFactorySuit {\n};\n\ndclass DistributedStageSuit : DistributedFactorySuit {\n};\n\ndclass DistributedInvasionSuit : DistributedSuitBase {\n  setSpawnPoint(uint8) required broadcast ram;\n  setAttackInfo(uint32, string, uint8) required broadcast ram;\n  setState(string, int32) required broadcast ram;\n  setMarchLerp(int16/10, int16/10, int16/10, int16/10, int32) broadcast ram;\n  setStaticPoint(int16/10, int16/10, uint16%360/100) broadcast ram;\n  sayFaceoffTaunt(bool, string) broadcast;\n  makeSkelecog() broadcast ram;\n  takeShakerDamage(uint8) clsend airecv;\n  setInvasionFinale(bool) required broadcast ram;\n};\n\ndclass DistributedBossCog : DistributedNode {\n  setDNAString(blob) required broadcast db;\n  setToonIds(uint32 [], uint32 [], uint32 []) broadcast ram;\n  setBattleIds(uint8, uint32, uint32) broadcast ram;\n  setArenaSide(uint8) broadcast ram;\n  avatarEnter() airecv clsend;\n  avatarExit() airecv clsend;\n  avatarNearEnter() airecv clsend;\n  avatarNearExit() airecv clsend;\n  toonDied(uint32) broadcast;\n  setBattleExperience(int32, int16 [], int16 [], uint32 [], int16 [], int16 [], int16 [], int16 [], uint32 [], int32, int16 [], int16 [], uint32 [], int16 [], int16 [], int16 [], int16 [], uint32 [], int32, int16 [], int16 [], uint32 [], int16 [], int16 [], int16 [], int16 [], uint32 [], int32, int16 [], int16 [], uint32 [], int16 [], int16 [], int16 [], int16 [], uint32 [], int32, int16 [], int16 [], uint32 [], int16 [], int16 [], int16 [], int16 [], uint32 [], int32, int16 [], int16 [], uint32 [], int16 [], int16 [], int16 [], int16 [], uint32 [], int32, int16 [], int16 [], uint32 [], int16 [], int16 [], int16 [], int16 [], uint32 [], int32, int16 [], int16 [], uint32 [], int16 [], int16 [], int16 [], int16 [], uint32 [], uint8 [], int16 [], uint32 []) required broadcast ram;\n  zapToon(int16/10, int16/10, int16/10, int16/10, int16/10, int16/10, int8/100, int8/100, uint8, int16) airecv clsend;\n  showZapToon(uint32, int16/10, int16/10, int16/10, int16/10, int16/10, int16/10, uint8, int16) broadcast;\n  setAttackCode(uint8, uint32) broadcast;\n};\n\ndclass DistributedSellbotBoss : DistributedBossCog {\n  setCagedToonNpcId(uint32) required broadcast ram;\n  setDooberIds(uint32 []) broadcast ram;\n  setBossDamage(uint16, uint8, int16) broadcast ram;\n  setState(string) broadcast ram;\n  hitBoss(uint8) airecv clsend;\n  hitBossInsides() airecv clsend;\n  hitToon(uint32) airecv clsend;\n  finalPieSplat() airecv clsend;\n  touchCage() airecv clsend;\n  doStrafe(uint8, uint8) broadcast;\n  cagedToonBattleThree(uint16, uint32) broadcast;\n  toonPromoted(uint8(0-1));\n};\n\ndclass DistributedCashbotBoss : DistributedBossCog {\n  setState(string) broadcast ram;\n  setBossDamage(uint16) broadcast ram;\n  setRewardId(uint16) broadcast ram;\n  applyReward() airecv clsend;\n};\n\nstruct LinkPosition {\n  int16/100 x;\n  int16/100 y;\n  int16/100 z;\n};\n\ndclass DistributedCashbotBossCrane : DistributedObject {\n  setBossCogId(uint32) required broadcast ram;\n  setIndex(uint8) required broadcast ram;\n  setState(char, uint32) broadcast ram;\n  requestControl() airecv clsend;\n  requestFree() airecv clsend;\n  clearSmoothing(int8) broadcast clsend;\n  setCablePos(uint8, int16/100, uint16%360/100, LinkPosition [3], int16) broadcast clsend;\n};\n\ndclass DistributedCashbotBossObject : DistributedObject {\n  setBossCogId(uint32) required broadcast ram;\n  setObjectState(char, uint32, uint32) broadcast ram;\n  requestGrab() airecv clsend;\n  rejectGrab();\n  requestDrop() airecv clsend;\n  hitFloor() clsend;\n  requestFree(int16/10, int16/10, int16/10, uint16%360/100) airecv clsend;\n  hitBoss(uint16/255) airecv clsend;\n  setX(int16/10) broadcast ram clsend airecv;\n  setY(int16/10) broadcast ram clsend airecv;\n  setZ(int16/10) broadcast ram clsend airecv;\n  setH(int16%360/10) broadcast ram clsend airecv;\n  setP(int16%360/10) broadcast ram clsend airecv;\n  setR(int16%360/10) broadcast ram clsend airecv;\n  setPos : setX, setY, setZ;\n  setHpr : setH, setP, setR;\n  setPosHpr : setX, setY, setZ, setH, setP, setR;\n  setXY : setX, setY;\n  setXZ : setX, setZ;\n  setXYH : setX, setY, setH;\n  setXYZH : setX, setY, setZ, setH;\n  setComponentL(uint64) broadcast ram clsend airecv;\n  setComponentX(int16/10) broadcast ram clsend airecv;\n  setComponentY(int16/10) broadcast ram clsend airecv;\n  setComponentZ(int16/10) broadcast ram clsend airecv;\n  setComponentH(int16%360/10) broadcast ram clsend airecv;\n  setComponentP(int16%360/10) broadcast ram clsend airecv;\n  setComponentR(int16%360/10) broadcast ram clsend airecv;\n  setComponentT(int16) broadcast ram clsend airecv;\n  setSmStop : setComponentT;\n  setSmH : setComponentH, setComponentT;\n  setSmZ : setComponentZ, setComponentT;\n  setSmXY : setComponentX, setComponentY, setComponentT;\n  setSmXZ : setComponentX, setComponentZ, setComponentT;\n  setSmPos : setComponentX, setComponentY, setComponentZ, setComponentT;\n  setSmHpr : setComponentH, setComponentP, setComponentR, setComponentT;\n  setSmXYH : setComponentX, setComponentY, setComponentH, setComponentT;\n  setSmXYZH : setComponentX, setComponentY, setComponentZ, setComponentH, setComponentT;\n  setSmPosHpr : setComponentX, setComponentY, setComponentZ, setComponentH, setComponentP, setComponentR, setComponentT;\n  setSmPosHprL : setComponentL, setComponentX, setComponentY, setComponentZ, setComponentH, setComponentP, setComponentR, setComponentT;\n  clearSmoothing(int8) broadcast clsend;\n};\n\ndclass DistributedCashbotBossSafe : DistributedCashbotBossObject {\n  setIndex(uint8) required broadcast ram;\n  requestInitial() airecv clsend;\n};\n\ndclass DistributedCashbotBossGoon : DistributedCashbotBossObject {\n  requestBattle(int16/10) airecv clsend;\n  requestStunned(int16/10) airecv clsend;\n  setVelocity(uint8/10) broadcast ram;\n  setHFov(uint8) broadcast ram;\n  setAttackRadius(uint8) broadcast ram;\n  setStrength(uint8) broadcast ram;\n  setGoonScale(uint8/50) broadcast ram;\n  setupGoon : setVelocity, setHFov, setAttackRadius, setStrength, setGoonScale;\n  setTarget(int16/10, int16/10, uint16%360/100, int16) broadcast ram;\n  destroyGoon() broadcast clsend airecv;\n};\n\ndclass DistributedBattleBase : DistributedObject {\n  setLevelDoId(uint32) required broadcast ram;\n  setBattleCellId(uint32) required broadcast ram;\n  setInteractivePropTrackBonus(int8) required broadcast ram;\n  setPosition(int16/10, int16/10, int16/10) required broadcast ram;\n  setZoneId(uint32) required broadcast ram;\n  setInitialSuitPos(int16/10, int16/10, int16/10) required broadcast ram;\n  setMembers(uint32 [], string, string, string, string, string, uint32 [], string, string, string, string, int16) required broadcast ram;\n  adjust(int16) broadcast;\n  setMovie(int8, uint32 [], uint32 [], int8, int8, int8, int32, int16 [], int16, int16, int16 [], int8, int8, int8, int8, int8, int32, int16 [], int16, int16, int16 [], int8, int8, int8, int8, int8, int32, int16 [], int16, int16, int16 [], int8, int8, int8, int8, int8, int32, int16 [], int16, int16, int16 [], int8, int8, int8, int8, int8, int16 [], int8, int8, int8, int8, int8, int8, int16 [], int8, int8, int8, int8, int8, int8, int16 [], int8, int8, int8, int8, int8, int8, int16 [], int8, int8, int8) required broadcast ram;\n  setChosenToonAttacks(uint32 [], int16 [], int16 [], int32 []) broadcast ram;\n  setBattleExperience(int32, int16 [], int16 [], uint32 [], int16 [], int16 [], int16 [], int16 [], uint32 [], int32, int16 [], int16 [], uint32 [], int16 [], int16 [], int16 [], int16 [], uint32 [], int32, int16 [], int16 [], uint32 [], int16 [], int16 [], int16 [], int16 [], uint32 [], int32, int16 [], int16 [], uint32 [], int16 [], int16 [], int16 [], int16 [], uint32 [], uint8 [], int16 [], uint32 []) required broadcast ram;\n  denyLocalToonJoin();\n  setBossBattle(uint8) required broadcast ram;\n  setState(string, int16) required broadcast ram;\n  faceOffDone() airecv clsend;\n  toonRequestJoin(int16/10, int16/10, int16/10) airecv clsend;\n  toonRequestRun() airecv clsend;\n  toonDied() airecv clsend;\n  adjustDone() airecv clsend;\n  timeout() airecv clsend;\n  movieDone() airecv clsend;\n  rewardDone() airecv clsend;\n  joinDone(uint32) airecv clsend;\n  requestAttack(int8, int8, int32) airecv clsend;\n  requestPetProxy(uint32) airecv clsend;\n};\n\ndclass DistributedBattle : DistributedBattleBase {\n};\n\ndclass DistributedBattleBldg : DistributedBattleBase {\n};\n\ndclass DistributedBattleTutorial : DistributedBattle {\n};\n\ndclass DistributedLevelBattle : DistributedBattle {\n};\n\ndclass DistributedBattleFactory : DistributedLevelBattle {\n};\n\ndclass DistributedMintBattle : DistributedLevelBattle {\n};\n\ndclass DistributedStageBattle : DistributedLevelBattle {\n};\n\ndclass DistributedBattleFinal : DistributedBattleBase {\n  setBossCogId(uint32) required broadcast ram;\n  setBattleNumber(uint8) required broadcast ram;\n  setBattleSide(uint8) required broadcast ram;\n};\n\ndclass DistributedBoat : DistributedObject {\n  setState(string, int16) required broadcast ram;\n};\n\ndclass DistributedButterfly : DistributedObject {\n  setArea(int16, int16) required broadcast ram;\n  setState(int8, uint8, uint8, uint16/10, int16) required broadcast ram;\n  avatarEnter() airecv clsend;\n};\n\ndclass DistributedMMPiano : DistributedObject {\n  requestSpeedUp() airecv clsend;\n  requestChangeDirection() airecv clsend;\n  setSpeed(int16/1000, uint16/100, int16) broadcast ram;\n  playSpeedUp(uint32) broadcast;\n  playChangeDirection(uint32) broadcast;\n};\n\ndclass DistributedDGFlower : DistributedObject {\n  avatarEnter() airecv clsend;\n  avatarExit() airecv clsend;\n  setHeight(uint8/10) broadcast ram;\n};\n\ndclass DistributedElectionEvent : DistributedObject {\n  setState(string, int32) required broadcast ram;\n  wheelbarrowAvatarEnter() clsend airecv;\n  buddyAvatarEnter() clsend airecv;\n  requestSuit() clsend airecv;\n  setSuitPhrase(string) clsend airecv;\n  setSuitState(string) clsend airecv;\n  setSuitDamage(uint8, bool) clsend airecv;\n  phraseSaidToFlippy(uint16) clsend airecv;\n  saySurleePhrase(string, bool, bool) broadcast;\n  flippySpeech(uint32, uint16) broadcast;\n};\n\ndclass DistributedElectionCamera : DistributedNode {\n  setState(string, int32, int16/10, int16/10, int16/10, int16%360/10, int16%360/10, uint32) required broadcast ram;\n};\n\ndclass DistributedElectionCameraManager : DistributedObject {\n  setMainCamera(uint32) required broadcast ram;\n  setCameraIds(uint32 []) required broadcast ram;\n};\n\ndclass DistributedHotAirBalloon : DistributedObject {\n  setState(string, int32, uint32) required broadcast ram;\n  requestEnter() clsend airecv;\n  setFlightPath(uint8) required broadcast ram;\n};\n\ndclass DistributedSafezoneInvasion : DistributedObject {\n  pieHitToon(uint32) clsend airecv;\n  pieHitSuit(uint32) clsend airecv;\n  takeDamage(uint8) clsend airecv;\n  setInvasionStarted(bool) required broadcast ram;\n  stopMusic() broadcast ram;\n};\n\ndclass DistributedFishingPond : DistributedObject {\n  hitTarget(uint32) airecv clsend;\n  setArea(uint32) required broadcast ram;\n};\n\ndclass DistributedFishingTarget : DistributedNode {\n  setPondDoId(uint32) required broadcast ram;\n  setState(uint8, int16/10, uint16/100, uint16/10, int16) required broadcast ram;\n};\n\ndclass DistributedFishingSpot : DistributedObject {\n  setPondDoId(uint32) required broadcast ram;\n  setPosHpr(int16/10, int16/10, int16/10, int16/10, int16/10, int16/10) required broadcast ram;\n  requestEnter() airecv clsend;\n  rejectEnter();\n  requestExit() airecv clsend;\n  setOccupied(uint32) broadcast ram;\n  doCast(uint8/255, int16/100) airecv clsend;\n  sellFish() airecv clsend;\n  sellFishComplete(uint8, uint16);\n  setMovie(uint8, uint8, uint16, uint16, uint16, uint8/100, int16/100) broadcast ram;\n};\n\ndclass DistributedPondBingoManager : DistributedObject {\n  setPondDoId(uint32) required broadcast ram;\n  updateGameState(uint32, uint8);\n  setCardState(uint16, uint8, uint16, uint32);\n  setState(string, int16);\n  cardUpdate(uint16, uint8, uint8, uint8) airecv clsend;\n  enableBingo();\n  handleBingoCall(uint16) airecv clsend;\n  setJackpot(uint16);\n};\n\ndclass DistributedCannon : DistributedObject {\n  setEstateId(uint32) required broadcast ram;\n  setTargetId(uint32) required broadcast ram;\n  setPosHpr(int16/10, int16/10, int16/10, int16/10, int16/10, int16/10) required broadcast ram;\n  setActive(uint8) airecv clsend;\n  setActiveState(uint8) broadcast ram;\n  requestEnter() airecv clsend;\n  requestExit() broadcast;\n  setMovie(uint8, uint32) broadcast ram;\n  setCannonPosition(int32/100, uint32/100) airecv clsend;\n  setCannonLit(int32/100, uint32/100) airecv clsend;\n  setFired() airecv clsend;\n  setLanded() airecv clsend;\n  updateCannonPosition(uint32, int32/100, uint32/100) broadcast ram;\n  setCannonWillFire(uint32, int32/100, int32/100, uint32/100, int16) broadcast;\n  setCannonExit(uint32) broadcast;\n  requestBumperMove(int32/100, int32/100, int32/100) airecv clsend;\n  setCannonBumperPos(int32/100, int32/100, int32/100) required broadcast ram;\n};\n\ndclass DistributedTarget : DistributedObject {\n  setPosition(int16/10, int16/10, int16/10) required broadcast ram;\n  setState(uint8, uint32/10, uint8) broadcast;\n  setReward(uint32) broadcast;\n  setResult(uint32) airecv clsend;\n  setBonus(int16/10) airecv clsend;\n  setCurPinballScore(uint32, int32, int32) clsend airecv;\n  setPinballHiScorer(string) broadcast ram;\n  setPinballHiScore(int32) broadcast ram;\n};\n\ndclass DistributedMinigame : DistributedObject {\n  setParticipants(uint32 []) broadcast ram required;\n  setTrolleyZone(uint32) broadcast ram required;\n  setStartingVotes(uint16 []) broadcast ram required;\n  setMetagameRound(int8) broadcast ram required;\n  setDifficultyOverrides(int32, int32) broadcast ram required;\n  setAvatarJoined() airecv clsend;\n  setAvatarReady() airecv clsend;\n  setAvatarExited() airecv clsend;\n  requestExit() airecv clsend;\n  setGameReady() broadcast;\n  setGameStart(int16) broadcast;\n  setGameExit() broadcast;\n  setGameAbort() broadcast;\n};\n\ndclass DistributedMinigameTemplate : DistributedMinigame {\n};\n\ndclass DistributedRaceGame : DistributedMinigame {\n  setTimerStartTime(int16) broadcast;\n  setAvatarChoice(uint8) airecv clsend;\n  setAvatarChose(uint32) broadcast;\n  setChancePositions(uint8 []) broadcast;\n  setServerChoices(int8 [], uint8 [], int8 []) broadcast;\n};\n\ndclass DistributedCannonGame : DistributedMinigame {\n  setCannonPosition(int32/100, uint32/100) airecv clsend;\n  setCannonLit(int32/100, uint32/100) airecv clsend;\n  updateCannonPosition(uint32, int32/100, uint32/100) broadcast;\n  setCannonWillFire(uint32, int32/100, int32/100, uint32/100) broadcast;\n  setToonWillLandInWater(int32/100) airecv clsend;\n  announceToonWillLandInWater(uint32, int32/100) broadcast;\n};\n\ndclass DistributedPhotoGame : DistributedMinigame {\n  newClientPhotoScore(uint8, char [0-256], uint32/100) airecv clsend;\n  newAIPhotoScore(uint32, uint8, uint32/100) broadcast;\n  filmOut() airecv clsend;\n};\n\ndclass DistributedPatternGame : DistributedMinigame {\n  reportPlayerReady() airecv clsend;\n  setPattern(uint8 []) broadcast;\n  reportPlayerPattern(uint8 [], uint16/1000) airecv clsend;\n  setPlayerPatterns(uint8 [], uint8 [], uint8 [], uint8 [], uint32) broadcast;\n  reportButtonPress(uint8, uint8) airecv clsend;\n  remoteButtonPressed(uint32, uint8, uint8) broadcast;\n};\n\ndclass DistributedRingGame : DistributedMinigame {\n  setTimeBase(int16) broadcast ram required;\n  setColorIndices(int8, int8, int8, int8) broadcast ram required;\n  setToonGotRing(uint8) airecv clsend;\n  setRingGroupResults(uint8) broadcast;\n};\n\ndclass DistributedTagGame : DistributedMinigame {\n  tag(uint32) airecv clsend;\n  setIt(uint32) broadcast;\n  setTreasureScore(uint16 []) broadcast;\n};\n\ndclass DistributedMazeGame : DistributedMinigame {\n  claimTreasure(uint32) airecv clsend;\n  setTreasureGrabbed(uint32, uint32) broadcast;\n  allTreasuresTaken() broadcast;\n  hitBySuit(uint32, int16) clsend broadcast;\n};\n\ndclass DistributedTugOfWarGame : DistributedMinigame {\n  reportPlayerReady(uint8) airecv clsend;\n  sendGoSignal(uint8 []) broadcast;\n  sendStopSignal(uint32 [], uint32 [], uint32 []) broadcast;\n  sendGameType(uint8, uint8) broadcast;\n  reportEndOfContest(uint8) airecv clsend;\n  sendNewAvIdList(uint32 []) airecv clsend;\n  reportCurrentKeyRate(uint32, int16/100) airecv clsend;\n  sendCurrentPosition(uint32 [], int16/1000 []) broadcast;\n  sendSuitPosition(int32/1000) broadcast;\n  remoteKeyRateUpdate(uint32, uint32) broadcast;\n};\n\ndclass DistributedCatchGame : DistributedMinigame {\n  claimCatch(uint32, uint32) airecv clsend;\n  setObjectCaught(uint32, uint32) broadcast;\n  hitBySuit(uint32, int16) clsend broadcast;\n  reportDone() airecv clsend;\n  setEveryoneDone() broadcast;\n};\n\ndclass DistributedDivingGame : DistributedMinigame {\n  pickupTreasure(uint32) airecv clsend;\n  setTreasureGrabbed(uint32, uint32) broadcast;\n  handleFishCollision(uint32, uint32, char [0-256]) airecv clsend;\n  performFishCollision(uint32, uint32, uint32, int16) broadcast;\n  handleCrabCollision(char [0-256]) airecv clsend;\n  performCrabCollision(uint32, int16) broadcast;\n  setTreasureDropped(uint32, int16) broadcast;\n  fishSpawn(int16, uint32, uint32, uint16) broadcast;\n  removeFish(uint32) airecv clsend;\n  getCrabMoving(uint32, int16, int8) airecv clsend;\n  setCrabMoving(uint32, int16, int8, int8, int16, int8) broadcast;\n  treasureRecovered() airecv clsend;\n  dropTreasure() airecv clsend;\n  incrementScore(uint32, uint32, int16) broadcast;\n};\n\ndclass DistributedTargetGame : DistributedMinigame {\n  setTimeBase(int16) broadcast ram required;\n  setToonGotRing(uint8) airecv clsend;\n  setRingGroupResults(uint8) broadcast;\n  setPlayerDone() airecv clsend;\n  setScore(int32, int32) airecv clsend;\n  setTargetSeed(uint32) broadcast ram;\n  setRoundDone() broadcast;\n  setSingleScore(uint16, uint32) broadcast;\n  setGameDone() broadcast;\n};\n\ndclass EstateManager : DistributedObject {\n  startAprilFools() broadcast;\n  stopAprilFools() broadcast;\n  getEstateZone(uint32) airecv clsend;\n  setEstateZone(uint32, uint32);\n  setAvHouseId(uint32, uint32 []) broadcast;\n  sendAvToPlayground(DoId, uint8);\n  exitEstate() airecv clsend;\n  removeFriend(uint32, uint32) airecv clsend;\n};\n\nstruct decorItem {\n  uint8 decorType;\n  uint8 dataByte[];\n  uint32 dataWord[];\n};\n\nstruct lawnItem {\n  uint8 type;\n  uint8 hardPoint;\n  int8 waterLevel;\n  int8 growthLevel;\n  uint16 optional;\n};\n\ndclass DistributedEstate : DistributedObject {\n  setEstateReady() broadcast;\n  setClientReady() airecv clsend;\n  setEstateType(uint8) required broadcast db;\n  setClosestHouse(uint8) airecv clsend;\n  setTreasureIds(uint32 []) broadcast ram;\n  requestServerTime() airecv clsend;\n  setServerTime(uint32);\n  setDawnTime(uint32) required broadcast ram;\n  placeOnGround(uint32) broadcast ram;\n  setDecorData(lawnItem []) required airecv db;\n  setLastEpochTimeStamp(uint32) required airecv db;\n  setRentalTimeStamp(uint32) required airecv db;\n  setRentalType(uint8) required airecv db;\n  setSlot0ToonId(uint32) required airecv db;\n  setSlot0Items(lawnItem []) required airecv db;\n  setSlot1ToonId(uint32) required airecv db;\n  setSlot1Items(lawnItem []) required airecv db;\n  setSlot2ToonId(uint32) required airecv db;\n  setSlot2Items(lawnItem []) required airecv db;\n  setSlot3ToonId(uint32) required airecv db;\n  setSlot3Items(lawnItem []) required airecv db;\n  setSlot4ToonId(uint32) required airecv db;\n  setSlot4Items(lawnItem []) required airecv db;\n  setSlot5ToonId(uint32) required airecv db;\n  setSlot5Items(lawnItem []) required airecv db;\n  setIdList(uint32 []) broadcast ram;\n  completeFlowerSale(uint8) airecv clsend;\n  awardedTrophy(uint32) broadcast;\n  setClouds(uint8) required broadcast ram;\n  cannonsOver() broadcast;\n  gameTableOver() broadcast;\n};\n\ndclass DistributedHouse : DistributedObject {\n  setHousePos(uint8) required broadcast;\n  setHouseType(uint8) required broadcast db;\n  setGardenPos(uint8) required broadcast db;\n  setAvatarId(uint32) required broadcast db;\n  setName(string) required broadcast db;\n  setColor(uint8) required broadcast db;\n  setGender(uint8) required;\n  setAtticItems(blob) required db;\n  setInteriorItems(blob) required db;\n  setAtticWallpaper(blob) required db;\n  setInteriorWallpaper(blob) required db;\n  setAtticWindows(blob) required db;\n  setInteriorWindows(blob) required db;\n  setDeletedItems(blob) required db;\n  setInteriorInitialized(uint8) required db;\n  setCannonEnabled(uint8) required;\n  setHouseReady() broadcast ram;\n};\n\ndclass DistributedHouseInterior : DistributedObject {\n  setHouseId(uint32) required broadcast ram;\n  setHouseIndex(uint8) required broadcast ram;\n  setWallpaper(blob) required broadcast ram;\n  setWindows(blob) required broadcast ram;\n};\n\ndclass DistributedGarden : DistributedObject {\n  sendNewProp(uint8, int16/10, int16/10, int16/10) broadcast;\n};\n\ndclass DistributedParty : DistributedObject {\n  setPartyClockInfo(uint8, uint8, uint8) required broadcast;\n  setInviteeIds(uint32 []) required broadcast;\n  setPartyState(bool) required broadcast;\n  setPartyInfoTuple(party) required broadcast;\n  setAvIdsAtParty(uint32 []) required broadcast;\n  setPartyStartedTime(string) required broadcast;\n  setHostName(string) required broadcast;\n  enteredParty() clsend airecv;\n};\n\ndclass DistributedPartyActivity : DistributedObject {\n  setX(int16/10) broadcast required;\n  setY(int16/10) broadcast required;\n  setH(uint16%360/100) broadcast required;\n  setPartyDoId(uint32) broadcast required;\n  toonJoinRequest() airecv clsend;\n  toonExitRequest() airecv clsend;\n  toonExitDemand() airecv clsend;\n  toonReady() airecv clsend;\n  joinRequestDenied(uint8);\n  exitRequestDenied(uint8);\n  setToonsPlaying(uint32 []) broadcast ram;\n  setState(string, int16) broadcast ram;\n  showJellybeanReward(uint32, uint8, string);\n};\n\ndclass DistributedPartyTeamActivity : DistributedPartyActivity {\n  toonJoinRequest(uint8(0-1)) airecv clsend;\n  toonExitRequest(uint8(0-1)) airecv clsend;\n  toonSwitchTeamRequest() airecv clsend;\n  setPlayersPerTeam(uint8, uint8) broadcast required;\n  setDuration(uint8) broadcast required;\n  setCanSwitchTeams(bool) broadcast required;\n  setState(string, int16, uint32) broadcast ram;\n  setToonsPlaying(uint32 [0-8], uint32 [0-8]) required broadcast ram;\n  setAdvantage(uint16/100);\n  switchTeamRequestDenied(uint8);\n};\n\nstruct CatchGeneration {\n  uint32 generation;\n  uint32 timestamp;\n  int8 numPlayers;\n};\n\ndclass DistributedPartyCatchActivity : DistributedPartyActivity {\n  setStartTimestamp(uint32) required broadcast ram;\n  setGenerations(CatchGeneration []) required broadcast ram;\n  requestActivityStart() airecv clsend;\n  startRequestResponse(uint8);\n  claimCatch(uint32, uint32, uint32) airecv clsend;\n  setObjectCaught(uint32, uint32, uint32) broadcast;\n};\n\ndclass DistributedPartyWinterCatchActivity : DistributedPartyCatchActivity {\n};\n\ndclass DistributedPartyCogActivity : DistributedPartyTeamActivity {\n  pieThrow(uint32, int32, int32/100, int32/100, int32/100, int32/100, uint8) clsend broadcast;\n  pieHitsToon(uint32, int32, int32/100, int32/100, int32/100) clsend broadcast;\n  pieHitsCog(uint32, int32, int8(0-2), int32/100, int32/100, int32/100, int32, bool) clsend broadcast airecv;\n  setCogDistances(int8/100 [3]) broadcast ram;\n  setHighScore(string, uint16) broadcast ram;\n};\n\ndclass DistributedPartyWinterCogActivity : DistributedPartyCogActivity {\n};\n\ndclass DistributedPartyDanceActivityBase : DistributedPartyActivity {\n  updateDancingToon(uint8, char [0-256]) clsend airecv;\n  setToonsPlaying(uint32 [], uint16%360/100 []) broadcast ram;\n  setDancingToonState(uint32, uint8, string) broadcast;\n};\n\ndclass DistributedPartyDanceActivity : DistributedPartyDanceActivityBase {\n};\n\ndclass DistributedPartyDance20Activity : DistributedPartyDanceActivityBase {\n};\n\ndclass DistributedPartyValentineDanceActivity : DistributedPartyDanceActivityBase {\n};\n\ndclass DistributedPartyValentineDance20Activity : DistributedPartyDanceActivityBase {\n};\n\ndclass DistributedPartyJukeboxActivityBase : DistributedPartyActivity {\n  setNextSong(jukeboxSongInfo) clsend airecv;\n  setSongPlaying(jukeboxSongInfo, uint32) broadcast ram;\n  queuedSongsRequest() clsend airecv;\n  queuedSongsResponse(jukeboxSongInfo [], int16);\n  setSongInQueue(jukeboxSongInfo);\n  moveHostSongToTopRequest() clsend airecv;\n  moveHostSongToTop();\n};\n\ndclass DistributedPartyJukeboxActivity : DistributedPartyJukeboxActivityBase {\n};\n\ndclass DistributedPartyJukebox40Activity : DistributedPartyJukeboxActivityBase {\n};\n\ndclass DistributedPartyValentineJukeboxActivity : DistributedPartyJukeboxActivityBase {\n};\n\ndclass DistributedPartyValentineJukebox40Activity : DistributedPartyJukeboxActivityBase {\n};\n\ndclass DistributedPartyCannonActivity : DistributedPartyActivity {\n  setMovie(uint8, uint32) broadcast;\n  setLanded(uint32) airecv broadcast clsend;\n  setCannonWillFire(uint32, int32/100, uint32/100) broadcast;\n  cloudsColorRequest() clsend airecv;\n  cloudsColorResponse(partyCloudColor []);\n  requestCloudHit(uint16, uint8/100, uint8/100, uint8/100) clsend airecv;\n  setCloudHit(uint16, uint8/100, uint8/100, uint8/100) broadcast;\n  setToonTrajectoryAi(int32, int32/100, int32/100, int32/100, int32/100, int32/100, int32/100, int32/100, int32/100, int32/100) airecv clsend;\n  setToonTrajectory(uint32, int32, int32/100, int32/100, int32/100, int32/100, int32/100, int32/100, int32/100, int32/100, int32/100) broadcast;\n  updateToonTrajectoryStartVelAi(int32/100, int32/100, int32/100) airecv clsend;\n  updateToonTrajectoryStartVel(uint32, int32/100, int32/100, int32/100) broadcast;\n};\n\ndclass DistributedPartyCannon : DistributedObject {\n  setActivityDoId(uint64) required broadcast ram;\n  setPosHpr(int16/10, int16/10, int16/10, int16/10, int16/10, int16/10) required broadcast ram;\n  requestEnter() airecv clsend;\n  requestExit() broadcast;\n  setMovie(uint8, uint32) broadcast ram;\n  setCannonPosition(int32/100, uint32/100) airecv clsend;\n  setCannonLit(int32/100, uint32/100) airecv clsend;\n  setFired() airecv clsend;\n  setLanded(uint32) airecv clsend;\n  updateCannonPosition(uint32, int32/100, uint32/100) broadcast ram;\n  setCannonExit(uint32) broadcast;\n  setTimeout() clsend airecv;\n};\n\ndclass DistributedPartyFireworksActivity : DistributedPartyActivity {\n  setEventId(uint8) required broadcast;\n  setShowStyle(uint8) required broadcast;\n  setSongId(uint8) required broadcast;\n};\n\ndclass DistributedPartyTrampolineActivity : DistributedPartyActivity {\n  awardBeans(uint8, uint16) clsend airecv;\n  setBestHeightInfo(string, uint16) broadcast ram;\n  reportHeightInformation(uint16) airecv clsend;\n  leaveTrampoline() broadcast;\n  requestAnim(char [0-256]) clsend airecv;\n  requestAnimEcho(string) broadcast;\n  removeBeans(int8 []) clsend airecv;\n  removeBeansEcho(int8 []) broadcast;\n};\n\ndclass DistributedPartyValentineTrampolineActivity : DistributedPartyTrampolineActivity {\n};\n\ndclass DistributedPartyVictoryTrampolineActivity : DistributedPartyTrampolineActivity {\n};\n\ndclass DistributedPartyWinterTrampolineActivity : DistributedPartyTrampolineActivity {\n};\n\ndclass DistributedPartyTugOfWarActivity : DistributedPartyTeamActivity {\n  reportKeyRateForce(uint32, int16/100) airecv clsend;\n  reportFallIn(uint8) airecv clsend;\n  setToonsPlaying(uint32 [0-4], uint32 [0-4]) required broadcast ram;\n  updateToonKeyRate(uint32, uint32) broadcast;\n  updateToonPositions(int16/1000) broadcast;\n};\n\ndclass DeleteManager : DistributedObject {\n  setInventory(blob) airecv clsend;\n};\n\nstruct weeklyCalendarHoliday {\n  uint8 holidayId;\n  uint8 dayOfTheWeek;\n};\n\nstruct yearlyCalendarHoliday {\n  uint8 holidayId;\n  uint8 firstStartTime[];\n  uint8 lastEndTime[];\n};\n\nstruct oncelyCalendarHoliday {\n  uint8 holidayId;\n  uint16 firstStartTime[];\n  uint16 lastEndTime[];\n};\n\nstruct relativelyCalendarHoliday {\n  uint8 holidayId;\n  uint16 firstStartTime[];\n  uint16 lastEndTime[];\n};\n\nstruct startAndEndTime {\n  uint16 startTime[];\n  uint16 endTime[];\n};\n\nstruct multipleStartHoliday {\n  uint8 holidayId;\n  startAndEndTime times[];\n};\n\ndclass NewsManager : DistributedObject {\n  setPopulation(uint32) broadcast ram;\n  setBingoWin(uint32) broadcast ram;\n  setBingoStart() broadcast;\n  setBingoEnd() broadcast;\n  setCircuitRaceStart() broadcast;\n  setCircuitRaceEnd() broadcast;\n  setTrolleyHolidayStart() broadcast;\n  setTrolleyHolidayEnd() broadcast;\n  setTrolleyWeekendStart() broadcast;\n  setTrolleyWeekendEnd() broadcast;\n  setRoamingTrialerWeekendStart() broadcast;\n  setRoamingTrialerWeekendEnd() broadcast;\n  setInvasionStatus(uint8, string, uint32, uint8) broadcast;\n  setHolidayIdList(uint32 []) broadcast ram;\n  holidayNotify() broadcast;\n  setWeeklyCalendarHolidays(weeklyCalendarHoliday []) required broadcast ram;\n  setYearlyCalendarHolidays(yearlyCalendarHoliday []) required broadcast ram;\n  setOncelyCalendarHolidays(oncelyCalendarHoliday []) required broadcast ram;\n  setRelativelyCalendarHolidays(relativelyCalendarHoliday []) required broadcast ram;\n  setMultipleStartHolidays(multipleStartHoliday []) required broadcast ram;\n  sendSystemMessage(string, uint8) broadcast ram;\n};\n\ndclass PurchaseManager : DistributedObject {\n  setPlayerIds(uint32, uint32, uint32, uint32) required broadcast ram;\n  setNewbieIds(uint32 []) required broadcast ram;\n  setMinigamePoints(uint8, uint8, uint8, uint8) required broadcast ram;\n  setPlayerMoney(uint8, uint8, uint8, uint8) required broadcast ram;\n  setPlayerStates(uint8, uint8, uint8, uint8) required broadcast ram;\n  setCountdown(int16) required broadcast ram;\n  setMetagameRound(int8) required broadcast ram;\n  setVotesArray(int16 []) required broadcast ram;\n  requestExit() airecv clsend;\n  requestPlayAgain() airecv clsend;\n  setInventory(blob, int16, uint8) airecv clsend;\n  setPurchaseExit() broadcast;\n};\n\ndclass NewbiePurchaseManager : PurchaseManager {\n  setOwnedNewbieId(uint32) required broadcast ram;\n};\n\ndclass TutorialManager : DistributedObject {\n  requestTutorial() airecv clsend;\n  rejectTutorial() airecv clsend;\n  requestSkipTutorial() airecv clsend;\n  skipTutorialResponse(uint8);\n  enterTutorial(uint32, uint32, uint32, uint32);\n  allDone() airecv clsend;\n  toonArrived() airecv clsend;\n};\n\ndclass CatalogManager : DistributedObject {\n  startCatalog() airecv clsend;\n};\n\ndclass DistributedMyTest : DistributedObject {\n  setMyTest(uint16) broadcast;\n};\n\ndclass DistributedTreasure : DistributedObject {\n  setTreasureType(uint16) required broadcast ram;\n  setPosition(int16/10, int16/10, int16/10) required broadcast ram;\n  requestGrab() airecv clsend;\n  setGrab(uint32) broadcast ram;\n  setReject() broadcast;\n};\n\ndclass DistributedCashbotBossTreasure : DistributedTreasure {\n  setGoonId(uint32) required broadcast ram;\n  setFinalPosition(int16/10, int16/10, int16/10) required broadcast ram;\n  setStyle(uint16) required broadcast ram;\n};\n\ndclass DistributedLargeBlobSender : DistributedObject {\n  setMode(uint8) required broadcast ram;\n  setTargetAvId(uint32) required broadcast ram;\n  setChunk(blob);\n  setFilename(string);\n  setAck() airecv clsend;\n};\n\ndclass DistributedLevel : DistributedObject {\n  setLevelZoneId(uint32) required broadcast ram;\n  setPlayerIds(uint32 []) required broadcast ram;\n  setEntranceId(uint8) required broadcast ram;\n  setZoneIds(uint32 []) broadcast ram;\n  setStartTimestamp(int32) broadcast ram;\n  setOuch(uint8) airecv clsend;\n  requestCurrentLevelSpec(string, string) airecv clsend;\n  setSpecDeny(blob);\n  setSpecSenderDoId(uint32);\n  setAttribChange(uint32, blob, blob, blob) broadcast;\n};\n\ndclass DistributedEntity : DistributedObject {\n  setLevelDoId(uint32) required broadcast ram;\n  setEntId(uint32) required broadcast ram;\n};\n\ndclass DistributedInteractiveEntity : DistributedEntity {\n  setAvatarInteract(uint32) required broadcast ram;\n  requestInteract() airecv clsend;\n  rejectInteract();\n  requestExit() airecv clsend;\n  avatarExit(uint32) broadcast;\n  setState(string, int32) required broadcast ram;\n};\n\ndclass DistributedTrophyMgr : DistributedObject {\n  requestTrophyScore() airecv clsend;\n};\n\ndclass DistributedBuilding : DistributedObject {\n  setBlock(uint16, uint32) required broadcast ram;\n  setSuitData(int8, int8, int8) required broadcast ram;\n  setVictorList(uint32 []) broadcast ram;\n  setState(string, int16) broadcast ram;\n  setVictorReady() airecv clsend;\n};\n\ndclass DistributedAnimBuilding : DistributedBuilding {\n};\n\ndclass DistributedToonInterior : DistributedObject {\n  setZoneIdAndBlock(uint32, uint16) required broadcast ram;\n  setToonData(blob) required broadcast ram;\n  setState(string, int16) required broadcast ram;\n  nextSnowmanHeadPart() clsend airecv;\n};\n\ndclass DistributedToonHallInterior : DistributedToonInterior {\n};\n\ndclass DistributedSuitInterior : DistributedObject {\n  setZoneId(uint32) required broadcast ram;\n  setExtZoneId(uint32) required broadcast ram;\n  setDistBldgDoId(uint32) required broadcast ram;\n  setNumFloors(int8) required broadcast ram;\n  setToons(uint32 [], uint16) broadcast ram;\n  setSuits(uint32 [], uint32 [], uint16 []) broadcast ram;\n  setState(string, int16) required broadcast ram;\n  setAvatarJoined() airecv clsend;\n  elevatorDone() airecv clsend;\n  reserveJoinDone() airecv clsend;\n};\n\ndclass DistributedCogdoBarrel : DistributedObject {\n  requestGrab() airecv clsend;\n  setIndex(uint32) required broadcast ram;\n  setState(uint32) required broadcast ram;\n  setGrab(uint32) broadcast ram;\n  setReject() broadcast;\n};\n\ndclass DistributedCogdoInterior : DistributedObject {\n  setZoneId(uint32) required broadcast ram;\n  setExtZoneId(uint32) required broadcast ram;\n  setDistBldgDoId(uint32) required broadcast ram;\n  setNumFloors(int8) required broadcast ram;\n  setShopOwnerNpcId(uint32) required broadcast ram;\n  setSOSNpcId(uint32) broadcast ram;\n  setFOType(int8) broadcast ram;\n  setToons(uint32 [], uint16) broadcast ram;\n  setSuits(uint32 [], uint32 [], uint16 []) broadcast ram;\n  setState(string, int16) required broadcast ram;\n  setAvatarJoined() airecv clsend;\n  elevatorDone() airecv clsend;\n  reserveJoinDone() airecv clsend;\n  toonLeftBarrelRoom() airecv clsend;\n  toonBarrelRoomIntroDone() airecv clsend;\n  setBarrelRoomReward(uint32 [], uint8 []) broadcast;\n  toonBarrelRoomRewardDone() airecv clsend;\n};\n\ndclass DistributedCogdoBattleBldg : DistributedBattleBldg {\n};\n\ndclass DistCogdoGame : DistributedObject {\n  setInteriorId(uint32) required broadcast ram;\n  setExteriorZone(uint32) broadcast ram required;\n  setDifficultyOverrides(int32, int32) broadcast ram required;\n  setVisible() broadcast;\n  setIntroStart() broadcast;\n  setToonSad(uint32) broadcast;\n  setToonDisconnect(uint32) broadcast;\n  setAvatarReady() airecv clsend;\n  setGameStart(int16) broadcast;\n  setGameFinish(int16) broadcast;\n};\n\ndclass DistCogdoLevelGame : DistCogdoGame, DistributedLevel {\n};\n\ndclass DistCogdoMazeGame : DistCogdoGame {\n  requestAction(uint8, uint32) airecv clsend;\n  doAction(uint8, uint32, int16) broadcast;\n  setNumSuits(uint8 [3]) required broadcast;\n  requestUseGag(int16/10, int16/10, int16/10, int16) clsend airecv;\n  toonUsedGag(uint32, int16/10, int16/10, int16/10, int16) broadcast;\n  requestSuitHitByGag(uint8, uint8) clsend airecv;\n  suitHitByGag(uint32, uint8, uint8) broadcast;\n  requestHitBySuit(uint8, uint8, int16) clsend airecv;\n  toonHitBySuit(uint32, uint8, uint8, int16) broadcast;\n  requestHitByDrop() clsend airecv;\n  toonHitByDrop(uint32) broadcast;\n  requestPickUp(uint8) clsend airecv;\n  pickUp(uint32, uint8, int16) broadcast;\n  requestGag(uint8) clsend airecv;\n  hasGag(uint32, int16) broadcast;\n};\n\ndclass DistCogdoFlyingGame : DistCogdoGame {\n  requestAction(uint8, uint8) airecv clsend;\n  requestPickUp(uint16, uint8) airecv clsend;\n  pickUp(uint32, uint16, int16) broadcast;\n  debuffPowerup(uint32, uint16, int16) broadcast;\n  doAction(uint8, uint32) broadcast;\n  eagleExitCooldown(uint32, int16) broadcast;\n  toonSetAsEagleTarget(uint32, uint8, int16) broadcast;\n  toonClearAsEagleTarget(uint32, uint8, int16) broadcast;\n  toonDied(uint32, int32) broadcast;\n  toonSpawn(uint32, int32) broadcast;\n  toonSetBlades(uint32, int32) broadcast;\n  toonBladeLost(uint32) broadcast;\n};\n\ndclass DistCogdoBoardroomGame : DistCogdoLevelGame {\n};\n\ndclass DistCogdoCraneGame : DistCogdoLevelGame {\n};\n\ndclass DistCogdoCrane : DistributedObject {\n  setCraneGameId(uint32) required broadcast ram;\n  setIndex(uint8) required broadcast ram;\n  setState(char, uint32) broadcast ram;\n  clearSmoothing(int8) broadcast clsend;\n  setCablePos(uint8, int16/100, uint16%360/100, LinkPosition [3], int16) broadcast clsend;\n};\n\ndclass DistCogdoCraneObject : DistributedObject {\n  setCraneGameId(uint32) required broadcast ram;\n  setObjectState(char, uint32, uint32) broadcast ram;\n  requestGrab() airecv clsend;\n  rejectGrab();\n  requestDrop() airecv clsend;\n  hitFloor() clsend;\n  requestFree(int16/10, int16/10, int16/10, uint16%360/100) airecv clsend;\n  hitBoss(uint16/255) airecv clsend;\n  setX(int16/10) broadcast ram clsend airecv;\n  setY(int16/10) broadcast ram clsend airecv;\n  setZ(int16/10) broadcast ram clsend airecv;\n  setH(int16%360/10) broadcast ram clsend airecv;\n  setP(int16%360/10) broadcast ram clsend airecv;\n  setR(int16%360/10) broadcast ram clsend airecv;\n  setPos : setX, setY, setZ;\n  setHpr : setH, setP, setR;\n  setPosHpr : setX, setY, setZ, setH, setP, setR;\n  setXY : setX, setY;\n  setXZ : setX, setZ;\n  setXYH : setX, setY, setH;\n  setXYZH : setX, setY, setZ, setH;\n  setComponentL(uint64) broadcast ram clsend airecv;\n  setComponentX(int16/10) broadcast ram clsend airecv;\n  setComponentY(int16/10) broadcast ram clsend airecv;\n  setComponentZ(int16/10) broadcast ram clsend airecv;\n  setComponentH(int16%360/10) broadcast ram clsend airecv;\n  setComponentP(int16%360/10) broadcast ram clsend airecv;\n  setComponentR(int16%360/10) broadcast ram clsend airecv;\n  setComponentT(int16) broadcast ram clsend airecv;\n  setSmStop : setComponentT;\n  setSmH : setComponentH, setComponentT;\n  setSmZ : setComponentZ, setComponentT;\n  setSmXY : setComponentX, setComponentY, setComponentT;\n  setSmXZ : setComponentX, setComponentZ, setComponentT;\n  setSmPos : setComponentX, setComponentY, setComponentZ, setComponentT;\n  setSmHpr : setComponentH, setComponentP, setComponentR, setComponentT;\n  setSmXYH : setComponentX, setComponentY, setComponentH, setComponentT;\n  setSmXYZH : setComponentX, setComponentY, setComponentZ, setComponentH, setComponentT;\n  setSmPosHpr : setComponentX, setComponentY, setComponentZ, setComponentH, setComponentP, setComponentR, setComponentT;\n  setSmPosHprL : setComponentL, setComponentX, setComponentY, setComponentZ, setComponentH, setComponentP, setComponentR, setComponentT;\n  clearSmoothing(int8) broadcast clsend;\n};\n\ndclass DistCogdoCraneMoneyBag : DistCogdoCraneObject {\n  setIndex(uint8) required broadcast ram;\n  requestInitial() airecv clsend;\n};\n\ndclass DistCogdoCraneCog : DistributedObject {\n  setGameId(uint32) required broadcast ram;\n  setDNAString(blob) required broadcast ram;\n  setSpawnInfo(uint8, int16) required broadcast ram;\n};\n\ndclass DistributedHQInterior : DistributedObject {\n  setZoneIdAndBlock(uint32, uint16) required broadcast ram;\n  setLeaderBoard(blob) required broadcast ram;\n  setTutorial(uint8) required broadcast ram;\n};\n\ndclass DistributedGagshopInterior : DistributedObject {\n  setZoneIdAndBlock(uint32, uint16) required broadcast ram;\n};\n\ndclass DistributedPetshopInterior : DistributedObject {\n  setZoneIdAndBlock(uint32, uint16) required broadcast ram;\n};\n\ndclass DistributedKartShopInterior : DistributedObject {\n  setZoneIdAndBlock(uint32, uint16) required broadcast ram;\n};\n\ndclass DistributedLibraryInterior : DistributedObject {\n  setZoneIdAndBlock(uint32, uint16) required broadcast ram;\n};\n\ndclass DistributedDoor : DistributedObject {\n  setZoneIdAndBlock(uint32, uint32) required broadcast ram;\n  setSwing(int8) required broadcast ram;\n  setDoorType(uint8) required broadcast ram;\n  setDoorIndex(uint8) required broadcast ram;\n  setOtherZoneIdAndDoId(uint32, uint32);\n  requestEnter() airecv clsend;\n  requestExit() airecv clsend;\n  rejectEnter(int8);\n  avatarEnter(uint32) broadcast;\n  avatarExit(uint32) broadcast;\n  setState(string, int16) required broadcast ram;\n  setExitDoorState(string, int16) required broadcast ram;\n};\n\ndclass DistributedAnimDoor : DistributedDoor {\n};\n\ndclass DistributedHouseDoor : DistributedDoor {\n};\n\ndclass DistributedCogHQDoor : DistributedDoor {\n};\n\ndclass DistributedSellbotHQDoor : DistributedCogHQDoor {\n  informPlayer(uint8) broadcast ram;\n};\n\ndclass DistributedNPCToonBase : DistributedNode {\n  setName(string) required broadcast ram;\n  setDNAString(blob) required broadcast ram;\n  setPositionIndex(uint8) required broadcast ram;\n  setAnimState(string, int16/1000, int16) broadcast ram;\n  setPageNumber(int16, int8, int16) broadcast ram clsend;\n  avatarEnter() airecv clsend;\n  freeAvatar();\n};\n\ndclass DistributedNPCToon : DistributedNPCToonBase {\n  setMovie(uint8, uint32, uint32, uint16 [], int16) broadcast ram;\n  setMovieDone() airecv clsend;\n  chooseQuest(uint16) airecv clsend;\n  chooseTrack(int8) airecv clsend;\n};\n\ndclass DistributedNPCSnowballGiver : DistributedNPCToonBase {\n  gaveSnowballs(uint32, uint32, uint8) broadcast ram;\n};\n\ndclass DistributedNPCSpecialQuestGiver : DistributedNPCToonBase {\n  setMovie(uint8, uint32, uint32, uint16 [], int16) broadcast ram;\n  setMovieDone() airecv clsend;\n  chooseQuest(uint16) airecv clsend;\n  chooseTrack(int8) airecv clsend;\n};\n\ndclass DistributedNPCFlippyInToonHall : DistributedNPCToon {\n};\n\ndclass DistributedNPCScientist : DistributedNPCToonBase {\n  setChat(char [0-1024], uint8, uint32, uint8, uint8) ownsend broadcast;\n};\n\ndclass DistributedNPCClerk : DistributedNPCToonBase {\n  setMovie(uint8, uint32, uint32, int16) broadcast ram;\n  setInventory(blob, int16, uint8) airecv clsend;\n};\n\ndclass DistributedNPCTailor : DistributedNPCToonBase {\n  setMovie(uint8, uint32, uint32, int16) broadcast ram;\n  setDNA(blob, int8, uint8) airecv clsend;\n  setCustomerDNA(uint32, blob) broadcast ram;\n};\n\ndclass DistributedNPCBlocker : DistributedNPCToonBase {\n  setMovie(uint8, uint32, uint32, int16) broadcast ram;\n};\n\ndclass DistributedNPCFisherman : DistributedNPCToonBase {\n  setMovie(uint8, uint32, uint32, uint32 [], int16) broadcast ram;\n  completeSale(uint8) airecv clsend;\n};\n\ndclass DistributedNPCPartyPerson : DistributedNPCToonBase {\n  setMovie(uint8, uint32, uint32, uint32 [], int16) broadcast ram;\n  answer(uint8) airecv clsend;\n};\n\ndclass DistributedNPCPetclerk : DistributedNPCToonBase {\n  setMovie(uint8, uint32, uint32, uint32 [], int16) broadcast ram;\n  setPetSeeds(uint32 []);\n  petAdopted(uint8, uint32) airecv clsend;\n  petReturned() airecv clsend;\n  fishSold() airecv clsend;\n  transactionDone() airecv clsend;\n};\n\ndclass DistributedNPCKartClerk : DistributedNPCToonBase {\n  setMovie(uint8, uint32, uint32, uint32 [], int16) broadcast ram;\n  buyKart(uint8) airecv clsend;\n  buyAccessory(uint8) airecv clsend;\n  transactionDone() airecv clsend;\n};\n\ndclass DistributedKnockKnockDoor : DistributedAnimatedProp {\n};\n\ndclass DistributedElevator : DistributedObject {\n  setBldgDoId(uint32) required broadcast ram;\n  setState(string, int16) broadcast ram;\n  fillSlot0(uint32, uint8) broadcast ram;\n  fillSlot1(uint32, uint8) broadcast ram;\n  fillSlot2(uint32, uint8) broadcast ram;\n  fillSlot3(uint32, uint8) broadcast ram;\n  fillSlot4(uint32, uint8) broadcast ram;\n  fillSlot5(uint32, uint8) broadcast ram;\n  fillSlot6(uint32, uint8) broadcast ram;\n  fillSlot7(uint32, uint8) broadcast ram;\n  emptySlot0(uint32, int8, int16, int16) broadcast ram;\n  emptySlot1(uint32, int8, int16, int16) broadcast ram;\n  emptySlot2(uint32, int8, int16, int16) broadcast ram;\n  emptySlot3(uint32, int8, int16, int16) broadcast ram;\n  emptySlot4(uint32, int8, int16, int16) broadcast ram;\n  emptySlot5(uint32, int8, int16, int16) broadcast ram;\n  emptySlot6(uint32, int8, int16, int16) broadcast ram;\n  emptySlot7(uint32, int8, int16, int16) broadcast ram;\n  requestBoard() airecv clsend;\n  rejectBoard(uint32, uint8);\n  requestExit() airecv clsend;\n  setElevatorTripId(uint32) required broadcast ram;\n  setAntiShuffle(uint8) required broadcast ram;\n  setMinLaff(uint8) required broadcast ram;\n};\n\ndclass DistributedElevatorFSM : DistributedObject {\n  setBldgDoId(uint32) required broadcast ram;\n  setState(string, int16) broadcast ram;\n  fillSlot0(uint32) broadcast ram;\n  fillSlot1(uint32) broadcast ram;\n  fillSlot2(uint32) broadcast ram;\n  fillSlot3(uint32) broadcast ram;\n  fillSlot4(uint32) broadcast ram;\n  fillSlot5(uint32) broadcast ram;\n  fillSlot6(uint32) broadcast ram;\n  fillSlot7(uint32) broadcast ram;\n  emptySlot0(uint32, int8, int16) broadcast ram;\n  emptySlot1(uint32, int8, int16) broadcast ram;\n  emptySlot2(uint32, int8, int16) broadcast ram;\n  emptySlot3(uint32, int8, int16) broadcast ram;\n  emptySlot4(uint32, int8, int16) broadcast ram;\n  emptySlot5(uint32, int8, int16) broadcast ram;\n  emptySlot6(uint32, int8, int16) broadcast ram;\n  emptySlot7(uint32, int8, int16) broadcast ram;\n  requestBoard() airecv clsend;\n  rejectBoard(uint32, uint8);\n  requestExit() airecv clsend;\n  setElevatorTripId(uint32) required broadcast ram;\n  setAntiShuffle(uint8) required broadcast ram;\n  setMinLaff(uint8) required broadcast ram;\n};\n\ndclass DistributedElevatorFloor : DistributedElevatorFSM {\n  setFloor(int8) broadcast ram;\n  setLocked(uint16) required broadcast ram;\n  setEntering(uint16) required broadcast ram;\n  kickToonsOut() broadcast;\n  setLatch(uint32) required broadcast ram;\n};\n\ndclass DistributedElevatorExt : DistributedElevator {\n  setFloor(int8) broadcast ram;\n};\n\ndclass DistributedLawOfficeElevatorExt : DistributedElevatorExt {\n  setEntranceId(uint8) required broadcast ram;\n  setLawOfficeInteriorZone(uint32);\n  setLawOfficeInteriorZoneForce(uint32);\n};\n\ndclass DistributedElevatorInt : DistributedElevator {\n  requestBuildingExit() airecv clsend;\n  forcedExit(uint32);\n};\n\ndclass DistributedFactoryElevatorExt : DistributedElevatorExt {\n  setEntranceId(uint8) required broadcast ram;\n  setFactoryInteriorZone(uint32);\n  setFactoryInteriorZoneForce(uint32);\n};\n\ndclass DistributedMintElevatorExt : DistributedElevatorExt {\n  setMintId(uint16) required broadcast ram;\n  setMintInteriorZone(uint32);\n  setMintInteriorZoneForce(uint32);\n};\n\ndclass DistributedCogdoElevatorExt : DistributedElevatorExt {\n};\n\ndclass DistributedLawOfficeElevatorInt : DistributedElevatorFloor {\n  setLawOfficeInteriorZone(uint32);\n};\n\ndclass DistributedCogdoElevatorInt : DistributedElevatorInt {\n};\n\ndclass DistributedBossElevator : DistributedElevatorExt {\n  setBossOfficeZone(uint32);\n  setBossOfficeZoneForce(uint32);\n};\n\ndclass DistributedVPElevator : DistributedBossElevator {\n};\n\ndclass DistributedCFOElevator : DistributedBossElevator {\n};\n\ndclass DistributedCJElevator : DistributedBossElevator {\n};\n\ndclass DistributedBBElevator : DistributedBossElevator {\n};\n\ndclass DistributedBoardingParty : DistributedObject {\n  postGroupInfo(uint32, uint32 [], uint32 [], uint32 []) broadcast;\n  informDestinationInfo(uint8) clsend airecv;\n  postDestinationInfo(uint8) broadcast;\n  postInvite(uint32, uint32, bool) broadcast;\n  postInviteCanceled() broadcast;\n  postKick(uint32) broadcast;\n  postKickReject(uint32, uint32, uint32) broadcast;\n  postSizeReject(uint32, uint32, uint32) broadcast;\n  postInviteAccepted(uint32) broadcast;\n  postInviteDelcined(uint32) broadcast;\n  postInviteNotQualify(uint32, int8, uint32) broadcast;\n  postAlreadyInGroup() broadcast;\n  postGroupDissolve(uint32, uint32, uint32 [], uint8) broadcast;\n  postMessageAcceptanceFailed(uint32, int8) broadcast;\n  postGroupAlreadyFull() broadcast;\n  postSomethingMissing() broadcast;\n  postRejectBoard(uint32, int8, uint32 [], uint32 []) broadcast;\n  postRejectGoto(uint32, int8, uint32 [], uint32 []) broadcast;\n  postMessageInvited(uint32, uint32) broadcast;\n  postMessageInvitationFailed(uint32) broadcast;\n  acceptGoToFirstTime(uint32) broadcast;\n  acceptGoToSecondTime(uint32) broadcast;\n  rejectGoToRequest(uint32, int8, uint32 [], uint32 []) broadcast;\n  requestInvite(uint32) airecv clsend;\n  requestCancelInvite(uint32) airecv clsend;\n  requestAcceptInvite(uint32, uint32) airecv clsend;\n  requestRejectInvite(uint32, uint32) airecv clsend;\n  requestKick(uint32) airecv clsend;\n  requestLeave(uint32) airecv clsend;\n  requestBoard(uint32) airecv clsend;\n  requestGoToFirstTime(uint32) airecv clsend;\n  requestGoToSecondTime(uint32) airecv clsend;\n  setElevatorIdList(uint32 []) required broadcast ram;\n  setGroupSize(uint8) required broadcast ram;\n};\n\ndclass DistributedTutorialInterior : DistributedObject {\n  setZoneIdAndBlock(uint32, uint16) required broadcast ram;\n  setTutorialNpcId(uint32) required broadcast ram;\n};\n\ndclass DistributedBankMgr : DistributedObject {\n  transferMoney(int32) airecv clsend;\n};\n\ndclass DistributedMailbox : DistributedObject {\n  setHouseId(uint32) required broadcast ram;\n  setHousePos(uint8) required broadcast ram;\n  setName(string) required broadcast ram;\n  setFullIndicator(uint8) broadcast ram;\n  avatarEnter() airecv clsend;\n  avatarExit() airecv clsend;\n  freeAvatar();\n  setMovie(uint8, uint32) broadcast ram;\n  acceptItemMessage(uint16, blob, uint8, int32) airecv clsend;\n  acceptItemResponse(uint16, int8);\n  discardItemMessage(uint16, blob, uint8, int32) airecv clsend;\n  discardItemResponse(uint16, int8);\n  acceptInviteMessage(uint16, uint64) airecv clsend;\n  rejectInviteMessage(uint16, uint64) airecv clsend;\n  markInviteReadButNotReplied(uint64) airecv clsend;\n};\n\ndclass DistributedFurnitureManager : DistributedObject {\n  setOwnerId(uint32) required broadcast ram;\n  setOwnerName(string) required broadcast ram;\n  setInteriorId(uint32) required broadcast ram;\n  setAtticItems(blob) required broadcast ram;\n  setAtticWallpaper(blob) required broadcast ram;\n  setAtticWindows(blob) required broadcast ram;\n  setDeletedItems(blob) required broadcast ram;\n  suggestDirector(uint32) airecv clsend;\n  setDirector(uint32) broadcast ram;\n  avatarEnter() airecv clsend;\n  avatarExit() airecv clsend;\n  moveItemToAtticMessage(uint32, uint16) airecv clsend;\n  moveItemToAtticResponse(int8, uint16);\n  moveItemFromAtticMessage(uint16, int16/10, int16/10, int16/100, int16/10, int16/10, int16/10, uint16) airecv clsend;\n  moveItemFromAtticResponse(int8, uint32, uint16);\n  deleteItemFromAtticMessage(blob, uint16, uint16) airecv clsend;\n  deleteItemFromAtticResponse(int8, uint16);\n  deleteItemFromRoomMessage(blob, uint32, uint16) airecv clsend;\n  deleteItemFromRoomResponse(int8, uint16);\n  moveWallpaperFromAtticMessage(uint16, uint8, uint16) airecv clsend;\n  moveWallpaperFromAtticResponse(int8, uint16);\n  deleteWallpaperFromAtticMessage(blob, uint16, uint16) airecv clsend;\n  deleteWallpaperFromAtticResponse(int8, uint16);\n  moveWindowToAtticMessage(uint8, uint16) airecv clsend;\n  moveWindowToAtticResponse(int8, uint16);\n  moveWindowFromAtticMessage(uint16, uint8, uint16) airecv clsend;\n  moveWindowFromAtticResponse(int8, uint16);\n  moveWindowMessage(uint8, uint8, uint16) airecv clsend;\n  moveWindowResponse(int8, uint16);\n  deleteWindowFromAtticMessage(blob, uint16, uint16) airecv clsend;\n  deleteWindowFromAtticResponse(int8, uint16);\n  recoverDeletedItemMessage(blob, uint16, uint16) airecv clsend;\n  recoverDeletedItemResponse(int8, uint16);\n};\n\ndclass DistributedFurnitureItem : DistributedSmoothNode {\n  setItem(uint32, blob) required broadcast ram;\n  requestPosHpr(uint8, int16/10, int16/10, int16/100, int16/10, int16/10, int16/10, int16) airecv clsend;\n  setMode(uint8, uint32) required broadcast ram;\n};\n\ndclass DistributedBank : DistributedFurnitureItem {\n  avatarEnter() airecv clsend;\n  freeAvatar();\n  setMovie(uint8, uint32, int16) broadcast ram;\n  transferMoney(int32) airecv clsend;\n};\n\ndclass DistributedCloset : DistributedFurnitureItem {\n  setOwnerId(uint32) required broadcast ram;\n  enterAvatar() airecv clsend;\n  freeAvatar();\n  removeItem(blob, uint8) airecv clsend;\n  setDNA(blob, int8, uint8) airecv clsend;\n  setState(uint8, uint32, uint32, string, uint8 [], uint8 []) broadcast ram;\n  setMovie(uint8, uint32, int16) broadcast ram;\n  resetItemLists() broadcast ram;\n  setCustomerDNA(uint32, blob) broadcast ram;\n};\n\ndclass DistributedTrunk : DistributedCloset {\n  setState(uint8, uint32, uint32, string, uint8 [], uint8 [], uint8 [], uint8 []) broadcast ram;\n  removeItem(uint8, uint8, uint8, uint8) airecv clsend;\n  setDNA(uint8, uint8, uint8, uint8, uint8, uint8, uint8, uint8, uint8, uint8, uint8, uint8, int8, uint8) airecv clsend;\n  setCustomerDNA(uint32, uint8, uint8, uint8, uint8, uint8, uint8, uint8, uint8, uint8, uint8, uint8, uint8, uint8) broadcast ram;\n};\n\ndclass DistributedPhone : DistributedFurnitureItem {\n  setInitialScale(uint8/170, uint8/170, uint8/170) required broadcast ram;\n  setNewScale(uint8/170, uint8/170, uint8/170) airecv clsend;\n  avatarEnter() airecv clsend;\n  avatarExit() airecv clsend;\n  freeAvatar();\n  setLimits(uint16);\n  setMovie(uint8, uint32, int32) broadcast ram;\n  requestPurchaseMessage(uint16, blob, int32) airecv clsend;\n  requestPurchaseResponse(uint16, int8);\n  requestGiftPurchaseMessage(uint16, uint32, blob, int32) airecv clsend;\n  requestGiftPurchaseResponse(uint16, int8);\n};\n\ndclass DistributedFireworkShow : DistributedObject {\n  startShow(uint8, uint8, uint8, int16) broadcast ram;\n  requestFirework(int16/10, int16/10, int16/100, uint8, uint8, uint8) airecv clsend;\n  shootFirework(int16/10, int16/10, int16/100, uint8, uint8, uint8) broadcast;\n};\n\ndclass DistributedFireworksCannon : DistributedFireworkShow {\n  avatarEnter() airecv clsend;\n  avatarExit() airecv clsend;\n  freeAvatar();\n  setMovie(uint8, uint32, int16) broadcast ram;\n  setPosition(int16/10, int16/10, int16/10) required broadcast ram;\n};\n\ndclass LobbyManager : DistributedObject {\n};\n\ndclass DistributedFactory : DistributedLevel {\n  setFactoryId(uint16) required broadcast ram;\n  setSuits(uint32 [], uint32 []) broadcast ram;\n  setForemanConfronted(uint32) broadcast ram;\n  setDefeated() broadcast ram;\n};\n\ndclass DistributedLawOffice : DistributedObject {\n  setLawOfficeId(uint16) required broadcast ram;\n  startSignal() broadcast ram;\n  readyForNextFloor() airecv clsend;\n};\n\ndclass DistributedLawOfficeFloor : DistributedLevel {\n  setLawOfficeId(uint16) required broadcast ram;\n  setSuits(uint32 [], uint32 []) broadcast ram;\n  readyForNextFloor() airecv clsend;\n  setForemanConfronted(uint32) broadcast ram;\n  setDefeated() broadcast ram;\n};\n\ndclass DistributedMint : DistributedObject {\n  setZoneId(uint32) required broadcast ram;\n  setMintId(uint16) required broadcast ram;\n  setFloorNum(uint8) required broadcast ram;\n  setRoomDoIds(uint32 []) broadcast ram;\n};\n\ndclass DistributedMintRoom : DistributedLevel {\n  setMintId(uint16) required broadcast ram;\n  setRoomId(uint16) required broadcast ram;\n  setRoomNum(uint8) required broadcast ram;\n  setSuits(uint32 [], uint32 []) broadcast ram;\n  setBossConfronted(uint32) broadcast ram;\n  setDefeated() broadcast ram;\n};\n\ndclass DistributedStage : DistributedObject {\n  setZoneId(uint32) required broadcast ram;\n  setStageId(uint16) required broadcast ram;\n  setLayoutIndex(uint16) required broadcast ram;\n  setFloorNum(uint8) required broadcast ram;\n  setRoomDoIds(uint32 []) broadcast ram;\n  setStageZone(uint32) broadcast ram;\n  elevatorAlert(uint32) broadcast ram;\n};\n\ndclass DistributedStageRoom : DistributedLevel {\n  setStageId(uint16) required broadcast ram;\n  setRoomId(uint16) required broadcast ram;\n  setRoomNum(uint8) required broadcast ram;\n  setSuits(uint32 [], uint32 []) broadcast ram;\n  setBossConfronted(uint32) broadcast ram;\n  setDefeated() broadcast ram;\n};\n\ndclass DistributedInGameEditor : DistributedObject {\n  setEditorAvId(uint32) required broadcast ram;\n  setEditUsername(blob) required broadcast ram;\n  setLevelDoId(uint32) required broadcast ram;\n  requestCurrentLevelSpec() airecv clsend;\n  setSpecSenderDoId(uint32);\n  setEdit(uint32, blob, blob, blob) airecv clsend;\n  setAttribChange(uint32, blob, blob, blob);\n  setFinished() airecv clsend;\n};\n\ndclass DistributedLift : DistributedEntity {\n  setStateTransition(uint8, uint8, uint32) required broadcast ram;\n  setAvatarEnter() airecv clsend;\n  setAvatarLeave() airecv clsend;\n};\n\ndclass DistributedDoorEntity : DistributedEntity {\n  setLocksState(uint16) required broadcast ram;\n  setDoorState(uint8, int32) required broadcast ram;\n  requestOpen() airecv clsend;\n};\n\ndclass DistributedSwitch : DistributedInteractiveEntity {\n};\n\ndclass DistributedButton : DistributedSwitch {\n};\n\ndclass DistributedTrigger : DistributedSwitch {\n};\n\ndclass DistributedCrushableEntity : DistributedEntity {\n  setPosition(int16/10, int16/10, int16/10) broadcast ram;\n  setCrushed(uint32, uint8) broadcast ram;\n};\n\ndclass DistributedCrusherEntity : DistributedEntity {\n};\n\ndclass DistributedElevatorMarker : DistributedEntity {\n};\n\ndclass DistributedStomper : DistributedCrusherEntity {\n  setMovie(uint8, int16, uint32 []) broadcast ram;\n};\n\ndclass DistributedStomperPair : DistributedEntity {\n  setChildren(uint32 []) broadcast ram;\n  setSquash() airecv clsend;\n};\n\ndclass DistributedBarrelBase : DistributedEntity {\n  requestGrab() airecv clsend;\n  setGrab(uint32) broadcast ram;\n  setReject() broadcast;\n};\n\ndclass DistributedGagBarrel : DistributedBarrelBase {\n};\n\ndclass DistributedBeanBarrel : DistributedBarrelBase {\n};\n\ndclass DistributedHealBarrel : DistributedBarrelBase {\n};\n\ndclass DistributedGrid : DistributedEntity {\n};\n\ndclass ActiveCell : DistributedEntity {\n  setState(uint8, uint32) broadcast ram;\n};\n\ndclass DirectionalCell : ActiveCell {\n};\n\ndclass CrusherCell : ActiveCell {\n};\n\ndclass DistributedCrate : DistributedCrushableEntity {\n  requestPush(uint8) airecv clsend;\n  setReject();\n  setAccept() broadcast;\n  setMoveTo(uint32, int16/10, int16/10, int16/10, int16/10, int16/10, int16/10) broadcast ram;\n  setDone() airecv clsend;\n};\n\ndclass DistributedSinkingPlatform : DistributedEntity {\n  setOnOff(uint8, uint32) airecv clsend;\n  setSinkMode(uint32, uint8, uint32) broadcast ram;\n};\n\ndclass DistributedGoon : DistributedCrushableEntity {\n  requestBattle(int16/10) airecv clsend;\n  requestStunned(int16/10) airecv clsend;\n  requestResync() airecv clsend;\n  setParameterize(int16/10, int16/10, int16/10, uint32) airecv clsend;\n  setMovie(uint8, uint32, int32/10, int16) broadcast ram;\n};\n\ndclass DistributedGridGoon : DistributedGoon {\n  setPathPts(int16/10, int16/10, int16/10, int16/10, int16/10, int16/10) broadcast ram;\n};\n\ndclass BattleBlocker : DistributedEntity {\n  setActive(uint8) required broadcast ram;\n  setSuits(uint32 []) broadcast ram;\n  setBattle(uint32) broadcast ram;\n  setBattleFinished() broadcast ram;\n};\n\ndclass DistributedLaserField : BattleBlocker {\n  setGrid(uint8, uint8) required broadcast ram;\n  setField(uint8 []) required broadcast ram;\n  setSuccess(uint8) broadcast ram;\n  hit(int8, int8, int8, int8) airecv clsend;\n  trapFire() airecv clsend;\n  setActiveLF(uint8) broadcast ram;\n  hideSuit(uint32 []) broadcast ram;\n  showSuit(uint32 []) broadcast ram;\n  setGridGame(string) broadcast ram;\n};\n\nstruct golfGreenGameBoardData {\n  uint8 posX;\n  uint8 posZ;\n  uint8 typeIndex;\n};\n\nstruct golfGreenGameScoreData {\n  uint32 avId;\n  uint8 score;\n};\n\ndclass DistributedGolfGreenGame : BattleBlocker {\n  requestJoin() airecv clsend;\n  leaveGame() airecv clsend;\n  acceptJoin(uint16, int32, uint32 []) broadcast ram;\n  requestBoard(uint8) airecv clsend;\n  startBoard(golfGreenGameBoardData [], uint8 []);\n  signalDone(uint8) broadcast ram;\n  boardCleared(uint32);\n  scoreData(uint8, uint8, golfGreenGameScoreData []) broadcast ram;\n  informGag(uint8, uint8);\n  helpOthers(uint32) broadcast;\n  setTimerStart(uint16, int32) broadcast ram;\n};\n\ndclass DistributedSecurityCamera : DistributedEntity {\n  trapFire() airecv clsend;\n  setTarget(uint8) broadcast ram;\n};\n\ndclass DistributedMover : DistributedEntity {\n  startMove(int16) broadcast ram;\n};\n\ntypedef uint16/10000 PetTrait;\n\ndclass DistributedPet : DistributedSmoothNode {\n  setOwnerId(uint32) required broadcast db;\n  setPetName(string) required broadcast db;\n  setTraitSeed(uint32) required broadcast db;\n  setSafeZone(uint32) required broadcast db;\n  setForgetfulness(PetTrait) required broadcast db;\n  setBoredomThreshold(PetTrait) required broadcast db;\n  setRestlessnessThreshold(PetTrait) required broadcast db;\n  setPlayfulnessThreshold(PetTrait) required broadcast db;\n  setLonelinessThreshold(PetTrait) required broadcast db;\n  setSadnessThreshold(PetTrait) required broadcast db;\n  setFatigueThreshold(PetTrait) required broadcast db;\n  setHungerThreshold(PetTrait) required broadcast db;\n  setConfusionThreshold(PetTrait) required broadcast db;\n  setExcitementThreshold(PetTrait) required broadcast db;\n  setAngerThreshold(PetTrait) required broadcast db;\n  setSurpriseThreshold(PetTrait) required broadcast db;\n  setAffectionThreshold(PetTrait) required broadcast db;\n  setHead(int8(-1-1)) required broadcast db;\n  setEars(int8(-1-4)) required broadcast db;\n  setNose(int8(-1-3)) required broadcast db;\n  setTail(int8(-1-6)) required broadcast db;\n  setBodyTexture(int8(0-6)) required broadcast db;\n  setColor(int8(0-25)) required broadcast db;\n  setColorScale(int8(0-8)) required broadcast db;\n  setEyeColor(int8(0-5)) required broadcast db;\n  setGender(int8(0-1)) required broadcast db;\n  setLastSeenTimestamp(uint32) required broadcast db;\n  setBoredom(uint16/1000(0-1)) required broadcast db;\n  setRestlessness(uint16/1000(0-1)) required broadcast db;\n  setPlayfulness(uint16/1000(0-1)) required broadcast db;\n  setLoneliness(uint16/1000(0-1)) required broadcast db;\n  setSadness(uint16/1000(0-1)) required broadcast db;\n  setAffection(uint16/1000(0-1)) required broadcast db;\n  setHunger(uint16/1000(0-1)) required broadcast db;\n  setConfusion(uint16/1000(0-1)) required broadcast db;\n  setExcitement(uint16/1000(0-1)) required broadcast db;\n  setFatigue(uint16/1000(0-1)) required broadcast db;\n  setAnger(uint16/1000(0-1)) required broadcast db;\n  setSurprise(uint16/1000(0-1)) required broadcast db;\n  setMood : setBoredom, setRestlessness, setPlayfulness, setLoneliness, setSadness, setAffection, setHunger, setConfusion, setExcitement, setFatigue, setAnger, setSurprise;\n  teleportIn(int16) broadcast ownsend;\n  teleportOut(int16) broadcast ownsend;\n  setTrickAptitudes(uint16/10000(0-1) []) required broadcast db;\n  doTrick(uint8, int16) broadcast ram;\n  avatarInteract(uint32);\n  setMovie(uint8, uint32, int16) broadcast ram;\n  freeAvatar();\n};\n\ndclass DistributedPetProxy : DistributedPet {\n  setDominantMood(string) broadcast ram;\n};\n\ndclass DistributedBlackCatMgr : DistributedObject {\n  doBlackCatTransformation(uint32) broadcast;\n  requestBlackCatTransformation() airecv clsend;\n};\n\ndclass DistributedPolarBearMgr : DistributedObject {\n  doPolarBearTransformation(uint32) broadcast;\n  requestPolarBearTransformation() airecv clsend;\n};\n\ndclass DistributedPolarPlaceEffectMgr : DistributedObject {\n  addPolarPlaceEffect() airecv clsend;\n};\n\ndclass DistributedGreenToonEffectMgr : DistributedObject {\n  addGreenToonEffect() airecv clsend;\n};\n\ndclass DistributedResistanceEmoteMgr : DistributedObject {\n  addResistanceEmote() airecv clsend;\n};\n\ndclass DistributedScavengerHuntTarget : DistributedObject {\n  attemptScavengerHunt() airecv clsend;\n};\n\ndclass DistributedTrickOrTreatTarget : DistributedScavengerHuntTarget {\n};\n\ndclass DistributedWinterCarolingTarget : DistributedScavengerHuntTarget {\n};\n\ndclass DistributedDataStoreManager : DistributedObject {\n  startStore(uint8);\n  stopStore(uint8);\n  queryStore(uint8, string);\n  receiveResults(uint8, string);\n  deleteBackupStores();\n};\n\ndclass DistributedVehicle : DistributedSmoothNode {\n  setOwner(uint32) required broadcast ram;\n  setState(char, uint32) broadcast ram;\n  setBodyType(int8) required broadcast ram;\n  setBodyColor(int8) required broadcast ram;\n  setAccessoryColor(int8) required broadcast ram;\n  setEngineBlockType(int8) required broadcast ram;\n  setSpoilerType(int8) required broadcast ram;\n  setFrontWheelWellType(int8) required broadcast ram;\n  setBackWheelWellType(int8) required broadcast ram;\n  setRimType(int8) required broadcast ram;\n  setDecalType(int8) required broadcast ram;\n  requestControl() airecv clsend;\n  requestParked() airecv clsend;\n  setInput(int8) broadcast ram;\n};\n\nstruct avatarAndKart {\n  uint32 avId;\n  uint32 kartId;\n};\n\ndclass DistributedRace : DistributedObject {\n  setZoneId(uint32) required broadcast ram;\n  setTrackId(uint16) required broadcast ram;\n  setRaceType(uint16) required broadcast ram;\n  setCircuitLoop(uint16 []) required broadcast ram;\n  setAvatars(uint32 []) required broadcast ram;\n  setStartingPlaces(uint8 []) required broadcast ram;\n  setLapCount(uint8) broadcast required ram;\n  waitingForJoin() broadcast ram;\n  setEnteredRacers(avatarAndKart []) broadcast ram;\n  prepForRace() broadcast ram;\n  startTutorial() broadcast ram;\n  startRace(int16) broadcast ram;\n  goToSpeedway(uint32 [], uint8) broadcast ram;\n  genGag(uint8, uint16, uint8) broadcast ram;\n  dropAnvilOn(uint32, uint32, int16) broadcast ram;\n  shootPiejectile(uint32, uint32, uint8) broadcast ram;\n  racerDisconnected(uint32) broadcast ram;\n  setPlace(uint32, uint32/1000, uint8, uint32, uint8, uint32, uint32, uint32 [], uint16 [], uint32/1000) broadcast ram;\n  setCircuitPlace(uint32, uint8, uint32, uint32, uint32, uint32 []) broadcast ram;\n  endCircuitRace() broadcast ram;\n  setRaceZone(uint32, uint32);\n  hasGag(uint8, uint8, uint8) broadcast airecv clsend;\n  racerLeft(uint32) clsend airecv broadcast ram;\n  heresMyT(uint32, int8, uint16/65535, int16) clsend airecv broadcast;\n  requestThrow(int32/1000, int32/1000, int32/1000) clsend airecv;\n  requestKart() clsend airecv;\n};\n\ndclass DistributedGag : DistributedObject {\n  setInitTime(int16) required broadcast ram;\n  setActivateTime(int16) required broadcast ram;\n  setPos(int32/1000, int32/1000, int32/1000) required broadcast ram;\n  setRace(uint32) required broadcast ram;\n  setOwnerId(uint32) required broadcast ram;\n  setType(uint8) required broadcast ram;\n  hitSomebody(uint32, int16) broadcast clsend airecv;\n};\n\ndclass DistributedProjectile : DistributedObject {\n  setInitTime(int16) required broadcast ram;\n  setPos(int32/1000, int32/1000, int32/1000) required broadcast ram;\n  setRace(uint32) required broadcast ram;\n  setOwnerId(uint32) required broadcast ram;\n  setType(uint8) required broadcast ram;\n  hitSomebody(uint32, int16) broadcast clsend airecv;\n};\n\ndclass DistributedKartPad : DistributedObject {\n  setArea(uint32) required broadcast ram;\n};\n\ndclass DistributedRacePad : DistributedKartPad {\n  setState(string, int16) required broadcast ram;\n  setRaceZone(uint32);\n  setTrackInfo(uint16 []) required broadcast ram;\n};\n\ndclass DistributedViewPad : DistributedKartPad {\n  setLastEntered(int16) required broadcast ram;\n};\n\ndclass DistributedStartingBlock : DistributedObject {\n  setPadDoId(uint32) required broadcast ram;\n  setPosHpr(int16/10, int16/10, int16/10, int16/10, int16/10, int16/10) required broadcast ram;\n  setPadLocationId(uint8) required broadcast ram;\n  requestEnter(uint8) airecv clsend;\n  rejectEnter(uint8);\n  requestExit() airecv clsend;\n  setOccupied(uint32) broadcast ram;\n  setMovie(uint8) broadcast ram;\n  movieFinished() airecv clsend;\n};\n\ndclass DistributedViewingBlock : DistributedStartingBlock {\n};\n\ndclass DistributedLeaderBoard : DistributedObject {\n  setPosHpr(int16/10, int16/10, int16/10, int16/10, int16/10, int16/10) required broadcast ram;\n  setDisplay(blob) broadcast ram;\n};\n\ndclass DistributedDeliveryManager : DistributedObject {\n  hello(string) clsend;\n  rejectHello(string);\n  helloResponse(string);\n  getName(uint32);\n  receiveRejectGetName(string);\n  receiveAcceptGetName(string);\n  addName(uint32, string);\n  receiveRejectAddName(uint32);\n  receiveAcceptAddName(uint32);\n  addGift(uint32, blob, uint32, uint32, uint32);\n  receiveRejectAddGift(uint32);\n  receiveAcceptAddGift(uint32, uint32, uint32, uint32);\n  deliverGifts(uint32, uint32);\n  receiveAcceptDeliverGifts(uint32, string);\n  receiveRejectDeliverGifts(uint32, string);\n  receiveRequestPayForGift(blob, uint32, uint32) airecv clsend;\n  receiveRequestPurchaseGift(blob, uint32, uint32, uint32) airecv;\n  receiveAcceptPurchaseGift(uint32, uint32, int16);\n  receiveRejectPurchaseGift(uint32, uint32, int16, uint16);\n  heartbeat() airecv;\n  giveBeanBonus(uint32, uint16);\n  requestAck() clsend;\n  returnAck();\n  givePartyRefund(uint32, uint32, uint64, int8, uint16);\n};\n\ndclass DistributedLawbotBoss : DistributedBossCog {\n  setState(string) broadcast ram;\n  setBossDamage(uint16, uint8, int16) broadcast ram;\n  touchWitnessStand() airecv clsend;\n  hitBoss(uint8) airecv clsend;\n  healBoss(uint8) airecv clsend;\n  hitToon(uint32) airecv clsend;\n  hitDefensePan() airecv clsend;\n  hitProsecutionPan() airecv clsend;\n  hitChair(uint8, uint8) airecv clsend;\n  setLawyerIds(uint32 []) broadcast ram;\n  setTaunt(int8, int8) broadcast;\n  toonGotHealed(uint32) broadcast;\n  enteredBonusState() broadcast;\n  setBattleDifficulty(uint8) broadcast ram;\n};\n\ndclass DistributedLawbotBossSuit : DistributedSuitBase {\n  setPosHpr(int16/10, int16/10, int16/10, int16/10, int16/10, int16/10) required broadcast ram;\n  doAttack(int16/10, int16/10, int16/10, int16/10, int16/10, int16/10) broadcast;\n  doProsecute() broadcast;\n  hitByToon() airecv clsend;\n  doStun() broadcast;\n};\n\ndclass DistributedLawbotBossGavel : DistributedObject {\n  setBossCogId(uint32) required broadcast ram;\n  setIndex(uint8) required broadcast ram;\n  setState(char) broadcast ram;\n};\n\ndclass DistributedLawbotCannon : DistributedObject {\n  setBossCogId(uint32) required broadcast ram;\n  setIndex(uint8) required broadcast ram;\n  setPosHpr(int16/10, int16/10, int16/10, int16/10, int16/10, int16/10) required broadcast ram;\n  requestEnter() airecv clsend;\n  setMovie(int8, uint32, uint8) broadcast;\n  setCannonPosition(int16/10, int16/10) airecv clsend;\n  updateCannonPosition(uint32, int16/10, int16/10) broadcast;\n  setCannonLit(int16/10, int16/10) airecv clsend;\n  setCannonWillFire(uint32, int16/10, int16/10, int16/10, int16) broadcast;\n  setLanded() airecv clsend;\n  requestLeave() airecv clsend;\n};\n\ndclass DistributedLawbotChair : DistributedObject {\n  setBossCogId(uint32) required broadcast ram;\n  setIndex(uint8) required broadcast ram;\n  setState(char) broadcast ram;\n  showCogJurorFlying() broadcast;\n  setToonJurorIndex(int8) broadcast ram;\n};\n\ndclass DistributedLawnDecor : DistributedNode {\n  setPlot(int8) required broadcast ram;\n  setHeading(int16/10) required broadcast ram;\n  setPosition(int16/10, int16/10, int16/10) required broadcast ram;\n  setOwnerIndex(int8) required broadcast ram;\n  plotEntered() airecv clsend;\n  removeItem() airecv clsend;\n  setMovie(uint8, uint32) broadcast ram;\n  movieDone() airecv clsend;\n  interactionDenied(uint32) broadcast ram;\n};\n\ndclass DistributedGardenPlot : DistributedLawnDecor {\n  plantFlower(uint8, uint8) airecv clsend;\n  plantGagTree(uint8, uint8) airecv clsend;\n  plantStatuary(uint8) airecv clsend;\n  plantToonStatuary(uint8, uint16) airecv clsend;\n  plantNothing(uint8) airecv clsend;\n};\n\ndclass DistributedGardenBox : DistributedLawnDecor {\n  setTypeIndex(uint8) required broadcast ram;\n};\n\ndclass DistributedStatuary : DistributedLawnDecor {\n  setTypeIndex(uint8) required broadcast ram;\n  setWaterLevel(int8) required broadcast ram;\n  setGrowthLevel(int8) required broadcast ram;\n};\n\ndclass DistributedToonStatuary : DistributedStatuary {\n  setOptional(uint16) required broadcast ram;\n};\n\ndclass DistributedAnimatedStatuary : DistributedStatuary {\n};\n\ndclass DistributedChangingStatuary : DistributedStatuary {\n  setGrowthLevel(int8) required broadcast ram;\n};\n\ndclass DistributedPlantBase : DistributedLawnDecor {\n  setTypeIndex(uint8) required broadcast ram;\n  setWaterLevel(int8) required broadcast ram;\n  setGrowthLevel(int8) required broadcast ram;\n  waterPlant() airecv clsend;\n  waterPlantDone() airecv clsend;\n};\n\ndclass DistributedFlower : DistributedPlantBase {\n  setTypeIndex(uint8) required broadcast ram;\n  setVariety(uint8) required broadcast ram;\n};\n\ndclass DistributedGagTree : DistributedPlantBase {\n  setWilted(int8) required broadcast ram;\n  requestHarvest() airecv clsend;\n};\n\ndclass DistributedTravelGame : DistributedMinigame {\n  setTimerStartTime(int16) broadcast;\n  setAvatarChoice(uint16, uint8) airecv clsend;\n  setAvatarVotes(uint32, uint16) broadcast;\n  setAvatarChose(uint32) broadcast;\n  setServerChoices(int16 [], uint8 [], uint8, uint8) broadcast;\n  setMinigames(uint8 [], uint8 []) broadcast;\n  setBonuses(uint8 [], uint8 []) broadcast;\n  setBoardIndex(uint8) required broadcast ram;\n};\n\ndclass DistributedPairingGame : DistributedMinigame {\n  setDeckSeed(uint32) required broadcast ram;\n  setMaxOpenCards(uint8) broadcast ram;\n  openCardRequest(int16, int16) airecv clsend;\n  openCardResult(int16, uint32, int16, int8, int16 []) broadcast;\n  reportDone() airecv clsend;\n  setEveryoneDone() broadcast;\n  setSignaling(uint32) clsend broadcast;\n};\n\nstruct golfData {\n  int16 frame;\n  int32/100000 x;\n  int32/100000 y;\n  int32/100000 z;\n};\n\nstruct Coord3 {\n  int32/100000 x;\n  int32/100000 y;\n  int32/100000 z;\n};\n\nstruct CommonObjectData {\n  uint8 id;\n  uint8 type;\n  int32/100000 x;\n  int32/100000 y;\n  int32/100000 z;\n  int32/100000 q1;\n  int32/100000 q2;\n  int32/100000 q3;\n  int32/100000 q4;\n  int32/100000 aVX;\n  int32/100000 aVY;\n  int32/100000 aVZ;\n  int32/100000 lVX;\n  int32/100000 lVY;\n  int32/100000 lVZ;\n};\n\ndclass DistributedPhysicsWorld : DistributedObject {\n  clientCommonObject(uint8, uint8, Coord3, Coord3, int32/100, int32/100, int32/1000) broadcast ram;\n  setCommonObjects(CommonObjectData []) broadcast;\n  upSetCommonObjects(CommonObjectData []) airecv clsend;\n};\n\ndclass DistributedGolfHole : DistributedPhysicsWorld {\n  setHoleId(int8) broadcast ram required;\n  setTimingCycleLength(uint32/1000) broadcast ram required;\n  setAvatarReadyHole() airecv clsend;\n  setGolfCourseDoId(uint32) broadcast ram required;\n  turnDone() airecv clsend;\n  ballInHole() airecv clsend;\n  setAvatarTempTee(uint32, uint8) clsend broadcast;\n  setTempAimHeading(uint32, int32/1000) clsend broadcast;\n  setAvatarFinalTee(uint32, uint8) broadcast;\n  setGolferIds(uint32 []) broadcast ram required;\n  golfersTurn(uint32) broadcast;\n  golferChooseTee(uint32) broadcast;\n  setAvatarTee(uint8) airecv clsend;\n  postSwing(uint32/1000, int32, int32/1000, int32/1000, int32/1000, int32/1000, int32/1000) airecv clsend;\n  postSwingState(uint32/1000, int32, int32/1000, int32/1000, int32/1000, int32/1000, int32/1000, uint16/100, CommonObjectData []) airecv clsend;\n  swing(uint32, int32, int32/1000, int32/1000, int32/1000, int32/1000, int32/1000) broadcast;\n  ballMovie2AI(uint32/1000, uint32, golfData [], golfData [], uint16, uint16, uint16, CommonObjectData []) airecv clsend;\n  ballMovie2Client(uint32/1000, uint32, golfData [], golfData [], uint16, uint16, uint16, CommonObjectData []) broadcast;\n  assignRecordSwing(uint32, uint32/1000, int32, int32/1000, int32/1000, int32/1000, int32/1000, int32/1000, CommonObjectData []);\n  setBox(int32/1000, int32/1000, int32/1000, int32/1000, int32/1000, int32/1000, int32/1000, int32/1000, int32/1000, int32/1000, int32/1000, int32/1000, int32/1000) airecv clsend;\n  sendBox(int32/1000, int32/1000, int32/1000, int32/1000, int32/1000, int32/1000, int32/1000, int32/1000, int32/1000, int32/1000, int32/1000, int32/1000, int32/1000) broadcast;\n};\n\ndclass DistributedGolfCourse : DistributedObject {\n  setGolferIds(uint32 []) broadcast ram required;\n  setCourseId(int8) broadcast ram required;\n  setAvatarJoined() airecv clsend;\n  setAvatarReadyCourse() airecv clsend;\n  setAvatarReadyHole() airecv clsend;\n  setAvatarExited() airecv clsend;\n  setCurHoleIndex(int8) broadcast ram required;\n  setCurHoleDoId(uint32) broadcast ram required;\n  setDoneReward() airecv clsend;\n  setReward(uint8 [][], int8 [], uint8 [][], uint8 [][], uint8 [][], uint32, uint32/100, uint32/100, uint32/100, uint32/100) broadcast;\n  setCourseReady(int8, int16 [], int8) broadcast;\n  setHoleStart(int16) broadcast;\n  setCourseExit() broadcast;\n  setCourseAbort(uint32) broadcast;\n  setPlayHole() broadcast;\n  avExited(uint32) broadcast;\n  setScores(int16 []) broadcast;\n  changeDrivePermission(uint32, int8) broadcast;\n};\n\ndclass DistributedVineGame : DistributedMinigame {\n  reachedEndVine(int8) clsend airecv;\n  setNewVine(uint32, int8, uint32/10000, int8) airecv clsend broadcast;\n  setNewVineT(uint32, uint32/10000, int8) clsend broadcast;\n  setJumpingFromVine(uint32, int8, int8, int32/100, int16/100, int16/100, int16) clsend broadcast;\n  claimTreasure(uint32) airecv clsend;\n  setTreasureGrabbed(uint32, uint32) broadcast;\n  setScore(uint32, uint32) broadcast;\n  allAtEndVine() broadcast;\n  setFallingFromVine(uint32, int8, int8, int32/100, int16/100, int16/100, int16, int8) clsend broadcast;\n  setFallingFromMidair(uint32, int8, int32/100, int16/100, int16/100, int16, int8) clsend broadcast;\n  setVineSections(uint8 []) required broadcast ram;\n};\n\ndclass TTAvatarFriendsManager : AvatarFriendsManager {\n};\n\ndclass TTPlayerFriendsManager : PlayerFriendsManager {\n};\n\ndclass TTSpeedchatRelay : SpeedchatRelay {\n};\n\ndclass DistributedGolfKart : DistributedObject {\n  setState(string, int16) broadcast ram;\n  fillSlot0(uint32) broadcast ram;\n  fillSlot1(uint32) broadcast ram;\n  fillSlot2(uint32) broadcast ram;\n  fillSlot3(uint32) broadcast ram;\n  emptySlot0(uint32, int16) broadcast ram;\n  emptySlot1(uint32, int16) broadcast ram;\n  emptySlot2(uint32, int16) broadcast ram;\n  emptySlot3(uint32, int16) broadcast ram;\n  requestBoard() airecv clsend;\n  rejectBoard(uint32);\n  requestExit() airecv clsend;\n  setMinigameZone(uint32, uint16);\n  setGolfZone(uint32, uint16);\n  setGolfCourse(int8) required broadcast ram;\n  setPosHpr(int16/10, int16/10, int16/10, int16/10, int16/10, int16/10) required broadcast ram;\n  setColor(int16, int16, int16) required broadcast ram;\n};\n\ndclass DistributedTimer : DistributedObject {\n  setStartTime(int32) broadcast ram required;\n};\n\ndclass DistributedPicnicBasket : DistributedObject {\n  setState(string, uint16, int16) broadcast ram;\n  fillSlot0(uint32) broadcast ram;\n  fillSlot1(uint32) broadcast ram;\n  fillSlot2(uint32) broadcast ram;\n  fillSlot3(uint32) broadcast ram;\n  emptySlot0(uint32, int16) broadcast ram;\n  emptySlot1(uint32, int16) broadcast ram;\n  emptySlot2(uint32, int16) broadcast ram;\n  emptySlot3(uint32, int16) broadcast ram;\n  requestBoard(int16) airecv clsend;\n  rejectBoard(uint32);\n  requestExit() airecv clsend;\n  doneExit() airecv clsend;\n  setMinigameZone(uint32, uint16);\n  setPicnicDone();\n  setPosHpr(int16/10, int16/10, int16/10, int16/10, int16/10, int16/10) required broadcast ram;\n  setTableNumber(int16) required broadcast ram;\n};\n\ndclass DistributedBossbotBoss : DistributedBossCog {\n  setState(string) broadcast ram;\n  setBattleDifficulty(uint8) broadcast ram;\n  requestGetFood(int8, int8, uint32) airecv clsend;\n  toonGotFood(uint32, int8, int8, uint32) broadcast;\n  requestServeFood(int8, int8) airecv clsend;\n  toonServeFood(uint32, int8, int8) broadcast;\n  hitBoss(uint8) airecv clsend;\n  hitToon(uint32) airecv clsend;\n  ballHitBoss(uint8) airecv clsend;\n  setBossDamage(uint16, uint8, int16) broadcast ram;\n  setSpeedDamage(uint16, uint8, int16) broadcast ram;\n  reachedTable(uint8) airecv clsend;\n  hitTable(uint8) airecv clsend;\n  awayFromTable(uint8) airecv clsend;\n  toonGotHealed(uint32) broadcast;\n  requestGetToonup(int8, int8, uint32) airecv clsend;\n  toonGotToonup(uint32, int8, int8, uint32) broadcast;\n};\n\ndclass DistributedCogKart : DistributedElevatorExt {\n  setCountryClubId(uint16) required broadcast ram;\n  setPosHpr(int16/10, int16/10, int16/10, int16/10, int16/10, int16/10) required broadcast ram;\n  setCountryClubInteriorZone(uint32);\n  setCountryClubInteriorZoneForce(uint32);\n};\n\ndclass DistributedCountryClub : DistributedObject {\n  setZoneId(uint32) required broadcast ram;\n  setBlockedRooms(uint8 []) required broadcast ram;\n  setCountryClubId(uint16) required broadcast ram;\n  setLayoutIndex(uint16) required broadcast ram;\n  setFloorNum(uint8) required broadcast ram;\n  setRoomDoIds(uint32 []) broadcast ram;\n  setCountryClubZone(uint32) broadcast ram;\n  elevatorAlert(uint32) broadcast ram;\n};\n\ndclass DistributedCountryClubRoom : DistributedLevel {\n  setCountryClubId(uint16) required broadcast ram;\n  setRoomId(uint16) required broadcast ram;\n  setRoomNum(uint8) required broadcast ram;\n  setSuits(uint32 [], uint32 []) broadcast ram;\n  setBossConfronted(uint32) broadcast ram;\n  setDefeated() broadcast ram;\n  forceOuch(uint8) broadcast;\n};\n\ndclass DistributedMoleField : DistributedEntity {\n  setGameStart(int16, uint8, uint16) broadcast;\n  setClientTriggered() airecv clsend;\n  whackedMole(int8, int16) airecv clsend;\n  whackedBomb(int8, int16, int32) airecv clsend;\n  updateMole(int8, int8) broadcast;\n  reportToonHitByBomb(uint32, int8, int32) broadcast;\n  setScore(int16) required broadcast ram;\n  damageMe() airecv clsend;\n  setPityWin() broadcast;\n};\n\ndclass DistributedCountryClubBattle : DistributedLevelBattle {\n};\n\ndclass DistributedClubElevator : DistributedElevatorFSM {\n  setFloor(int8) broadcast ram;\n  setLocked(uint16) required broadcast ram;\n  setEntering(uint16) required broadcast ram;\n  kickToonsOut() broadcast;\n  setLatch(uint32) required broadcast ram;\n};\n\ndclass DistributedMaze : DistributedEntity {\n  setRoomDoId(uint32) required broadcast ram;\n  setGameStart(int16) broadcast;\n  setClientTriggered() airecv clsend;\n  setFinishedMaze() airecv clsend;\n  setGameOver() broadcast;\n  toonFinished(uint32, uint8, uint8) broadcast;\n  damageMe() airecv clsend;\n};\n\ndclass DistributedBattleWaiters : DistributedBattleFinal {\n};\n\ndclass DistributedFoodBelt : DistributedObject {\n  setBossCogId(uint32) required broadcast ram;\n  setIndex(uint8) required broadcast ram;\n  setState(char) broadcast ram;\n};\n\ndclass DistributedBanquetTable : DistributedObject {\n  setIndex(uint8) required broadcast ram;\n  setNumDiners(uint8) required broadcast ram;\n  setBossCogId(uint32) required broadcast ram;\n  setDinerInfo(uint8 [], uint8 [], uint8 []) required broadcast ram;\n  setState(char, uint32, int8) broadcast ram;\n  setDinerStatus(uint8, uint8) broadcast;\n  requestControl() airecv clsend;\n  requestFree(int8) airecv clsend;\n  setPitcherPos(uint8, uint16%360/100, int16) broadcast clsend;\n  clearSmoothing(int8) broadcast clsend;\n  firingWater(int32/100, int32/100, int32/100, int32/100, int32/100, int32/100) broadcast clsend;\n  waterHitBoss(uint8) broadcast clsend;\n};\n\ndclass DistributedBattleDiners : DistributedBattleFinal {\n};\n\ndclass DistributedGolfSpot : DistributedObject {\n  setIndex(uint8) required broadcast ram;\n  setBossCogId(uint32) required broadcast ram;\n  setState(char, uint32, int8) broadcast ram;\n  setGoingToReward() broadcast ram;\n  requestControl() airecv clsend;\n  requestFree(int8) airecv clsend;\n  setGolfSpotPos(uint8, uint16%360/100, int16) broadcast clsend;\n  clearSmoothing(int8) broadcast clsend;\n  setSwingInfo(uint8, int16/10, uint8) broadcast clsend;\n};\n\nstruct TireInput {\n  int32/100 force;\n  int32/100 heading;\n};\n\ndclass DistributedIceGame : DistributedMinigame {\n  setForceArrowInfo(uint32, int32/100, int32/100) broadcast clsend;\n  setAvatarChoice(int32/100, int32/100) airecv clsend;\n  endingPositions(Coord3 []) airecv clsend;\n  reportScoringMovieDone() airecv clsend;\n  claimTreasure(uint8) airecv clsend;\n  claimPenalty(uint8) airecv clsend;\n  setTireInputs(TireInput []) broadcast;\n  setTimerStartTime(int16) broadcast;\n  setFinalPositions(Coord3 []) broadcast;\n  setMatchAndRound(int8, int8) broadcast;\n  setScores(int8, int8, int16 []) broadcast;\n  setNewState(string) broadcast;\n  setTreasureGrabbed(uint32, uint32) broadcast;\n  setPenaltyGrabbed(uint32, uint32) broadcast;\n};\n\ndclass DistributedCogThiefGame : DistributedMinigame {\n  throwingPie(uint32, int32, int32/100, int32/100, int32/100, int32/100) clsend broadcast;\n  hitBySuit(uint32, int32, int8, int32/100, int32/100, int32/100) clsend broadcast airecv;\n  pieHitSuit(uint32, int32, int8, int32/100, int32/100, int32/100) clsend broadcast airecv;\n  cogHitBarrel(int32, int8, int8, int32/100, int32/100, int32/100) clsend airecv;\n  cogAtReturnPos(int32, int8, int8) clsend airecv;\n  updateSuitGoal(int32, int32, int8, int8, int64, int32/100, int32/100, int32/100) broadcast;\n  makeCogCarryBarrel(int32, int32, int8, int8, int32/100, int32/100, int32/100) broadcast;\n  makeCogDropBarrel(int32, int32, int8, int8, int32/100, int32/100, int32/100) broadcast;\n  markBarrelStolen(int32, int32, int8) broadcast;\n};\n\nstruct twoDTreasureInfo {\n  uint8 treasureIndex;\n  uint8 treasureValue;\n};\n\nstruct twoDSectionInfo {\n  uint8 sectionIndex;\n  uint8 enemyIndicesSelected[];\n  twoDTreasureInfo treasureIndicesSelected[];\n  uint8 spawnPointIndicesSelected[];\n  uint8 stomperIndicesSelected[];\n};\n\ndclass DistributedTwoDGame : DistributedMinigame {\n  showShootGun(uint32, int16) clsend broadcast;\n  toonHitByEnemy(uint32, int16) clsend broadcast airecv;\n  toonFellDown(uint32, int16) clsend broadcast airecv;\n  toonSquished(uint32, int16) clsend broadcast airecv;\n  toonVictory(uint32, int16) clsend broadcast airecv;\n  claimTreasure(uint8, uint8) airecv clsend;\n  claimEnemyShot(uint8, uint8) airecv clsend;\n  reportDone() airecv clsend;\n  setSectionsSelected(twoDSectionInfo []) required broadcast ram;\n  setTreasureGrabbed(uint32, uint8, uint8) broadcast;\n  setEnemyShot(uint32, uint8, uint8, uint32) broadcast;\n  addVictoryScore(uint32, uint8) broadcast;\n  setEveryoneDone() broadcast;\n};\n\ndclass DistributedPicnicTable : DistributedNode {\n  fillSlot(uint32, uint8, int16/10, int16/10, int16/10, int16/10, int16/10, int16/10, int16, uint32) broadcast;\n  emptySlot(uint32, uint8, int16) broadcast;\n  requestTableState() airecv clsend;\n  setTableState(uint32 [], uint8) broadcast ram;\n  setGameZone(uint32, uint8) broadcast;\n  setIsPlaying(uint8) broadcast ram;\n  requestJoin(uint8, int16/10, int16/10, int16/10, int16/10, int16/10, int16/10) airecv clsend;\n  rejectJoin() broadcast;\n  requestObserve() airecv clsend;\n  leaveObserve() airecv clsend;\n  requestGameZone() airecv clsend;\n  requestPickedGame(uint8) clsend airecv;\n  requestExit() airecv clsend;\n  requestZone() clsend airecv;\n  announceWinner(string, uint32) broadcast;\n  allowObserve() broadcast;\n  allowPick() broadcast;\n  setZone(uint32) broadcast;\n};\n\ndclass DistributedChineseCheckers : DistributedNode {\n  requestExit() clsend airecv;\n  requestBegin() clsend airecv;\n  requestMove(uint8 []) clsend airecv;\n  requestTimer() clsend airecv;\n  requestSeatPositions() clsend airecv;\n  startBeginTimer(uint16, int16) broadcast ram;\n  gameStart(uint8) broadcast;\n  setTableDoId(uint32) required broadcast ram;\n  setGameState(uint8 [], uint8 []) required broadcast ram;\n  setTimer(int16) broadcast ram required;\n  setTurnTimer(int16) broadcast ram required;\n  sendTurn(uint8) broadcast ram;\n  requestWin() clsend airecv;\n  announceWin(uint32) broadcast;\n  announceSeatPositions(uint8 []) broadcast;\n};\n\ndclass DistributedCheckers : DistributedNode {\n  requestExit() clsend airecv;\n  requestBegin() clsend airecv;\n  requestTimer() clsend airecv;\n  requestMove(uint8 []) clsend airecv;\n  startBeginTimer(uint16, int16) broadcast ram;\n  gameStart(uint8) broadcast;\n  setTableDoId(uint32) required broadcast ram;\n  setGameState(uint8 [], uint8 []) required broadcast ram;\n  setTimer(int16) broadcast ram required;\n  setTurnTimer(int16) broadcast ram required;\n  sendTurn(uint8) broadcast ram;\n  requestWin() clsend airecv;\n  announceWin(uint32) broadcast;\n  illegalMove() broadcast;\n};\n\ndclass DistributedFindFour : DistributedNode {\n  requestExit() clsend airecv;\n  requestBegin() clsend airecv;\n  requestMove(uint8) clsend airecv;\n  requestTimer() clsend airecv;\n  requestWin(uint8 []) clsend airecv;\n  startBeginTimer(uint16, int16) broadcast ram;\n  setTableDoId(uint32) required broadcast ram;\n  setGameState(uint8 [][], uint8, uint8, uint8) required broadcast ram;\n  setTimer(int16) broadcast ram required;\n  setTurnTimer(int16) broadcast ram required;\n  gameStart(uint8) broadcast;\n  sendTurn(uint8) broadcast ram;\n  announceWin(uint32) broadcast;\n  announceWinLocation(uint8, uint8, uint8, uint8) broadcast;\n  announceWinnerPosition(uint8, uint8, uint8, uint8) broadcast;\n  illegalMove() broadcast;\n  tie() broadcast;\n};\n\ndclass DistributedMailManager : DistributedObject {\n  sendSimpleMail(uint32, uint32, string);\n  setNumMailItems(uint32, uint32) airecv;\n};\n\ndclass DistributedPartyManager : DistributedObject {\n  addParty(uint32, uint32, string, string, int8, int8, activity [], decoration [], uint32 [], uint16);\n  addPartyRequest(uint32, char [0-256], char [0-256], int8, int8, activity [], decoration [], uint32 []) airecv clsend;\n  addPartyResponse(uint32, int8);\n  addPartyResponseUdToAi(uint64, int8, party) airecv;\n  markInviteAsReadButNotReplied(uint32, uint64);\n  respondToInvite(uint32, uint32, uint16, uint64, uint8);\n  respondToInviteResponse(uint32, uint16, uint64, int8, uint8) airecv;\n  changePrivateRequest(uint64, int8) airecv clsend;\n  changePrivateRequestAiToUd(uint32, uint64, int8);\n  changePrivateResponseUdToAi(uint32, uint64, int8, int8) airecv;\n  changePrivateResponse(uint64, int8, int8);\n  changePartyStatusRequest(uint64, int8) airecv clsend;\n  changePartyStatusRequestAiToUd(uint32, uint64, int8);\n  changePartyStatusResponseUdToAi(uint32, uint64, int8, int8) airecv;\n  changePartyStatusResponse(uint64, int8, int8, uint16);\n  partyInfoOfHostRequestAiToUd(uint32, uint32);\n  partyInfoOfHostFailedResponseUdToAi(uint32) airecv;\n  partyInfoOfHostResponseUdToAi(party, uint32 []) airecv;\n  givePartyRefundResponse(uint32, uint64, int8, uint16, uint32);\n  getPartyZone(uint32, uint32, uint8) clsend airecv;\n  receivePartyZone(uint32, uint64, uint32);\n  freeZoneIdFromPlannedParty(uint32, uint32) clsend airecv;\n  sendAvToPlayground(uint32, uint8);\n  exitParty(uint32) clsend airecv;\n  removeGuest(uint32, uint32) airecv clsend;\n  partyManagerAIStartingUp(uint32, uint32);\n  partyManagerAIGoingDown(uint32, uint32);\n  partyHasStartedAiToUd(uint64, uint32, uint32, string);\n  toonHasEnteredPartyAiToUd(uint32);\n  toonHasExitedPartyAiToUd(uint32);\n  partyHasFinishedUdToAllAi(uint64) airecv;\n  updateToPublicPartyInfoUdToAllAi(uint32, uint32, uint64, uint32, uint8, uint8, string, uint8 [], uint8) airecv;\n  updateToPublicPartyCountUdToAllAi(uint32, uint64) airecv;\n  requestShardIdZoneIdForHostId(uint32) clsend airecv;\n  sendShardIdZoneIdToAvatar(uint32, uint32);\n  partyManagerUdStartingUp() airecv;\n  partyManagerUdLost() airecv;\n  updateAllPartyInfoToUd(uint32, uint64, uint32, uint32, uint8, uint8, string, uint8 [], uint64);\n  forceCheckStart();\n  requestMw(uint32, string, uint32, uint32);\n  mwResponseUdToAllAi(uint32, string, uint32, uint32) airecv;\n  receiveId(uint64 []) airecv;\n};\n\ndclass DistributedObjectGlobal : DistributedObject {\n};\n\ndclass GlobalPartyManager : DistributedObjectGlobal {\n  partyManagerAIHello(uint32);\n  queryParty(uint32);\n  addParty(DoId, uint64, string, string, int8, int8, activity [], decoration [], DoIdList);\n  partyHasStarted(uint64, uint32, uint32, string);\n  toonJoinedParty(uint64, uint32);\n  toonLeftParty(uint64, uint32);\n  requestPartySlot(uint64, uint32, uint32);\n  partyDone(uint64);\n  allocIds(uint16);\n  avatarJoined(uint32);\n};\n\nstruct PotentialToon {\n  uint32 avNum;\n  string avName;\n  string avDNA;\n  uint8 avPosition;\n  uint8 aname;\n};\n\ndclass ClientServicesManager : DistributedObjectGlobal {\n  login(string, blob) clsend;\n  acceptLogin();\n  requestAvatars() clsend;\n  setAvatars(PotentialToon []);\n  createAvatar(blob, uint8) clsend;\n  createAvatarResp(uint32);\n  setNameTyped(uint32, string) clsend;\n  setNameTypedResp(uint32, uint8);\n  setNamePattern(uint32, int16, uint8, int16, uint8, int16, uint8, int16, uint8) clsend;\n  setNamePatternResp(uint32, uint8);\n  acknowledgeAvatarName(uint32) clsend;\n  acknowledgeAvatarNameResp();\n  deleteAvatar(uint32) clsend;\n  chooseAvatar(uint32) clsend;\n  systemMessage(uint16, string []);\n  reportPlayer(uint32, uint8) clsend;\n};\n\ndclass RATManager : DistributedObjectGlobal {\n};\n\ndclass AwardManager : DistributedObjectGlobal {\n  giveAwardToToon(uint32, DoId, string, DoId, uint32, uint32);\n};\n\ndclass DistributedCpuInfoMgr : DistributedObjectGlobal {\n  setCpuInfoToUd(uint32, uint32, string, string);\n};\n\ndclass DistributedSecurityMgr : DistributedObjectGlobal {\n  requestAccountId(uint32, uint32, uint32);\n  requestAccountIdResponse(uint32, uint32) airecv;\n};\n\ndclass NonRepeatableRandomSourceClient {\n  getRandomSamplesReply(uint32, uint32 []) airecv;\n};\n\ndclass TTCodeRedemptionMgr : DistributedObject, NonRepeatableRandomSourceClient {\n  giveAwardToToonResult(uint32, uint32);\n  redeemCode(uint32, char [0-256]) airecv clsend;\n  redeemCodeAiToUd(uint32, DoId, uint32, string, uint32);\n  redeemCodeResultUdToAi(uint32, uint32, uint32, uint32, uint32) airecv;\n  redeemCodeResult(uint32, uint32, uint32);\n};\n\ndclass NonRepeatableRandomSource : DistributedObject, NonRepeatableRandomSourceClient {\n  getRandomSamples(DoId, string, uint32, uint32);\n  randomSample(DoId, uint32);\n  randomSampleAck() airecv;\n};\n\ndclass DistributedInGameNewsMgr : DistributedObjectGlobal {\n  setLatestIssueStr(string) required broadcast ram;\n  inGameNewsMgrAIStartingUp(uint32, uint32);\n  newIssueUDtoAI(string) airecv;\n};\n\ndclass DistributedWhitelistMgr : DistributedObjectGlobal {\n  updateWhitelist() broadcast;\n  whitelistMgrAIStartingUp(uint32, uint32);\n  newListUDtoAI() airecv;\n};\n\nstruct Friend {\n  uint32 doId;\n  string name;\n  blob dna;\n  uint32 petId;\n};\n\ndclass TTRFriendsManager : DistributedObjectGlobal {\n  removeFriend(uint32) clsend;\n  requestAvatarInfo(uint32 []) clsend;\n  requestFriendsList() clsend;\n  friendInfo(Friend);\n  friendList(Friend []);\n  friendOnline(uint32, uint8, uint8);\n  friendOffline(uint32);\n  goingOffline(uint32);\n  getAvatarDetails(uint32) clsend;\n  friendDetails(uint32, blob, uint16 [], int8 [], blob, int16, int16, uint32, uint32, blob, int32);\n  routeTeleportQuery(uint32) clsend;\n  teleportQuery(uint32);\n  teleportResponse(uint32, uint8, uint32, uint32, uint32) clsend;\n  setTeleportResponse(uint32, uint8, uint32, uint32, uint32);\n  whisperSCTo(uint32, uint16) clsend;\n  setWhisperSCFrom(uint32, uint16);\n  whisperSCCustomTo(uint32, uint16) clsend;\n  setWhisperSCCustomFrom(uint32, uint16);\n  whisperSCEmoteTo(uint32, uint16) clsend;\n  setWhisperSCEmoteFrom(uint32, uint16);\n  requestSecret() clsend;\n  requestSecretResponse(int8, string);\n  submitSecret(string(0-256)) clsend;\n  submitSecretResponse(int8, int32);\n  sendTalkWhisper(uint32, string) clsend;\n  receiveTalkWhisper(uint32, string);\n  battleSOS(uint32) clsend;\n  setBattleSOS(uint32);\n  teleportGiveup(uint32) clsend;\n  setTeleportGiveup(uint32);\n  whisperSCToontaskTo(uint32, uint32, uint32, uint32, uint8) clsend;\n  setWhisperSCToontaskFrom(uint32, uint32, uint32, uint32, uint8);\n  sleepAutoReply(uint32) clsend;\n  setSleepAutoReply(uint32);\n};\n\ndclass DistributedPhaseEventMgr : DistributedObject {\n  setNumPhases(uint8) required broadcast ram;\n  setDates(datetime []) broadcast required;\n  setCurPhase(int8) required broadcast ram;\n  setIsRunning(bool) required broadcast ram;\n};\n\ndclass DistributedHydrantZeroMgr : DistributedPhaseEventMgr {\n};\n\ndclass DistributedMailboxZeroMgr : DistributedPhaseEventMgr {\n};\n\ndclass DistributedTrashcanZeroMgr : DistributedPhaseEventMgr {\n};\n\ndclass DistributedSillyMeterMgr : DistributedPhaseEventMgr {\n};\n\n'
