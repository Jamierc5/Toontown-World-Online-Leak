CONFIG = ["# This is the PRC configuration file for a published TTR client. Note that only\r\n# this file and Panda3D's Confauto.prc are included. Any relevant directives in\r\n# Config.prc should be reproduced here.\r\n\r\n# Client settings\r\nwindow-title Toontown World[Pre-Alpha]\r\nserver-version ttw-alpha-2.0.0\r\naudio-library-name p3openal_audio\r\nsync-video #f\r\nwant-dev #f\r\npreload-avatars #t\r\nwant-keep-alive #f\r\ntexture-anisotropic-degree 16\r\nlanguage LANGUAGE_HERE\r\n\r\n\r\n# Resources settings\r\nmodel-path /\r\nmodel-cache-models #f\r\nmodel-cache-textures #f\r\nvfs-mount phase_3.mf /\r\nvfs-mount phase_3.5.mf /\r\nvfs-mount phase_4.mf /\r\nvfs-mount phase_5.mf /\r\nvfs-mount phase_5.5.mf /\r\nvfs-mount phase_6.mf /\r\nvfs-mount phase_7.mf /\r\nvfs-mount phase_8.mf /\r\nvfs-mount phase_9.mf /\r\nvfs-mount phase_10.mf /\r\nvfs-mount phase_11.mf /\r\nvfs-mount phase_12.mf /\r\nvfs-mount phase_13.mf /\r\ndefault-model-extension .bam\r\n\r\n\r\n# Now that we've loaded the phase files, tell panda to trust the TTRCA\r\nssl-certificates /phase_3/etc/TTRCA.crt\r\n#<dev>\r\nssl-certificates /phase_3/etc/TTRDev.crt\r\nwant-dev-certificate-trust #t\r\n#</dev>\r\nserver-force-ssl #t\r\n\r\n\r\n\r\n# This is the shared secret for CSMUD login\r\n# ##### NB! Update deployment/server.prc too! #####\r\ncsmud-secret Yv1JrpTUdkX6M86h44Z9q4AUaQYdFnectDgl2I5HOQf8CBh7LUZWpzKB9FBD\r\n\r\n\r\n# DC files are NOT configured.\r\n# They're wrapped up into the code automatically.\r\n\r\n\r\n# Beta Modifications\r\n# Temporary modifications for unimplemented features go here.\r\nwant-pets #f\r\nwant-news-tab #f\r\nwant-news-page #f\r\nwant-gardening #f\r\nwant-gifting #f\r\n# This is a temporary 'fix' for DistributedSmoothNodes... probably not the permanent solution to our problem, but it works for now.\r\nsmooth-lag 0.4\r\n\r\n\r\n# Chat Settings\r\nforce-avatar-understandable #t\r\nforce-player-understandable #t\r\n\r\n\r\n# Holidays and Events\r\nforce-holiday-decorations 6\r\nwant-arg-manager #f\r\nshow-total-population #t\n\r\n# Server:\nserver-timezone BST/EDT/-5\nserver-port 7199\naccount-server-endpoint https://toontownworldonline.com/api/\naccount-bridge-filename astron/databases/account-bridge.db\n\n# Cog battles:\nbase-xp-multiplier 1.0", '# Distribution:\n\ndistribution en\n\n\n# Virtual file system...\nmodel-path /\n\nvfs-mount phase_3 /\n']
DC = 'typedef uint8 bool;\r\n\r\ntypedef uint32 DoId;\r\n\r\ntypedef DoId DoIdList[];\r\n\r\nstruct AvatarPendingDel {\r\n  uint32 Avatar;\r\n  uint32 date;\r\n};\r\n\r\ndclass Account {\r\n  uint32 ACCOUNT_AV_SET[6] required db;\r\n  uint32 ESTATE_ID db;\r\n  AvatarPendingDel ACCOUNT_AV_SET_DEL[] db;\r\n  string CREATED db;\r\n  string LAST_LOGIN db;\r\n  string ACCOUNT_ID db;\r\n  uint16 ADMIN_ACCESS db;\r\n  uint8 BETA_KEY_QUEST db;\r\n};\r\n\r\nstruct BarrierData {\r\n  uint16 context;\r\n  string name;\r\n  DoIdList avIds;\r\n};\r\n\r\ndclass DistributedObject {\r\n  setBarrierData(BarrierData data[]) broadcast ram;\r\n  setBarrierReady(uint16 barrierContext) airecv clsend;\r\n  execCommand(string command, DoId magicWordMgr,\r\n              DoId avatar, uint32 zoneId);\r\n  broadcastMessage() broadcast;\r\n};\r\n\r\ndclass DistributedTestObject : DistributedObject {\r\n  uint32 AutoInterest[];\r\n  setParentingRules(string todo0, string todo1) broadcast ram;\r\n  setRequiredField(uint32 r) required broadcast ram;\r\n  setB(uint32 B) broadcast;\r\n  setBA(uint32 BA) broadcast airecv;\r\n  setBO(uint32 BO) broadcast ownsend;\r\n  setBR(uint32 BR) broadcast ram;\r\n  setBRA(uint32 BRA) broadcast ram airecv;\r\n  setBRO(uint32 BRO) broadcast ram ownsend;\r\n  setBROA(uint32 BROA) broadcast ram ownsend airecv;\r\n};\r\n\r\nstruct OSInfo {\r\n  string name;\r\n  int16 platform;\r\n  int16 major;\r\n  int16 minor;\r\n};\r\n\r\nstruct CPUSpeed {\r\n  int32/1000 maxSpeed;\r\n  int32/1000 currentSpeed;\r\n};\r\n\r\ndclass TimeManager : DistributedObject {\r\n  requestServerTime(uint8 context) airecv clsend;\r\n  serverTime(uint8 context, int32 timestap, uint32 timeOfDay);\r\n  setDisconnectReason(uint8 disconnectCode) airecv clsend;\r\n  setExceptionInfo(string(0-1024) info) airecv clsend;\r\n  setSignature(string(0-1024) signature, char prcHash[16],\r\n               char pycHash[16]) airecv clsend;\r\n  setFrameRate(uint16/10 fps, uint16/1000 deviation, uint16 numAvatars,\r\n               string(0-256) locationCode, uint32/10 timeInLocation,\r\n               uint32/10 timeInGame, string(0-256) gameOptionsCode,\r\n               uint16 vendorId, uint16 deviceId, uint32/10 processMemory,\r\n               uint32/10 pageFileUsage, uint32/10 physicalMemory,\r\n               uint32 pageFaultCount, OSInfo osInfo, CPUSpeed cpuSpeed, uint16 cpuCores,\r\n               uint16 logicalCPUs, string(0-256) apiName) airecv clsend;\r\n  setCpuInfo(string(0-1024) infoStr, string cacheStatus) airecv clsend;\r\n  checkForGarbageLeaks(bool wantReply) airecv clsend;\r\n  setNumAIGarbageLeaks(uint32 numLeaks);\r\n  setClientGarbageLeak(uint32 num, string(0-1024) description) airecv clsend;\r\n  checkAvOnDistrict(uint32 context, DoId avatar) clsend airecv;\r\n  checkAvOnDistrictResult(uint32 context, DoId av, bool isOnDistrict);\r\n};\r\n\r\ndclass ObjectServer {\r\n  setName(string name) airecv ram required;\r\n  setDcHash(uint32 hash) ram required;\r\n  setDateCreated(uint32 date) airecv;\r\n};\r\n\r\ndclass DistributedDirectory : DistributedObject {\r\n  setParentingRules(string todo0, string todo1) broadcast ram;\r\n};\r\n\r\ndclass DistributedDistrict : DistributedObject {\r\n  setName(string name) required broadcast ram;\r\n  setAvailable(uint8 available) required broadcast ram;\r\n};\r\n\r\ndclass DistributedNode : DistributedObject {\r\n  setParentStr(blob parentTokenStr) broadcast ram ownsend airecv;\r\n  setParent(uint32 parentToken) broadcast ram ownsend airecv;\r\n  setX(int16/10 x) broadcast ram ownsend airecv;\r\n  setY(int16/10 y) broadcast ram ownsend airecv;\r\n  setZ(int16/10 z) broadcast ram ownsend airecv;\r\n  setH(int16%360/10 h) broadcast ram ownsend airecv;\r\n  setP(int16%360/10 p) broadcast ram ownsend airecv;\r\n  setR(int16%360/10 r) broadcast ram ownsend airecv;\r\n  setPos : setX, setY, setZ;\r\n  setHpr : setH, setP, setR;\r\n  setPosHpr : setX, setY, setZ, setH, setP, setR;\r\n  setXY : setX, setY;\r\n  setXZ : setX, setZ;\r\n  setXYH : setX, setY, setH;\r\n  setXYZH : setX, setY, setZ, setH;\r\n};\r\n\r\ndclass DistributedSmoothNode : DistributedNode {\r\n  setComponentL(uint64 l) broadcast ram ownsend airecv;\r\n  setComponentX(int16/10 x) broadcast ram ownsend airecv;\r\n  setComponentY(int16/10 y) broadcast ram ownsend airecv;\r\n  setComponentZ(int16/10 z) broadcast ram ownsend airecv;\r\n  setComponentH(int16%360/10 h) broadcast ram ownsend airecv;\r\n  setComponentP(int16%360/10 p) broadcast ram ownsend airecv;\r\n  setComponentR(int16%360/10 r) broadcast ram ownsend airecv;\r\n  setComponentT(int16 timestamp) broadcast ram ownsend airecv;\r\n  setSmStop : setComponentT;\r\n  setSmH : setComponentH, setComponentT;\r\n  setSmZ : setComponentZ, setComponentT;\r\n  setSmXY : setComponentX, setComponentY, setComponentT;\r\n  setSmXZ : setComponentX, setComponentZ, setComponentT;\r\n  setSmPos : setComponentX, setComponentY, setComponentZ, setComponentT;\r\n  setSmHpr : setComponentH, setComponentP, setComponentR, setComponentT;\r\n  setSmXYH : setComponentX, setComponentY, setComponentH, setComponentT;\r\n  setSmXYZH : setComponentX, setComponentY, setComponentZ, setComponentH, setComponentT;\r\n  setSmPosHpr : setComponentX, setComponentY, setComponentZ, setComponentH, setComponentP, setComponentR, setComponentT;\r\n  setSmPosHprL : setComponentL, setComponentX, setComponentY, setComponentZ, setComponentH, setComponentP, setComponentR, setComponentT;\r\n  clearSmoothing(int8 bogus) broadcast ownsend;\r\n  suggestResync(uint32 avId, int16 timestampA, int16 timestampB, int32 serverTimeSec, uint16 serverTimeUSec, uint16/100 uncertainty) ownrecv clsend;\r\n  returnResync(uint32 avId, int16 timestampB, int32 serverTimeSec, uint16 serverTimeUSec, uint16/100 uncertainty) ownrecv clsend;\r\n};\r\n\r\ndclass DistributedCartesianGrid : DistributedNode {\r\n  setCellWidth(uint32 width) required broadcast ram;\r\n  setParentingRules(string style, string rule) broadcast ram;\r\n};\r\n\r\nstruct Fixture {\r\n  int32/10 x;\r\n  int32/10 y;\r\n  int32/10 z;\r\n  int16/10 h;\r\n  int16/10 p;\r\n  int16/10 r;\r\n  string state;\r\n};\r\n\r\ndclass DistributedCamera : DistributedNode {\r\n  setCamParent(uint32 doId) required broadcast ram ownsend airecv;\r\n  setFixtures(Fixture fixtures[]) required broadcast ram ownsend airecv;\r\n};\r\n\r\nstruct TalkModification {\r\n  uint16 offset;\r\n  uint16 size;\r\n};\r\n\r\ndclass TalkPath_owner {\r\n  setTalk(DoId fromAv, DoId fromAcc, string(0-256) avName,\r\n          string(0-400) chat, TalkModification [], uint8 flags) broadcast ownsend;\r\n};\r\n\r\ndclass TalkPath_whisper {\r\n  setTalkWhisper(DoId fromAv, DoId fromAcc, string(0-256) avName,\r\n                 string(0-400) chat, TalkModification [], uint8 flags) ownrecv clsend;\r\n};\r\n\r\ndclass TalkPath_group {\r\n  setTalkGroup(DoId fromAv, DoId fromAcc, string(0-256) avName,\r\n               string(0-400) chat, TalkModification [], uint8 flags) clsend airecv;\r\n};\r\n\r\ndclass TalkPath_account {\r\n  setTalkAccount(DoId toAcc, DoId fromAcc, string(0-256) avName,\r\n                 string(0-400) msg, TalkModification [], uint8 flags) airecv clsend;\r\n};\r\n\r\ndclass AvatarHandle : TalkPath_whisper {\r\n};\r\n\r\ndclass DistributedAvatar : DistributedSmoothNode, TalkPath_whisper {\r\n  setName(string name = "[Name not set]") required broadcast db airecv;\r\n  friendsNotify(DoId avId, int8 status) ownrecv airecv;\r\n  checkAvOnShard(DoId avId) clsend airecv;\r\n  confirmAvOnShard(DoId avId, int8 isOnShard);\r\n  setTalk(DoId fromAv, DoId fromAcc, string(0-256) avName,\r\n          string(0-400) chat, TalkModification [], uint8 flags) broadcast;\r\n  setTalkWhisper(DoId fromAv, DoId fromAcc, string(0-256) avName,\r\n          string(0-400) chat, TalkModification [], uint8 flags) ownrecv;\r\n};\r\n\r\nstruct FriendEntry {\r\n  uint32 friendId;\r\n  uint8 friendType;\r\n}\r\n\r\ndclass DistributedPlayer : DistributedAvatar {\r\n  arrivedOnDistrict(DoId districtId) ownrecv ram;\r\n  setAccountName(string name = "") required ownrecv db;\r\n  setWhisperSCFrom(DoId fromAv, uint16 msgIndex) ownrecv clsend;\r\n  setWhisperSCCustomFrom(DoId fromAv, uint16 msgIndex) ownrecv clsend;\r\n  setWhisperSCEmoteFrom(DoId fromAv, uint16 emoteId) ownrecv clsend;\r\n  setSystemMessage(DoId aboutId, string(0-256) chatString) ownrecv;\r\n  setCommonChatFlags(uint8 commonChatFlags) broadcast ownrecv ram airecv;\r\n  setWhitelistChatFlags(uint8 whitelistChatFlags) broadcast ownrecv ram airecv;\r\n  setSC(uint16 msgIndex) broadcast ownsend airecv;\r\n  setSCCustom(uint16 msgIndex) broadcast ownsend airecv;\r\n  setFriendsList(FriendEntry friendsList[] = []) ownrecv required db airecv;\r\n  setDISLname(string name) broadcast ownrecv ram;\r\n  setDISLid(uint32 id = 0) broadcast ownrecv ram db airecv required;\r\n  OwningAccount(DoId);\r\n  string WishName = "" db ram;\r\n  uint8 WishNameState = 1 db ram; // 1 is the "open" state\r\n  uint32 WishNameTimestamp db ram;\r\n  setPreviousAccess(uint8 = 0) required db airecv;\r\n  setAccess(uint8 = 2) broadcast ownrecv required ram airecv;\r\n  setAdminAccess(uint16 access = 0) ownrecv required airecv;\r\n  setAsGM(bool state = 0) required ram broadcast ownrecv airecv;\r\n};\r\n\r\ndclass MagicWordManager : DistributedObject {\r\n  sendMagicWord(string word, uint32 targetId, bool execute) airecv clsend;\r\n  sendMagicWordResponse(string response);\r\n};\r\n\r\ndclass OtpAvatarManager : DistributedObject {\r\n  online();\r\n  requestAvatarList(uint32 todo0) airecv clsend;\r\n  rejectAvatarList(uint32 result);\r\n  avatarListResponse(blob pickleData);\r\n  requestAvatarSlot(uint32 todo0, uint32 todo1, uint8 todo2) clsend airecv;\r\n  rejectAvatarSlot(uint32 reasonId, uint32 subId, uint8 slot);\r\n  avatarSlotResponse(uint32 subId, uint8 slot);\r\n  requestPlayAvatar(uint32 todo0, uint32 todo1, uint32 todo2) clsend airecv;\r\n  rejectPlayAvatar(uint32 reasonId, uint32 avatarId);\r\n  playAvatarResponse(uint32 avatarId, uint32 subId, uint8 access, uint8 founder);\r\n  rejectCreateAvatar(uint32 result);\r\n  createAvatarResponse(uint32 avatarId, uint32 subId, uint8 access, uint8 founder);\r\n  requestRemoveAvatar(uint32 todo0, uint32 todo1, uint32 todo2, string(0-256) todo3) airecv clsend;\r\n  rejectRemoveAvatar(uint32 reasonId);\r\n  removeAvatarResponse(uint32 avatarId, uint32 subId);\r\n  requestShareAvatar(uint32 todo0, uint32 todo1, uint32 todo2, uint8 todo3) airecv clsend;\r\n  rejectShareAvatar(uint32 reasonId);\r\n  shareAvatarResponse(uint32 avatarId, uint32 subId, uint8 shared);\r\n};\r\n\r\ndclass ChatAgent : DistributedObject {\r\n  adminChat(uint32 aboutId, string message);\r\n  chatMessage(string(0-256) message, uint8 chatMode) clsend;\r\n  whisperMessage(uint32 receiverAvId, string(0-256) message) clsend;\r\n  sfWhisperMessage(uint32 receiverAvId, string(0-256) message) clsend;\r\n};\r\n\r\ndclass FriendManager : DistributedObject {\r\n  friendQuery(int32 requested) airecv clsend;\r\n  cancelFriendQuery(int32 context) airecv clsend;\r\n  inviteeFriendConsidering(int8 yesNo, int32 context) airecv clsend;\r\n  inviteeFriendResponse(int8 response, int32 context) airecv clsend;\r\n  inviteeAcknowledgeCancel(int32 context) airecv clsend;\r\n  friendConsidering(int8 yesNoAlready, int32 context);\r\n  friendResponse(int8 yesNoMaybe, int32 context);\r\n  inviteeFriendQuery(int32 inviterId, string inviterName, blob inviterDna, int32 context);\r\n  inviteeCancelFriendQuery(int32 context);\r\n  requestSecret() airecv clsend;\r\n  requestSecretResponse(int8 result, string secret);\r\n  submitSecret(string(0-256) secret) airecv clsend;\r\n  submitSecretResponse(int8 result, int32 avId);\r\n};\r\n\r\nstruct FriendInfo {\r\n  string avatarName;\r\n  uint32 avatarId;\r\n  string playerName;\r\n  uint8 onlineYesNo;\r\n  uint8 openChatEnabledYesNo;\r\n  uint8 openChatFriendshipYesNo;\r\n  uint8 wlChatEnabledYesNo;\r\n  string location;\r\n  string sublocation;\r\n  uint32 timestamp;\r\n};\r\n\r\nstruct AvatarFriendInfo {\r\n  string avatarName;\r\n  string playerName;\r\n  uint32 playerId;\r\n  uint8 onlineYesNo;\r\n  uint8 openChatEnabledYesNo;\r\n  uint8 openChatFriendshipYesNo;\r\n  uint8 wlChatEnabledYesNo;\r\n};\r\n\r\nstruct MemberInfo {\r\n  uint32 avatarId;\r\n  string avatarName;\r\n  uint8 avatarRank;\r\n  uint8 avatarOnline;\r\n  uint32 bandManagerId;\r\n  uint32 bandId;\r\n};\r\n\r\nstruct leaderBoardRecordResponces {\r\n  char found;\r\n  uint32 id;\r\n  string text;\r\n  int32 value;\r\n};\r\n\r\nstruct leaderBoardRecord {\r\n  uint32 id;\r\n  string text;\r\n  int32 value;\r\n};\r\n\r\ndclass LeaderBoardReceiver {\r\n  getTopTenResponce(string, leaderBoardRecord []);\r\n  getValuesResponce(string, leaderBoardRecordResponces []);\r\n};\r\n\r\ndclass LeaderBoard : LeaderBoardReceiver {\r\n  setValue(string [], uint32, string, int32);\r\n  alterValue(string [], uint32, string, int32);\r\n  setHighScore(string [], uint32, string, int32);\r\n  getValues(string, uint32 []);\r\n  getTopTen(string);\r\n  getValuesRespondTo(string, uint32 [], uint32);\r\n  getTopTenRespondTo(string, uint32);\r\n};\r\n\r\ndclass GuildManager : DistributedObject, LeaderBoardReceiver, TalkPath_group {\r\n  online();\r\n  guildRejectInvite(uint32 avatarId, uint32 reason);\r\n  invitationFrom(uint32 avatarId, string avatarName, uint32 guildId, string guildName);\r\n  requestInvite(uint32 todo0) airecv clsend;\r\n  memberList() airecv clsend;\r\n  createGuild() airecv clsend;\r\n  acceptInvite() airecv clsend;\r\n  declineInvite() airecv clsend;\r\n  setWantName(string(0-256) newName) airecv clsend;\r\n  removeMember(uint32 avatarId) airecv clsend;\r\n  changeRank(uint32 avatarId, uint8 rank) airecv clsend;\r\n  changeRankAvocate(uint32 avatarId) airecv clsend;\r\n  statusRequest() airecv clsend;\r\n  requestLeaderboardTopTen() airecv clsend;\r\n  guildStatusUpdate(uint32 guildId, string(0-256) guildName, uint8 guildRank);\r\n  guildNameReject(uint32 guildId);\r\n  guildNameChange(string guildName, uint8 changeStatus);\r\n  receiveMember(MemberInfo member);\r\n  receiveMembersDone();\r\n  guildAcceptInvite(uint32 avatarId);\r\n  guildDeclineInvite(uint32 todo0);\r\n  updateRep(uint32 todo0, uint32 todo1);\r\n  leaderboardTopTen(leaderBoardRecord stuff[]);\r\n  recvAvatarOnline(uint32 avatarId, string avatarName, uint32 bandManagerId, uint32 bandId);\r\n  recvAvatarOffline(uint32 avatarId, string avatarName);\r\n  sendChat(string(0-256) todo0, uint8 todo1, uint32 todo2) airecv clsend;\r\n  sendWLChat(string(0-256) todo0, uint8 todo1, uint32 todo2) airecv clsend;\r\n  sendSC(uint16 msgIndex) airecv clsend;\r\n  sendSCQuest(uint16 questInt, uint16 msgType, uint16 taskNum) airecv clsend;\r\n  recvChat(uint32 todo0, string todo1, uint8 todo2, uint32 todo3);\r\n  recvWLChat(uint32 todo0, string todo1, uint8 todo2, uint32 todo3);\r\n  recvSC(uint32 senderId, uint16 msgIndex);\r\n  recvSCQuest(uint32 senderId, uint16 questInt, uint16 msgType, uint16 taskNum);\r\n  sendTokenRequest() airecv clsend;\r\n  recvTokenGenerated(string todo0);\r\n  recvTokenInviteValue(string tokenValue, int8 preExistPerm);\r\n  sendTokenForJoinRequest(string(0-256) token, string(0-256) name) airecv clsend;\r\n  recvTokenRedeemMessage(string guildName);\r\n  recvTokenRedeemedByPlayerMessage(string redeemerName);\r\n  sendTokenRValue(string(0-256) todo0, int8 todo1) airecv clsend;\r\n  sendPermToken() airecv clsend;\r\n  sendNonPermTokenCount() airecv clsend;\r\n  recvPermToken(string token);\r\n  recvNonPermTokenCount(uint8 tCount);\r\n  sendClearTokens(uint8 todo0) airecv clsend;\r\n  sendAvatarBandId(uint32 todo0, uint32 todo1, uint32 todo2);\r\n  recvMemberAdded(MemberInfo memberInfo, uint32 inviterId, string inviterName);\r\n  notifyGuildKicksMaxed();\r\n  recvMemberRemoved(uint32 avatarId, uint32 senderId, string avatarName, string senderName);\r\n  recvMemberUpdateName(uint32 todo0, string todo1);\r\n  recvMemberUpdateRank(uint32 avatarId, uint32 senderId, string avatarName, string senderName, uint8 rank, bool promote);\r\n  recvMemberUpdateBandId(uint32 avatarId, uint32 bandManagerId, uint32 bandId);\r\n  avatarOnline(uint32 todo0, uint16 todo1);\r\n  avatarOffline(uint32 todo0);\r\n  reflectTeleportQuery(uint32 todo0, uint32 todo1, uint32 todo2, uint32 todo3, uint32 todo4) clsend airecv;\r\n  teleportQuery(uint32 requesterId, uint32 requesterBandMgrId, uint32 requesterBandId, uint32 requesterGuildId, uint32 requesterShardId);\r\n  reflectTeleportResponse(uint32 todo0, int8 todo1, uint32 todo2, uint32 todo3, uint32 todo4) clsend airecv;\r\n  teleportResponse(uint32 responderId, int8 available, uint32 shardId, uint32 instanceDoId, uint32 areaDoId);\r\n  requestGuildMatesList(uint32 todo0, uint32 todo1, uint32 todo2);\r\n  updateAvatarName(uint32 todo0, string todo1);\r\n  avatarDeleted(uint32 todo0);\r\n};\r\n\r\ndclass AvatarFriendsManager : DistributedObject {\r\n  online();\r\n  requestInvite(uint32 avId) airecv clsend;\r\n  friendConsidering(uint32 avId) airecv clsend;\r\n  invitationFrom(uint32 avId, string avatarName);\r\n  retractInvite(uint32 avId);\r\n  rejectInvite(uint32 avId, uint32 reason);\r\n  requestRemove(uint32 avId) airecv clsend;\r\n  rejectRemove(uint32 avId, uint32 reason);\r\n  updateAvatarFriend(uint32 avId, AvatarFriendInfo info);\r\n  removeAvatarFriend(uint32 avId);\r\n  updateAvatarName(uint32 todo0, string todo1);\r\n  avatarOnline(uint32 todo0, uint32 todo1, string todo2, bool todo3, bool todo4, string todo5, string todo6);\r\n  avatarOffline(uint32 avId);\r\n};\r\n\r\ndclass PlayerFriendsManager : DistributedObject, TalkPath_account {\r\n  requestInvite(uint32 todo0, uint32 todo1, uint8 todo2) airecv clsend;\r\n  invitationFrom(uint32 playerId, string avatarName);\r\n  retractInvite(uint32 playerId);\r\n  invitationResponse(uint32 playerId, uint16 respCode, uint32 context);\r\n  requestDecline(uint32 todo0, uint32 todo1) airecv clsend;\r\n  requestDeclineWithReason(uint32 todo0, uint32 todo1, uint32 todo2) airecv clsend;\r\n  requestRemove(uint32 todo0, uint32 todo1) airecv clsend;\r\n  secretResponse(string secret);\r\n  rejectSecret(string reason);\r\n  rejectUseSecret(string reason);\r\n  updatePlayerFriend(uint32 id, FriendInfo info, uint8 isNewFriend);\r\n  removePlayerFriend(uint32 id);\r\n};\r\n\r\ndclass SnapshotDispatcher : DistributedObject {\r\n  online();\r\n  requestRender(uint32 todo0);\r\n  avatarDeleted(uint32 todo0);\r\n  requestNewWork(uint32 todo0);\r\n  errorFetchingAvatar(uint32 todo0, uint32 todo1);\r\n  errorRenderingAvatar(uint32 todo0, uint32 todo1);\r\n  renderSuccessful(uint32 todo0, uint32 todo1);\r\n};\r\n\r\ndclass SnapshotRenderer : DistributedObject {\r\n  online();\r\n  requestRender(uint32 todo0, uint32 todo1, string todo2);\r\n};\r\n\r\ndclass SpeedchatRelay : DistributedObject, TalkPath_account {\r\n  forwardSpeedchat(uint32 todo0, uint8 todo1, uint32 todo2[], uint32 todo3, string(0-256) todo4, uint8 todo5) clsend;\r\n};\r\n\r\ndclass CentralLogger : DistributedObject {\r\n  sendMessage(string(0-256) category, string(0-1024) event, uint32 targetDISLId, uint32 targetAvId) clsend;\r\n  logAIGarbage() airecv;\r\n};\r\n\r\ndclass SettingsMgr : DistributedObject {\r\n  requestAllChangedSettings() airecv clsend;\r\n  settingChange(string settingName, string valueStr) airecv;\r\n};\r\n\r\ndclass StatusDatabase : DistributedObject {\r\n  requestOfflineAvatarStatus(uint32 avIds[]) airecv clsend;\r\n  recvOfflineAvatarStatus(uint32 avId, uint32 lastOnline);\r\n};\r\n\r\ndclass CallbackObject {\r\n  callback(uint32, bool, uint8);\r\n};\r\n\r\nstruct GiftItem {\r\n  blob Item;\r\n  string giftTag;\r\n};\r\n\r\nstruct gardenSpecial {\r\n  uint8 index;\r\n  uint8 count;\r\n};\r\n\r\nstruct simpleMail {\r\n  uint64 msgId;\r\n  uint32 senderId;\r\n  uint16 year;\r\n  uint8 month;\r\n  uint8 day;\r\n  string body;\r\n};\r\n\r\nstruct invite {\r\n  uint64 inviteKey;\r\n  uint64 partyId;\r\n  uint8 status;\r\n};\r\n\r\nstruct decoration {\r\n  uint8 decorId;\r\n  uint8 x;\r\n  uint8 y;\r\n  uint8 h;\r\n};\r\n\r\nstruct activity {\r\n  uint8 activityId;\r\n  uint8 x;\r\n  uint8 y;\r\n  uint8 h;\r\n};\r\n\r\nstruct party {\r\n  uint64 partyId;\r\n  uint32 hostId;\r\n  uint16 startYear;\r\n  uint8 startMonth;\r\n  uint8 startDay;\r\n  uint8 startHour;\r\n  uint8 startMinute;\r\n  uint16 endYear;\r\n  uint8 endMonth;\r\n  uint8 endDay;\r\n  uint8 endHour;\r\n  uint8 endMinute;\r\n  uint8 isPrivate;\r\n  uint8 inviteTheme;\r\n  activity activities[];\r\n  decoration decors[];\r\n  uint8 status;\r\n};\r\n\r\nstruct partyReply {\r\n  uint32 inviteeId;\r\n  uint8 status;\r\n};\r\n\r\nstruct repliesForOneParty {\r\n  uint64 partyId;\r\n  partyReply partyReplies[];\r\n};\r\n\r\nstruct publicPartyInfo {\r\n  uint32 shardId;\r\n  uint32 zoneId;\r\n  uint8 numberOfGuests;\r\n  string hostName;\r\n  uint8[] activityIds;\r\n  uint16 minLeft;\r\n};\r\n\r\nstruct jukeboxSongInfo {\r\n  uint8/10 phase;\r\n  string fileName;\r\n};\r\n\r\nstruct partyCloudColor {\r\n  uint16 cloudNumber;\r\n  uint8/100 r;\r\n  uint8/100 g;\r\n  uint8/100 b;\r\n};\r\n\r\nstruct datetime {\r\n  uint16 year;\r\n  uint8 month;\r\n  uint8 day;\r\n  uint8 hour;\r\n  uint8 minutes;\r\n  uint8 seconds;\r\n};\r\n\r\ndclass ToontownDistrict : DistributedDistrict {\r\n  setParentingRules(string, string) broadcast ram;\r\n  allowAHNNLog(bool allow) broadcast required ram;\r\n  rpcSetAvailable(bool available) airecv;\r\n};\r\n\r\ndclass ToontownDistrictStats : DistributedObject {\r\n  settoontownDistrictId(uint32 value) broadcast required ram;\r\n  setAvatarCount(uint32 avatarCount) broadcast required ram;\r\n  setNewAvatarCount(uint32 newAvatarCount) broadcast required ram;\r\n  setStats : setAvatarCount, setNewAvatarCount;\r\n};\r\n\r\ndclass WelcomeValleyManager : DistributedObject {\r\n  clientSetZone(uint32 todo0) airecv clsend;\r\n  requestZoneIdMessage(uint32 origZoneId, uint16 context) airecv clsend;\r\n  requestZoneIdResponse(uint32 zoneId, uint16 context);\r\n};\r\n\r\ndclass DistributedAnimatedProp : DistributedObject {\r\n  setPropId(uint16 propId) required broadcast ram;\r\n  setAvatarInteract(uint32 avatarId) required broadcast ram;\r\n  requestInteract() airecv clsend;\r\n  rejectInteract();\r\n  requestExit() airecv clsend;\r\n  avatarExit(uint32 avatarId) broadcast;\r\n  setState(string state, int16 timestamp) required broadcast ram;\r\n};\r\n\r\ntypedef int16 pair16[2];\r\n\r\ndclass DistributedToon : DistributedPlayer {\r\n  setWantBetaKeyQuest(uint8 = 0) required db airecv;\r\n  setWebAccountId(uint32 webId = 0) required airecv;\r\n  setDNAString(blob dnaString) required broadcast ownrecv db;\r\n  setGM(uint8 type = 0) required broadcast ownrecv db;\r\n  setMaxBankMoney(int16 maxMoney = 15000) required broadcast ownrecv db;\r\n  setBankMoney(int16 money = 0) required broadcast ownrecv db;\r\n  setMaxMoney(int16 maxMoney = 40) required broadcast ownrecv db;\r\n  setMoney(int16 money = 0) required broadcast ownrecv db;\r\n  setMaxHp(int16 hitPoints = 15) required broadcast ownrecv db;\r\n  setHp(int16 hp = 15) required broadcast ownrecv db;\r\n  toonUp(uint16 hpGained) broadcast ownrecv;\r\n  takeDamage(uint16 hpLost) broadcast ownrecv;\r\n  setBattleId(uint32 battleId = 0) required broadcast ram;\r\n  setExperience(blob experience = [0*14]) required broadcast db;\r\n  setMaxCarry(uint8 maxCarry = 20) required ownrecv db;\r\n  setTrackAccess(uint16 trackArray[] = [0,0,0,0,1,1,0]) required broadcast ownrecv db;\r\n  setTrackProgress(int8 trackId = -1, uint32 progress = 0) required ownrecv db;\r\n  setTrackBonusLevel(int8 trackArray[] = [-1,-1,-1,-1,-1,-1,-1]) required broadcast ownrecv db;\r\n  setInventory(blob inventoryNetString = [0*7, 0*7, 0*7, 0*7, 1, 0*6, 1, 0*6, 0*7]) required broadcast db;\r\n  setMaxNPCFriends(uint16 max = 16) required ownrecv db;\r\n  setNPCFriendsDict(FriendEntry NPCFriendsList[] = []) required ownrecv db;\r\n  setDefaultShard(uint32 shard = 0) required ownrecv broadcast db;\r\n  setDefaultZone(uint32 zoneId = 0) required ownrecv broadcast db;\r\n  setShtickerBook(blob str = []) required ownrecv db;\r\n  setZonesVisited(uint32 hoods[] = [ 2000 ]) required ownrecv db;\r\n  setHoodsVisited(uint32 hoods[] = [ 2000 ]) required ownrecv db;\r\n  setInterface(blob str = []) required ownrecv db;\r\n  setLastHood(uint32 lastHood = 0) required ownrecv broadcast db;\r\n  setTutorialAck(uint8 tutorialAck = 0) required ownrecv db;\r\n  setMaxClothes(uint32 max = 10) required ownrecv db;\r\n  setClothesTopsList(uint8 clothesList[] = []) required ownrecv db;\r\n  setClothesBottomsList(uint8 clothesList[] = []) required ownrecv db;\r\n  setMaxAccessories(uint32 max = 0) required ownrecv db;\r\n  setHatList(uint8 clothesList[] = []) required ownrecv db;\r\n  setGlassesList(uint8 clothesList[] = []) required ownrecv db;\r\n  setBackpackList(uint8 clothesList[] = []) required ownrecv db;\r\n  setShoesList(uint8 clothesList[] = []) required ownrecv db;\r\n  setHat(uint8 idx = 0, uint8 textureIdx = 0, uint8 colorIdx = 0) required broadcast db ownrecv;\r\n  setGlasses(uint8 idx = 0, uint8 textureIdx = 0, uint8 colorIdx = 0) required broadcast db ownrecv;\r\n  setBackpack(uint8 idx = 0, uint8 textureIdx = 0, uint8 colorIdx = 0) required broadcast db ownrecv;\r\n  setShoes(uint8 idx = 0, uint8 textureIdx = 0, uint8 colorIdx = 0) required broadcast db ownrecv;\r\n  setGardenSpecials(gardenSpecial specials[] = []) required ownrecv db airecv;\r\n  setEarnedExperience(uint16 earnedExp[]) ownrecv;\r\n  setTunnelIn(int16 timestamp, int16/10 endX, int16/10 x, int16/10 y, int16/100 z, int32/100 h) ownsend broadcast;\r\n  setTunnelOut(int16 timestamp, int16/10 startX, int16/10 startY, int16/10 x, int16/10 y, int16/100 z, int32/100 h) ownsend broadcast;\r\n  setAnimState(char animName[0-1024], int16/1000 animMultiplier, int16 timestamp) broadcast ram ownsend airecv;\r\n  setEmoteState(int16 animIndex, int16/1000 animMultiplier, int16 timestamp) broadcast ram ownsend;\r\n  setEmoteAccess(uint8 bits[] = [1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0]) required ownrecv db;\r\n  setCustomMessages(uint16 customMessages[] = []) required ownrecv db;\r\n  setSleepAutoReply(uint32 fromId) broadcast clsend ownrecv;\r\n  setResistanceMessages(pair16 resistanceMessages[] = []) required ownrecv db;\r\n  setPetTrickPhrases(uint8 tricks[] = [0]) required ownrecv db;\r\n  setCatalogSchedule(uint16 currentWeek = 0, uint32 nextTime = 0) required ownrecv db;\r\n  setCatalog(blob monthlyCatalog = [], blob weeklyCatalog = [], blob backCatalog = []) required ownrecv db;\r\n  setMailboxContents(blob mailboxContents = []) required ownrecv db;\r\n  setDeliverySchedule(blob onOrder = []) required ownrecv db airecv;\r\n  setGiftSchedule(blob onGiftOrder = []) required ownrecv db airecv;\r\n  setAwardMailboxContents(blob awardMailboxContents = []) required ownrecv db;\r\n  setAwardSchedule(blob onOrder = []) required ownrecv db airecv;\r\n  setAwardNotify(uint8 awardNotify = 0) required ownrecv db;\r\n  setCatalogNotify(uint8 catalogNotify = 0, uint8 mailboxNotify = 0) required ownrecv db;\r\n  setRedeemedCodes(uint16 redeemedCodes[] = []) required ownrecv db;\r\n  playSplashEffect(int16/10 x, int16/10 y, int16/10 z) broadcast ownsend;\r\n  setWhisperSCToontaskFrom(uint32 fromId, uint32 taskId, uint32 toNpcId, uint32 toonProgress, uint8 msgIndex) ownrecv clsend;\r\n  setSCToontask(uint32 taskId, uint32 toNpcId, uint32 toonProgress, uint8 msgIndex) broadcast ownsend;\r\n  reqSCResistance(uint16 msgIndex, uint32 nearbyPlayers[]) ownsend airecv;\r\n  setSCResistance(uint16 msgIndex, uint32 nearbyToons[]) broadcast ownrecv;\r\n  setSpeedChatStyleIndex(uint8 index = 1) required ownsend broadcast db;\r\n  setTrophyScore(uint16 score) broadcast ownrecv ram;\r\n  setTeleportAccess(uint32 teleportZoneArray[] = []) required ownrecv db;\r\n  checkTeleportAccess(uint16 zoneId) airecv ownsend;\r\n  setTeleportOverride(uint8 flag) clsend airecv;\r\n  battleSOS(uint32 requesterId) ownrecv clsend;\r\n  teleportQuery(uint32 requesterId) ownrecv clsend;\r\n  teleportResponse(uint32 avId, int8 available, uint32 shardId, uint32 hoodId, uint32 zoneId) ownrecv clsend;\r\n  teleportResponseToAI(uint32 toAvId, int8 available, uint32 shardId, uint32 hoodId, uint32 zoneId, uint32 fromAvId) ownsend airecv;\r\n  teleportGiveup(uint32 requesterId) ownrecv clsend;\r\n  teleportGreeting(uint32 avId) broadcast ownsend;\r\n  setCogStatus(uint32 cogStatusList[] = [1 * 32]) required ownrecv db;\r\n  setCogCount(uint32 cogCountList[] = [0 * 32]) required ownrecv db;\r\n  setCogRadar(uint8 radar[] = [0 * 4]) required ownrecv db;\r\n  setBuildingRadar(uint8 radar[] = [0 * 4]) required ownrecv db;\r\n  setCogLevels(uint8 levels[] = [0 * 4]) required broadcast ownrecv db;\r\n  setCogTypes(uint8 types[] = [0 * 4]) required broadcast ownrecv db;\r\n  setCogParts(uint32 parts[] = [0 * 4]) required broadcast ownrecv db;\r\n  setCogMerits(uint16 merits[] = [0 * 4]) required ownrecv db;\r\n  setCogIndex(int8 index) broadcast ram;\r\n  setDisguisePageFlag(int8 flag) ownrecv;\r\n  setSosPageFlag(int8 flag) ownrecv;\r\n  setHouseId(uint32 id = 0) required ownrecv db;\r\n  setQuests(uint32 flattenedQuests[] = []) required broadcast ownrecv db;\r\n  setQuestHistory(uint16 questList[] = []) required ownrecv db;\r\n  setRewardHistory(uint8 rewardTier = 0, uint16 rewardList[] = [100]) required ownrecv db;\r\n  setQuestCarryLimit(uint8 limit = 1) required ownrecv db;\r\n  requestDeleteQuest(uint32 questDesc[]) ownsend airecv;\r\n  setCheesyEffect(int16 effect = 0, uint32 hoodId = 0, uint32 expireTime = 0) required broadcast ownrecv db;\r\n  setGhostMode(uint8 flag) broadcast ownrecv ram;\r\n  setPosIndex(uint8 index = 0) required ownrecv db;\r\n  setFishCollection(uint8 genusList[] = [], uint8 speciesList[] = [], uint16 weightList[] = []) required ownrecv db;\r\n  setMaxFishTank(uint8 maxTank = 20) required ownrecv db;\r\n  setFishTank(uint8 genusList[] = [], uint8 speciesList[] = [], uint16 weightList[] = []) required ownrecv db;\r\n  setFishingRod(uint8 rodId = 0) required broadcast ownrecv db;\r\n  setFishingTrophies(uint8 trophyList[] = []) required ownrecv db;\r\n  setFlowerCollection(uint8 speciesList[] = [], uint8 varietyList[] = []) required ownrecv db;\r\n  setFlowerBasket(uint8 speciesList[] = [], uint8 varietyList[] = []) required ownrecv db;\r\n  setMaxFlowerBasket(uint8 maxFlowerBasket = 20) required ownrecv db;\r\n  setGardenTrophies(uint8 trophyList[] = []) required ownrecv db;\r\n  setShovel(uint8 shovelId = 0) required broadcast ownrecv db;\r\n  setShovelSkill(uint32 skillLevel = 0) required ownrecv db;\r\n  setWateringCan(uint8 wateringCanId = 0) required broadcast ownrecv db;\r\n  setWateringCanSkill(uint32 skillLevel = 0) required ownrecv db;\r\n  promoteShovel(uint8 shovel) ownrecv;\r\n  promoteWateringCan(uint8 wateringCan) ownrecv;\r\n  reactivateWater() ownrecv;\r\n  presentPie(int16/10 x, int16/10 y, int16/10 z, int16/10 h, int32 timestamp) broadcast ownsend;\r\n  tossPie(int16/10 x, int16/10 y, int16/10 z, int16/10 h, uint8 sequence, uint8 power, uint8 throwType, int32 timestamp) broadcast ownsend;\r\n  pieSplat(int16/10 x, int16/10 y, int16/10 z, uint8 sequence, uint8 pieCode, int32 timestamp32) broadcast ownsend;\r\n  setPieType(uint8 pieType) broadcast ownrecv ram;\r\n  setNumPies(uint16 numPies) broadcast ownrecv ram;\r\n  setPieThrowType(uint8 throwType) broadcast ownrecv ram;\r\n  setHealthDisplay(uint8 mode) broadcast ownrecv ram;\r\n  catalogGenClothes(uint32 avId) broadcast ownrecv;\r\n  catalogGenAccessories(uint32 avId) broadcast ownrecv;\r\n  setPetId(uint32 petId = 0) required broadcast ownrecv db;\r\n  setPetMovie(uint32 petId, uint8 flag) ownsend airecv;\r\n  setPetTutorialDone(uint8 bDone = 0) required ownsend airecv db;\r\n  setFishBingoTutorialDone(uint8 bDone = 0) required ownsend airecv db;\r\n  setFishBingoMarkTutorialDone(uint8 bDone = 0) required ownsend airecv db;\r\n  setKartBodyType(int8 bodyType = -1) required broadcast ownrecv db;\r\n  setKartBodyColor(int8 bodyColor = -1) required broadcast ownrecv db;\r\n  setKartAccessoryColor(int8 accColor = -1) required broadcast ownrecv db;\r\n  setKartEngineBlockType(int8 ebType = -1) required broadcast ownrecv db;\r\n  setKartSpoilerType(int8 spType = -1) required broadcast ownrecv db;\r\n  setKartFrontWheelWellType(int8 fwwType = -1) required broadcast ownrecv db;\r\n  setKartBackWheelWellType(int8 bwwType = -1) required broadcast ownrecv db;\r\n  setKartRimType(int8 rimsType = -1) required broadcast ownrecv db;\r\n  setKartDecalType(int8 decalType = -1) required broadcast ownrecv db;\r\n  updateKartDNAField(int8 dnaField, int8 fieldValue) ownsend airecv;\r\n  addOwnedAccessory(int8 accessoryId) ownsend airecv;\r\n  removeOwnedAccessory(int8 accessoryId) ownsend airecv;\r\n  setTickets(uint32 numTickets = 200) required broadcast ownrecv db;\r\n  setKartingHistory(uint8 history[16] = [0*16]) required ownrecv db;\r\n  setKartingTrophies(uint8 trophyList[33] = [0*33]) required ownrecv db;\r\n  setKartingPersonalBest(uint32/1000 bestTimes[6] = [0*6]) required ownrecv db;\r\n  setKartingPersonalBest2(uint32/1000 bestTimes2[12] = [0*12]) required ownrecv db;\r\n  setKartAccessoriesOwned(int8 accessories[16] = [-1*16]) required broadcast ownrecv db;\r\n  setCurrentKart(uint32 avId) broadcast ownrecv ram;\r\n  squish(uint8 damage) ownsend airecv;\r\n  announceBingo() broadcast ownrecv;\r\n  trickOrTreatTargetMet(uint32 beanAmount) ownrecv;\r\n  trickOrTreatMilestoneMet() ownrecv;\r\n  winterCarolingTargetMet(uint32 beanAmount) ownrecv;\r\n  setCogSummonsEarned(uint8 cogSummonsEarned[] = [0*32]) required ownrecv db;\r\n  reqCogSummons(char type[0-256], uint32 suitIndex) ownsend airecv;\r\n  cogSummonsResponse(string returnCode, uint32 suitIndex, uint32 doId) ownrecv;\r\n  reqUseSpecial(int32 special) ownsend airecv;\r\n  useSpecialResponse(string returnCode) ownrecv;\r\n  setGardenStarted(uint8 bStarted = 0) required ownrecv db;\r\n  sendToGolfCourse(uint32 zoneId) ownrecv;\r\n  setGolfHistory(uint16 history[18] = [0*18]) required ownrecv db;\r\n  setPackedGolfHoleBest(uint8 packedHoleBest[18] = [0*18]) required ownrecv db;\r\n  setGolfCourseBest(uint8 courseBest[3] = [0*3]) required ownrecv db;\r\n  setUnlimitedSwing(uint8 unlimitedSwing) broadcast ownrecv ram;\r\n  logSuspiciousEvent(char eventName[0-1024]) ownsend airecv;\r\n  logMessage(char message[0-1024]) ownsend airecv;\r\n  forceLogoutWithNotify() ownrecv;\r\n  setPinkSlips(uint8 pinkSlips = 0) required ownrecv db;\r\n  setNametagStyle(uint8 nametagStyle = 100) required broadcast ownrecv db;\r\n  setMail(simpleMail mail[]) ownrecv;\r\n  setNumMailItems(uint32 numMailItems) airecv;\r\n  setSimpleMailNotify(uint8 simpleMailNotify) ownrecv airecv;\r\n  setInvites(invite invites[]) ownrecv airecv ram;\r\n  setPartiesInvitedTo(party partiesInvitedTo[]) ownrecv airecv ram;\r\n  setHostedParties(party hostedParties[]) ownrecv airecv ram;\r\n  setPartyReplies(repliesForOneParty replies[]) ownrecv airecv ram;\r\n  updateInvite(uint64 inviteKey, uint8 newStatus) ownrecv airecv;\r\n  updateReply(uint64 partyId, uint64 inviteeId, uint8 newStatus) ownrecv airecv;\r\n  setPartyCanStart(uint64 partyId) ownrecv airecv;\r\n  setPartyStatus(uint64 partyId, uint8 newStatus) ownrecv airecv;\r\n  announcePartyStarted(uint64 partyId) ownrecv;\r\n  setNeverStartedPartyRefunded(uint64 partyId, int8 newStatus, uint16 refund) ownrecv;\r\n  setModuleInfo(string info[]) airecv clsend;\r\n  setDISLname(string name) ram;\r\n  setDISLid(uint32 id) ram db airecv;\r\n  flagAv(uint32 avId, uint16 reason, string params[]) airecv ownsend;\r\n  magicFanfare() broadcast;\r\n  magicTeleportRequest(uint32 requesterId) ownrecv;\r\n  magicTeleportResponse(uint32 requesterId, uint32 hoodId) ownsend airecv;\r\n  magicTeleportInitiate(uint32 hoodId, uint32 zoneId) ownrecv;\r\n  keepAlive() ownsend airecv;\r\n  setLastSeen(uint32 timestamp = 0) required db;\r\n};\r\n\r\ndclass DistributedCCharBase : DistributedObject {\r\n  setChat(uint32 category, uint32 msg, uint32 avId) broadcast;\r\n  fadeAway() broadcast;\r\n  setWalk(string srcNode, string destNode, int16 timestamp) required broadcast ram;\r\n  avatarEnter() airecv clsend;\r\n  avatarExit() airecv clsend;\r\n  setNearbyAvatarChat(char msg[0-1024]) airecv clsend;\r\n  setNearbyAvatarSC(uint16 msgIndex) airecv clsend;\r\n  setNearbyAvatarSCCustom(uint16 msgIndex) airecv clsend;\r\n  setNearbyAvatarSCToontask(uint32 taskId, uint32 toNpcId, uint32 toonProgress, uint8 msgIndex) airecv clsend;\r\n};\r\n\r\ndclass DistributedMickey : DistributedCCharBase {\r\n};\r\n\r\ndclass DistributedVampireMickey : DistributedMickey {\r\n};\r\n\r\ndclass DistributedWitchMinnie : DistributedMickey {\r\n};\r\n\r\ndclass DistributedMinnie : DistributedCCharBase {\r\n};\r\n\r\ndclass DistributedGoofy : DistributedCCharBase {\r\n};\r\n\r\ndclass DistributedDaisy : DistributedCCharBase {\r\n};\r\n\r\ndclass DistributedSockHopDaisy : DistributedDaisy {\r\n};\r\n\r\ndclass DistributedChip : DistributedCCharBase {\r\n};\r\n\r\ndclass DistributedPoliceChip : DistributedChip {\r\n};\r\n\r\ndclass DistributedDale : DistributedCCharBase {\r\n  setFollowChip(string srcNode, string destNode, int16 timestamp, int16/100 offsetX, int16/100 offsetY) broadcast ram;\r\n  setChipId(uint32 chipId) required broadcast ram;\r\n};\r\n\r\ndclass DistributedJailbirdDale : DistributedDale {\r\n};\r\n\r\ndclass DistributedDonald : DistributedCCharBase {\r\n};\r\n\r\ndclass DistributedFrankenDonald : DistributedDonald {\r\n};\r\n\r\ndclass DistributedDonaldDock : DistributedCCharBase {\r\n};\r\n\r\ndclass DistributedPluto : DistributedCCharBase {\r\n};\r\n\r\ndclass DistributedWesternPluto : DistributedPluto {\r\n};\r\n\r\ndclass DistributedGoofySpeedway : DistributedCCharBase {\r\n};\r\n\r\ndclass DistributedSuperGoofy : DistributedGoofySpeedway {\r\n};\r\n\r\ndclass DistributedPartyGate : DistributedObject {\r\n  getPartyList(uint32 avId) airecv clsend;\r\n  partyChoiceRequest(uint32 avId, uint64 shardId, uint64 zoneId) airecv clsend;\r\n  listAllPublicParties(publicPartyInfo publicPartyInfo[]);\r\n  partyRequestDenied(uint8 reason);\r\n  setParty(publicPartyInfo partyInfoTuple, uint32 hostId);\r\n};\r\n\r\ndclass DistributedTrolley : DistributedObject {\r\n  setState(string state, int16 timestamp) broadcast ram;\r\n  fillSlot0(uint32 avId) broadcast ram;\r\n  fillSlot1(uint32 avId) broadcast ram;\r\n  fillSlot2(uint32 avId) broadcast ram;\r\n  fillSlot3(uint32 avId) broadcast ram;\r\n  emptySlot0(uint32 avId, int16 timestamp) broadcast ram;\r\n  emptySlot1(uint32 avId, int16 timestamp) broadcast ram;\r\n  emptySlot2(uint32 avId, int16 timestamp) broadcast ram;\r\n  emptySlot3(uint32 avId, int16 timestamp) broadcast ram;\r\n  requestBoard() airecv clsend;\r\n  rejectBoard(uint32 avId);\r\n  requestExit() airecv clsend;\r\n  setMinigameZone(uint32 zoneId, uint16 minigameId);\r\n};\r\n\r\ndclass DistributedSuitPlanner : DistributedObject {\r\n  setZoneId(uint32 zoneId) required broadcast ram;\r\n  suitListQuery() airecv clsend;\r\n  suitListResponse(uint8 suitList[]);\r\n  buildingListQuery() airecv clsend;\r\n  buildingListResponse(uint8 buildingList[]);\r\n};\r\n\r\ndclass DistributedSuitBase : DistributedObject {\r\n  denyBattle();\r\n  setDNAString(blob dnaString) required broadcast ram;\r\n  setLevelDist(int16 level) required broadcast ram;\r\n  setBrushOff(int16 index) broadcast;\r\n  setSkelecog(uint8 flag) required broadcast ram;\r\n  setSkeleRevives(uint8 num) required broadcast ram;\r\n  setHP(int16 hp) required broadcast ram;\r\n};\r\n\r\ndclass DistributedSuit : DistributedSuitBase {\r\n  requestBattle(int16/10 x, int16/10 y, int16/10 z, int16/10 h, int16/10 p, int16/10 r) airecv clsend;\r\n  setSPDoId(uint32 doId) required broadcast ram;\r\n  setPathEndpoints(uint16 start, uint16 end, uint16 minPathLen, uint16 maxPathLen) required broadcast ram;\r\n  setPathPosition(uint16 index, int16 timestamp) required broadcast ram;\r\n  setPathState(int8 state) required broadcast ram;\r\n  debugSuitPosition(int16/10 elapsed, int16 currentLeg, int16/10 x, int16/10 y, int16 timestamp) broadcast;\r\n};\r\n\r\ndclass DistributedTutorialSuit : DistributedSuitBase {\r\n  requestBattle(int16/10 x, int16/10 y, int16/10 z, int16/10 h, int16/10 p, int16/10 r) airecv clsend;\r\n};\r\n\r\ndclass DistributedFactorySuit : DistributedSuitBase {\r\n  setLevelDoId(uint32 levelDoId) required broadcast ram;\r\n  setCogId(uint32 cogId) required broadcast ram;\r\n  setReserve(uint8 reserve) required broadcast ram;\r\n  requestBattle(int16/10 x, int16/10 y, int16/10 z, int16/10 h, int16/10 p, int16/10 r) airecv clsend;\r\n  setAlert(uint32 avId) airecv clsend;\r\n  setConfrontToon(uint32 avId) broadcast;\r\n  setStrayed() airecv clsend;\r\n  setReturn() broadcast;\r\n};\r\n\r\ndclass DistributedMintSuit : DistributedFactorySuit {\r\n};\r\n\r\ndclass DistributedStageSuit : DistributedFactorySuit {\r\n};\r\n\r\ndclass DistributedInvasionSuit : DistributedSuitBase {\r\n  // This should be networked BEFORE the current state, so that the spawn point\r\n  // can be known and the position can be initialized.\r\n  setSpawnPoint(uint8 pointId) required broadcast ram;\r\n  // Ditto:\r\n  setAttackInfo(uint32 targetId, string prop, uint8 damage) required broadcast ram;\r\n\r\n  setState(string state, int32 timestamp) required broadcast ram;\r\n  setMarchLerp(int16/10 x1, int16/10 y1, int16/10 x2, int16/10 y2, int32 timestamp) broadcast ram;\r\n\r\n  setStaticPoint(int16/10 x, int16/10 y, uint16%360/100 h) broadcast ram;\r\n\r\n  sayFaceoffTaunt(bool custom, string phrase) broadcast;\r\n  makeSkelecog() broadcast ram;\r\n\r\n  takeShakerDamage(uint8 damage) clsend airecv;\r\n  setInvasionFinale(bool finale) required broadcast ram;\r\n};\r\n\r\ndclass DistributedBossCog : DistributedNode {\r\n  setDNAString(blob) required broadcast db;\r\n  setToonIds(uint32[], uint32[], uint32[]) broadcast ram;\r\n  setBattleIds(uint8, uint32, uint32) broadcast ram;\r\n  setArenaSide(uint8) broadcast ram;\r\n  avatarEnter() airecv clsend;\r\n  avatarExit() airecv clsend;\r\n  avatarNearEnter() airecv clsend;\r\n  avatarNearExit() airecv clsend;\r\n  toonDied(uint32) broadcast;\r\n  setBattleExperience(int32, int16[], int16[], uint32[], int16[], int16[], int16[], int16[], uint32[], int32, int16[], int16[], uint32[], int16[], int16[], int16[], int16[], uint32[], int32, int16[], int16[], uint32[], int16[], int16[], int16[], int16[], uint32[], int32, int16[], int16[], uint32[], int16[], int16[], int16[], int16[], uint32[], int32, int16[], int16[], uint32[], int16[], int16[], int16[], int16[], uint32[], int32, int16[], int16[], uint32[], int16[], int16[], int16[], int16[], uint32[], int32, int16[], int16[], uint32[], int16[], int16[], int16[], int16[], uint32[], int32, int16[], int16[], uint32[], int16[], int16[], int16[], int16[], uint32[], uint8[], int16[], uint32[]) required broadcast ram;\r\n  zapToon(int16/10, int16/10, int16/10, int16/10, int16/10, int16/10, int8/100, int8/100, uint8, int16) airecv clsend;\r\n  showZapToon(uint32, int16/10, int16/10, int16/10, int16/10, int16/10, int16/10, uint8, int16) broadcast;\r\n  setAttackCode(uint8, uint32) broadcast;\r\n};\r\n\r\ndclass DistributedSellbotBoss : DistributedBossCog {\r\n  setCagedToonNpcId(uint32 npcId) required broadcast ram;\r\n  setDooberIds(uint32 dooberIds[]) broadcast ram;\r\n  setBossDamage(uint16 bossDamage, uint8 recoverRate, int16 timestamp) broadcast ram;\r\n  setState(string state) broadcast ram;\r\n  hitBoss(uint8 bossDamage) airecv clsend;\r\n  hitBossInsides() airecv clsend;\r\n  hitToon(uint32 toonId) airecv clsend;\r\n  finalPieSplat() airecv clsend;\r\n  touchCage() airecv clsend;\r\n  doStrafe(uint8 side, uint8 direction) broadcast;\r\n  cagedToonBattleThree(uint16 index, uint32 avId) broadcast;\r\n  toonPromoted(uint8(0-1) promoted);\r\n};\r\n\r\ndclass DistributedCashbotBoss : DistributedBossCog {\r\n  setState(string state) broadcast ram;\r\n  setBossDamage(uint16 bossDamage) broadcast ram;\r\n  setRewardId(uint16 rewardId) broadcast ram;\r\n  applyReward() airecv clsend;\r\n};\r\n\r\nstruct LinkPosition {\r\n  int16/100 x;\r\n  int16/100 y;\r\n  int16/100 z;\r\n};\r\n\r\ndclass DistributedCashbotBossCrane : DistributedObject {\r\n  setBossCogId(uint32 bossCogId) required broadcast ram;\r\n  setIndex(uint8 index) required broadcast ram;\r\n  setState(char state, uint32 avId) broadcast ram;\r\n  requestControl() airecv clsend;\r\n  requestFree() airecv clsend;\r\n  clearSmoothing(int8 bogus) broadcast clsend;\r\n  setCablePos(uint8 changeSeq, int16/100 y, uint16%360/100 h, LinkPosition links[3], int16 timestamp) broadcast clsend;\r\n};\r\n\r\ndclass DistributedCashbotBossObject : DistributedObject {\r\n  setBossCogId(uint32) required broadcast ram;\r\n  setObjectState(char, uint32, uint32) broadcast ram;\r\n  requestGrab() airecv clsend;\r\n  rejectGrab();\r\n  requestDrop() airecv clsend;\r\n  hitFloor() clsend;\r\n  requestFree(int16/10, int16/10, int16/10, uint16%360/100) airecv clsend;\r\n  hitBoss(uint16/255) airecv clsend;\r\n  setX(int16/10) broadcast ram clsend airecv;\r\n  setY(int16/10) broadcast ram clsend airecv;\r\n  setZ(int16/10) broadcast ram clsend airecv;\r\n  setH(int16%360/10) broadcast ram clsend airecv;\r\n  setP(int16%360/10) broadcast ram clsend airecv;\r\n  setR(int16%360/10) broadcast ram clsend airecv;\r\n  setPos : setX, setY, setZ;\r\n  setHpr : setH, setP, setR;\r\n  setPosHpr : setX, setY, setZ, setH, setP, setR;\r\n  setXY : setX, setY;\r\n  setXZ : setX, setZ;\r\n  setXYH : setX, setY, setH;\r\n  setXYZH : setX, setY, setZ, setH;\r\n  setComponentL(uint64) broadcast ram clsend airecv;\r\n  setComponentX(int16/10) broadcast ram clsend airecv;\r\n  setComponentY(int16/10) broadcast ram clsend airecv;\r\n  setComponentZ(int16/10) broadcast ram clsend airecv;\r\n  setComponentH(int16%360/10) broadcast ram clsend airecv;\r\n  setComponentP(int16%360/10) broadcast ram clsend airecv;\r\n  setComponentR(int16%360/10) broadcast ram clsend airecv;\r\n  setComponentT(int16) broadcast ram clsend airecv;\r\n  setSmStop : setComponentT;\r\n  setSmH : setComponentH, setComponentT;\r\n  setSmZ : setComponentZ, setComponentT;\r\n  setSmXY : setComponentX, setComponentY, setComponentT;\r\n  setSmXZ : setComponentX, setComponentZ, setComponentT;\r\n  setSmPos : setComponentX, setComponentY, setComponentZ, setComponentT;\r\n  setSmHpr : setComponentH, setComponentP, setComponentR, setComponentT;\r\n  setSmXYH : setComponentX, setComponentY, setComponentH, setComponentT;\r\n  setSmXYZH : setComponentX, setComponentY, setComponentZ, setComponentH, setComponentT;\r\n  setSmPosHpr : setComponentX, setComponentY, setComponentZ, setComponentH, setComponentP, setComponentR, setComponentT;\r\n  setSmPosHprL : setComponentL, setComponentX, setComponentY, setComponentZ, setComponentH, setComponentP, setComponentR, setComponentT;\r\n  clearSmoothing(int8) broadcast clsend;\r\n};\r\n\r\ndclass DistributedCashbotBossSafe : DistributedCashbotBossObject {\r\n  setIndex(uint8 index) required broadcast ram;\r\n  requestInitial() airecv clsend;\r\n};\r\n\r\ndclass DistributedCashbotBossGoon : DistributedCashbotBossObject {\r\n  requestBattle(int16/10 pauseTime) airecv clsend;\r\n  requestStunned(int16/10 pauseTime) airecv clsend;\r\n  setVelocity(uint8/10 velocity) broadcast ram;\r\n  setHFov(uint8 hFov) broadcast ram;\r\n  setAttackRadius(uint8 attackRadius) broadcast ram;\r\n  setStrength(uint8 strength) broadcast ram;\r\n  setGoonScale(uint8/50 scale) broadcast ram;\r\n  setupGoon : setVelocity, setHFov, setAttackRadius, setStrength, setGoonScale;\r\n  setTarget(int16/10 x, int16/10 y, uint16%360/100 h, int16 arrivalTime) broadcast ram;\r\n  destroyGoon() broadcast clsend airecv;\r\n};\r\n\r\ndclass DistributedBattleBase : DistributedObject {\r\n  setLevelDoId(uint32 levelDoId) required broadcast ram;\r\n  setBattleCellId(uint32 battleCellId) required broadcast ram;\r\n  setInteractivePropTrackBonus(int8 trackBonus) required broadcast ram;\r\n  setPosition(int16/10 x, int16/10 y, int16/10 z) required broadcast ram;\r\n  setZoneId(uint32 zoneId) required broadcast ram;\r\n  setInitialSuitPos(int16/10 x, int16/10 y, int16/10 z) required broadcast ram;\r\n  setMembers(uint32 suits[], string suitsJoining, string suitsPending, string suitsActive, string suitsLured, string suitTraps, uint32 toons[], string toonsJoining, string toonsPending, string toonsActive, string toonsRunning, int16 timestamp) required broadcast ram;\r\n  adjust(int16 timestamp) broadcast;\r\n  setMovie(int8 active, uint32 toons[], uint32 suits[], int8 id0, int8 tr0, int8 le0, int32 tg0, int16 hp0[], int16 ac0, int16 hpb0, int16 kbb0[], int8 died0, int8 revive0, int8 id1, int8 tr1, int8 le1, int32 tg1, int16 hp1[], int16 ac1, int16 hpb1, int16 kbb1[], int8 died1, int8 revive1, int8 id2, int8 tr2, int8 le2, int32 tg2, int16 hp2[], int16 ac2, int16 hpb2, int16 kbb2[], int8 died2, int8 revive2, int8 id3, int8 tr3, int8 le3, int32 tg3, int16 hp3[], int16 ac3, int16 hpb3, int16 kbb3[], int8 died3, int8 revive3, int8 sid0, int8 at0, int8 stg0, int16 dm0[], int8 sd0, int8 sb0, int8 st0, int8 sid1, int8 at1, int8 stg1, int16 dm1[], int8 sd1, int8 sb1, int8 st1, int8 sid2, int8 at2, int8 stg2, int16 dm2[], int8 sd2, int8 sb2, int8 st2, int8 sid3, int8 at3, int8 stg3, int16 dm3[], int8 sd3, int8 sb3, int8 st3) required broadcast ram;\r\n  setChosenToonAttacks(uint32 ids[], int16 tracks[], int16 levels[], int32 targets[]) broadcast ram;\r\n  setBattleExperience(int32 id0, int16 origExp0[], int16 earnedExp0[], uint32 origQuests0[], int16 items0[], int16 missedItems0[], int16 origMerits0[], int16 merits0[], uint32 parts0[], int32 id1, int16 origExp1[], int16 earnedExp1[], uint32 origQuests1[], int16 items1[], int16 missedItems1[], int16 origMerits1[], int16 merits1[], uint32 parts1[], int32 id2, int16 origExp2[], int16 earnedExp2[], uint32 origQuests2[], int16 items2[], int16 missedItems2[], int16 origMerits2[], int16 merits2[], uint32 parts2[], int32 id3, int16 origExp3[], int16 earnedExp3[], uint32 origQuests3[], int16 items3[], int16 missedItems3[], int16 origMerits3[], int16 merits3[], uint32 parts3[], uint8 deathList[], int16 uberList[], uint32 helpfulToonsList[]) required broadcast ram;\r\n  denyLocalToonJoin();\r\n  setBossBattle(uint8 value) required broadcast ram;\r\n  setState(string state, int16 timestamp) required broadcast ram;\r\n  faceOffDone() airecv clsend;\r\n  toonRequestJoin(int16/10 x, int16/10 y, int16/10 z) airecv clsend;\r\n  toonRequestRun() airecv clsend;\r\n  toonDied() airecv clsend;\r\n  adjustDone() airecv clsend;\r\n  timeout() airecv clsend;\r\n  movieDone() airecv clsend;\r\n  rewardDone() airecv clsend;\r\n  joinDone(uint32 avId) airecv clsend;\r\n  requestAttack(int8 track, int8 level, int32 av) airecv clsend;\r\n  requestPetProxy(uint32 av) airecv clsend;\r\n};\r\n\r\ndclass DistributedBattle : DistributedBattleBase {\r\n};\r\n\r\ndclass DistributedBattleBldg : DistributedBattleBase {\r\n};\r\n\r\ndclass DistributedBattleTutorial : DistributedBattle {\r\n};\r\n\r\ndclass DistributedLevelBattle : DistributedBattle {\r\n};\r\n\r\ndclass DistributedBattleFactory : DistributedLevelBattle {\r\n};\r\n\r\ndclass DistributedMintBattle : DistributedLevelBattle {\r\n};\r\n\r\ndclass DistributedStageBattle : DistributedLevelBattle {\r\n};\r\n\r\ndclass DistributedBattleFinal : DistributedBattleBase {\r\n  setBossCogId(uint32 bossCogId) required broadcast ram;\r\n  setBattleNumber(uint8 battleNumber) required broadcast ram;\r\n  setBattleSide(uint8 battleSide) required broadcast ram;\r\n};\r\n\r\ndclass DistributedBoat : DistributedObject {\r\n  setState(string state, int16 timestamp) required broadcast ram;\r\n};\r\n\r\ndclass DistributedButterfly : DistributedObject {\r\n  setArea(int16 playground, int16 area) required broadcast ram;\r\n  setState(int8 stateIndex, uint8 curIndex, uint8 destIndex, uint16/10 time, int16 timestamp) required broadcast ram;\r\n  avatarEnter() airecv clsend;\r\n};\r\n\r\ndclass DistributedMMPiano : DistributedObject {\r\n  requestSpeedUp() airecv clsend;\r\n  requestChangeDirection() airecv clsend;\r\n  setSpeed(int16/1000 rpm, uint16/100 offset, int16 timestamp) broadcast ram;\r\n  playSpeedUp(uint32 avId) broadcast;\r\n  playChangeDirection(uint32 avId) broadcast;\r\n};\r\n\r\ndclass DistributedDGFlower : DistributedObject {\r\n  avatarEnter() airecv clsend;\r\n  avatarExit() airecv clsend;\r\n  setHeight(uint8/10 newHeight) broadcast ram;\r\n};\r\n\r\ndclass DistributedElectionEvent : DistributedObject {\r\n  setState(string state, int32 timestamp) required broadcast ram;\r\n  wheelbarrowAvatarEnter() clsend airecv;\r\n  slappyAvatarEnter() clsend airecv;\r\n  requestSuit() clsend airecv;\r\n  setSuitPhrase(string phrase) clsend airecv;\r\n  setSuitState(string state) clsend airecv;\r\n  setSuitDamage(uint8 damage, bool) clsend airecv;\r\n  phraseSaidToFlippy(uint16 phraseId) clsend airecv;\r\n  saySurleePhrase(string phrase, bool, bool) broadcast;\r\n  flippySpeech(uint32 avId, uint16 phraseId) broadcast;\r\n};\r\n\r\ndclass DistributedElectionCamera : DistributedNode\r\n{\r\n  setState(string state, int32 ts, int16/10 x, int16/10 y, int16/10 z, int16%360/10 h, int16%360/10 p, uint32 target) required broadcast ram;\r\n\r\n};\r\n\r\ndclass DistributedElectionCameraManager : DistributedObject\r\n{\r\n  setMainCamera(uint32 doId) required broadcast ram;\r\n  setCameraIds(uint32[]) required broadcast ram;\r\n};\r\n\r\ndclass DistributedHotAirBalloon : DistributedObject {\r\n  setState(string state, int32 timestamp, uint32 avId) required broadcast ram;\r\n  requestEnter() clsend airecv;\r\n  setFlightPath(uint8 flightPathIndex) required broadcast ram;\r\n};\r\n\r\ndclass DistributedSafezoneInvasion : DistributedObject {\r\n  pieHitToon(uint32 avId) clsend airecv;\r\n  pieHitSuit(uint32 avId) clsend airecv;\r\n  takeDamage(uint8 damage) clsend airecv;\r\n  setInvasionStarted(bool started) required broadcast ram;\r\n  stopMusic() broadcast ram;\r\n};\r\n\r\ndclass DistributedFishingPond : DistributedObject {\r\n  hitTarget(uint32 target) airecv clsend;\r\n  setArea(uint32 area) required broadcast ram;\r\n};\r\n\r\ndclass DistributedFishingTarget : DistributedNode {\r\n  setPondDoId(uint32 pondDoId) required broadcast ram;\r\n  setState(uint8 stateIndex, int16/10 angle, uint16/100 radius, uint16/10 time, int16 timeStamp) required broadcast ram;\r\n};\r\n\r\ndclass DistributedFishingSpot : DistributedObject {\r\n  setPondDoId(uint32 pondDoId) required broadcast ram;\r\n  setPosHpr(int16/10 x, int16/10 y, int16/10 z, int16/10 h, int16/10 p, int16/10 r) required broadcast ram;\r\n  requestEnter() airecv clsend;\r\n  rejectEnter();\r\n  requestExit() airecv clsend;\r\n  setOccupied(uint32 avId) broadcast ram;\r\n  doCast(uint8/255 p, int16/100 h) airecv clsend;\r\n  sellFish() airecv clsend;\r\n  sellFishComplete(uint8 trophyResult, uint16 numFishCaught);\r\n  setMovie(uint8 mode, uint8 code, uint16 itemDesc1, uint16 itemDesc2, uint16 itemDesc3, uint8/100 power, int16/100 h) broadcast ram;\r\n};\r\n\r\ndclass DistributedPondBingoManager : DistributedObject {\r\n  setPondDoId(uint32 pondId) required broadcast ram;\r\n  updateGameState(uint32 gameState, uint8 cellId);\r\n  setCardState(uint16 cardId, uint8 typeId, uint16 tileSeed, uint32 gameState);\r\n  setState(string state, int16 timeStamp);\r\n  cardUpdate(uint16 cardId, uint8 cellId, uint8 genus, uint8 species) airecv clsend;\r\n  enableBingo();\r\n  handleBingoCall(uint16 cardId) airecv clsend;\r\n  setJackpot(uint16 jackpot);\r\n};\r\n\r\ndclass DistributedCannon : DistributedObject {\r\n  setEstateId(uint32 estateId) required broadcast ram;\r\n  setTargetId(uint32 targetId) required broadcast ram;\r\n  setPosHpr(int16/10 x, int16/10 y, int16/10 z, int16/10 h, int16/10 p, int16/10 r) required broadcast ram;\r\n  setActive(uint8 active) airecv clsend;\r\n  setActiveState(uint8 active) broadcast ram;\r\n  requestEnter() airecv clsend;\r\n  requestExit() broadcast;\r\n  setMovie(uint8 mode, uint32 avId) broadcast ram;\r\n  setCannonPosition(int32/100 rotation, uint32/100 angle) airecv clsend;\r\n  setCannonLit(int32/100 rotation, uint32/100 angle) airecv clsend;\r\n  setFired() airecv clsend;\r\n  setLanded() airecv clsend;\r\n  updateCannonPosition(uint32 avId, int32/100 zRot, uint32/100 angle) broadcast ram;\r\n  setCannonWillFire(uint32 avId, int32/100 fireTime, int32/100 zRot, uint32/100 angle, int16 timestamp) broadcast;\r\n  setCannonExit(uint32 avId) broadcast;\r\n  requestBumperMove(int32/100 x, int32/100 y, int32/100 z) airecv clsend;\r\n  setCannonBumperPos(int32/100 x, int32/100 y, int32/100 z) required broadcast ram;\r\n};\r\n\r\ndclass DistributedTarget : DistributedObject {\r\n  setPosition(int16/10 x, int16/10 y, int16/10 z) required broadcast ram;\r\n  setState(uint8 enabled, uint32/10 score, uint8 time) broadcast;\r\n  setReward(uint32 reward) broadcast;\r\n  setResult(uint32 avId) airecv clsend;\r\n  setBonus(int16/10 bonus) airecv clsend;\r\n  setCurPinballScore(uint32 avId, int32 score, int32 multiplier) clsend airecv;\r\n  setPinballHiScorer(string name) broadcast ram;\r\n  setPinballHiScore(int32 score) broadcast ram;\r\n};\r\n\r\ndclass DistributedMinigame : DistributedObject {\r\n  setParticipants(uint32 avIds[]) broadcast ram required;\r\n  setTrolleyZone(uint32 trolleyZone) broadcast ram required;\r\n  setStartingVotes(uint16 startingVotesArray[]) broadcast ram required;\r\n  setMetagameRound(int8 metagameRound) broadcast ram required;\r\n  setDifficultyOverrides(int32 difficultyOverride, int32 trolleyZoneOverride) broadcast ram required;\r\n  setAvatarJoined() airecv clsend;\r\n  setAvatarReady() airecv clsend;\r\n  setAvatarExited() airecv clsend;\r\n  requestExit() airecv clsend;\r\n  setGameReady() broadcast;\r\n  setGameStart(int16 timestamp) broadcast;\r\n  setGameExit() broadcast;\r\n  setGameAbort() broadcast;\r\n};\r\n\r\ndclass DistributedMinigameTemplate : DistributedMinigame {\r\n};\r\n\r\ndclass DistributedRaceGame : DistributedMinigame {\r\n  setTimerStartTime(int16 timestamp) broadcast;\r\n  setAvatarChoice(uint8 choice) airecv clsend;\r\n  setAvatarChose(uint32 avId) broadcast;\r\n  setChancePositions(uint8 positions[]) broadcast;\r\n  setServerChoices(int8 choices[], uint8 positions[], int8 rewards[]) broadcast;\r\n};\r\n\r\ndclass DistributedCannonGame : DistributedMinigame {\r\n  setCannonPosition(int32/100 zRot, uint32/100 angle) airecv clsend;\r\n  setCannonLit(int32/100 zRot, uint32/100 angle) airecv clsend;\r\n  updateCannonPosition(uint32 avId, int32/100 zRot, uint32/100 angle) broadcast;\r\n  setCannonWillFire(uint32 avId, int32/100 fireTime, int32/100 zRot, uint32/100 angle) broadcast;\r\n  setToonWillLandInWater(int32/100 landTime) airecv clsend;\r\n  announceToonWillLandInWater(uint32 avId, int32/100 landTime) broadcast;\r\n};\r\n\r\ndclass DistributedPhotoGame : DistributedMinigame {\r\n  newClientPhotoScore(uint8 subjectIndex, char pose[0-256], uint32/100 score) airecv clsend;\r\n  newAIPhotoScore(uint32 playerId, uint8 assignmentIndex, uint32/100 score) broadcast;\r\n  filmOut() airecv clsend;\r\n};\r\n\r\ndclass DistributedPatternGame : DistributedMinigame {\r\n  reportPlayerReady() airecv clsend;\r\n  setPattern(uint8 pattern[]) broadcast;\r\n  reportPlayerPattern(uint8 pattern[], uint16/1000 totalTime) airecv clsend;\r\n  setPlayerPatterns(uint8 pattern1[], uint8 pattern2[], uint8 pattern3[], uint8 pattern4[], uint32 fastestAvId) broadcast;\r\n  reportButtonPress(uint8 index, uint8 wrong) airecv clsend;\r\n  remoteButtonPressed(uint32 avId, uint8 index, uint8 wrong) broadcast;\r\n};\r\n\r\ndclass DistributedRingGame : DistributedMinigame {\r\n  setTimeBase(int16 timestamp) broadcast ram required;\r\n  setColorIndices(int8 a, int8 b, int8 c, int8 d) broadcast ram required;\r\n  setToonGotRing(uint8 success) airecv clsend;\r\n  setRingGroupResults(uint8 bitfield) broadcast;\r\n};\r\n\r\ndclass DistributedTagGame : DistributedMinigame {\r\n  tag(uint32 taggedAvId) airecv clsend;\r\n  setIt(uint32 avId) broadcast;\r\n  setTreasureScore(uint16 scores[]) broadcast;\r\n};\r\n\r\ndclass DistributedMazeGame : DistributedMinigame {\r\n  claimTreasure(uint32 treasureNum) airecv clsend;\r\n  setTreasureGrabbed(uint32 avId, uint32 treasureNum) broadcast;\r\n  allTreasuresTaken() broadcast;\r\n  hitBySuit(uint32 avId, int16 timestamp) clsend broadcast;\r\n};\r\n\r\ndclass DistributedTugOfWarGame : DistributedMinigame {\r\n  reportPlayerReady(uint8 side) airecv clsend;\r\n  sendGoSignal(uint8 index[]) broadcast;\r\n  sendStopSignal(uint32 winners[], uint32 losers[], uint32 tieers[]) broadcast;\r\n  sendGameType(uint8 index, uint8 suit) broadcast;\r\n  reportEndOfContest(uint8 index) airecv clsend;\r\n  sendNewAvIdList(uint32 newAvIdList[]) airecv clsend;\r\n  reportCurrentKeyRate(uint32 keyRate, int16/100 force) airecv clsend;\r\n  sendCurrentPosition(uint32 avIdList[], int16/1000 offsetList[]) broadcast;\r\n  sendSuitPosition(int32/1000 suitOffset) broadcast;\r\n  remoteKeyRateUpdate(uint32 avId, uint32 keyRate) broadcast;\r\n};\r\n\r\ndclass DistributedCatchGame : DistributedMinigame {\r\n  claimCatch(uint32 objNum, uint32 DropObjTypeId) airecv clsend;\r\n  setObjectCaught(uint32 avId, uint32 objNum) broadcast;\r\n  hitBySuit(uint32 avId, int16 timestamp) clsend broadcast;\r\n  reportDone() airecv clsend;\r\n  setEveryoneDone() broadcast;\r\n};\r\n\r\ndclass DistributedDivingGame : DistributedMinigame {\r\n  pickupTreasure(uint32 chestId) airecv clsend;\r\n  setTreasureGrabbed(uint32 avId, uint32 chestId) broadcast;\r\n  handleFishCollision(uint32 spawnId, uint32 spawnerId, char status[0-256]) airecv clsend;\r\n  performFishCollision(uint32 avId, uint32 spawnId, uint32 spawnerId, int16 timestamp) broadcast;\r\n  handleCrabCollision(char status[0-256]) airecv clsend;\r\n  performCrabCollision(uint32 avId, int16 timestamp) broadcast;\r\n  setTreasureDropped(uint32 avId, int16 timestamp) broadcast;\r\n  fishSpawn(int16 timestamp, uint32 fishcode, uint32 spawnerId, uint16 offset) broadcast;\r\n  removeFish(uint32) airecv clsend;\r\n  getCrabMoving(uint32 crabId, int16 crabX, int8 dir) airecv clsend;\r\n  setCrabMoving(uint32 crabId, int16 timestamp, int8 rand1, int8 rand2, int16 crabX, int8 dir) broadcast;\r\n  treasureRecovered() airecv clsend;\r\n  dropTreasure() airecv clsend;\r\n  incrementScore(uint32 avId, uint32 newSpot, int16 timestamp) broadcast;\r\n};\r\n\r\ndclass DistributedTargetGame : DistributedMinigame {\r\n  setTimeBase(int16 timestamp) broadcast ram required;\r\n  setToonGotRing(uint8) airecv clsend;\r\n  setRingGroupResults(uint8) broadcast;\r\n  setPlayerDone() airecv clsend;\r\n  setScore(int32 scoreX, int32 scoreY) airecv clsend;\r\n  setTargetSeed(uint32 targetSeed) broadcast ram;\r\n  setRoundDone() broadcast;\r\n  setSingleScore(uint16 score, uint32 avId) broadcast;\r\n  setGameDone() broadcast;\r\n};\r\n\r\ndclass EstateManager : DistributedObject {\r\n  startAprilFools() broadcast;\r\n  stopAprilFools() broadcast;\r\n  getEstateZone(uint32 avId) airecv clsend;\r\n  setEstateZone(uint32 ownerId, uint32 zoneId);\r\n  setAvHouseId(uint32 avId, uint32 houseIds[]) broadcast;\r\n  sendAvToPlayground(DoId avId, uint8 reason);\r\n  exitEstate() airecv clsend;\r\n  removeFriend(uint32 ownerId, uint32 avId) airecv clsend;\r\n};\r\n\r\nstruct decorItem {\r\n  uint8 decorType;\r\n  uint8 dataByte[];\r\n  uint32 dataWord[];\r\n};\r\n\r\nstruct lawnItem {\r\n  uint8 type;\r\n  uint8 hardPoint;\r\n  int8 waterLevel;\r\n  int8 growthLevel;\r\n  uint16 optional;\r\n};\r\n\r\ndclass DistributedEstate : DistributedObject {\r\n  setEstateReady() broadcast;\r\n  setClientReady() airecv clsend;\r\n  setEstateType(uint8 type = 0) required broadcast db;\r\n  setClosestHouse(uint8 house) airecv clsend;\r\n  setTreasureIds(uint32 doIds[]) broadcast ram;\r\n  requestServerTime() airecv clsend;\r\n  setServerTime(uint32 ts);\r\n  setDawnTime(uint32 ts) required broadcast ram;\r\n  placeOnGround(uint32 UNKNOWN) broadcast ram;\r\n  setDecorData(lawnItem items[] = []) required airecv db;\r\n  setLastEpochTimeStamp(uint32 timestamp = 0) required airecv db;\r\n  setRentalTimeStamp(uint32 timestamp = 0) required airecv db;\r\n  setRentalType(uint8 type = 0) required airecv db;\r\n  setSlot0ToonId(uint32 toonId = 0) required airecv db;\r\n  setSlot0Items(lawnItem items[] = []) required airecv db;\r\n  setSlot1ToonId(uint32 toonId = 0) required airecv db;\r\n  setSlot1Items(lawnItem items[] = []) required airecv db;\r\n  setSlot2ToonId(uint32 toonId = 0) required airecv db;\r\n  setSlot2Items(lawnItem items[] = []) required airecv db;\r\n  setSlot3ToonId(uint32 toonId = 0) required airecv db;\r\n  setSlot3Items(lawnItem items[] = []) required airecv db;\r\n  setSlot4ToonId(uint32 toonId = 0) required airecv db;\r\n  setSlot4Items(lawnItem items[] = []) required airecv db;\r\n  setSlot5ToonId(uint32 toonId = 0) required airecv db;\r\n  setSlot5Items(lawnItem items[] = []) required airecv db;\r\n  setIdList(uint32 idList[]) broadcast ram;\r\n  completeFlowerSale(uint8 sell) airecv clsend;\r\n  awardedTrophy(uint32 avId) broadcast;\r\n  setClouds(uint8 clouds) required broadcast ram;\r\n  cannonsOver() broadcast;\r\n  gameTableOver() broadcast;\r\n};\r\n\r\ndclass DistributedHouse : DistributedObject {\r\n  setHousePos(uint8 index) required broadcast;\r\n  setHouseType(uint8 type = 0) required broadcast db;\r\n  setGardenPos(uint8 index = 0) required broadcast db;\r\n  setAvatarId(uint32 toonId = 0) required broadcast db;\r\n  setName(string toonName = "") required broadcast db;\r\n  setColor(uint8 colorIndex = 0) required broadcast db;\r\n  setGender(uint8 genderIndex = 1) required;\r\n  setAtticItems(blob atticItems = "") required db;\r\n  setInteriorItems(blob interiorItems = "") required db;\r\n  setAtticWallpaper(blob atticWallpaper = "") required db;\r\n  setInteriorWallpaper(blob interiorWallpaper = "") required db;\r\n  setAtticWindows(blob atticWindows = "") required db;\r\n  setInteriorWindows(blob interiorWindows = "") required db;\r\n  setDeletedItems(blob deletedItems = "") required db;\r\n  setInteriorInitialized(uint8 initialized = 0) required db;\r\n  setCannonEnabled(uint8 enabled) required;\r\n  setHouseReady() broadcast ram;\r\n};\r\n\r\ndclass DistributedHouseInterior : DistributedObject {\r\n  setHouseId(uint32 index) required broadcast ram;\r\n  setHouseIndex(uint8 index) required broadcast ram;\r\n  setWallpaper(blob items) required broadcast ram;\r\n  setWindows(blob items) required broadcast ram;\r\n};\r\n\r\ndclass DistributedGarden : DistributedObject {\r\n  sendNewProp(uint8 prop, int16/10 x, int16/10 y, int16/10 z) broadcast;\r\n};\r\n\r\ndclass DistributedParty : DistributedObject {\r\n  setPartyClockInfo(uint8 x, uint8 y, uint8 h) required broadcast;\r\n  setInviteeIds(uint32 inviteeIds[]) required broadcast;\r\n  setPartyState(bool partyState) required broadcast;\r\n  setPartyInfoTuple(party partyInfoTuple) required broadcast;\r\n  setAvIdsAtParty(uint32 avIdsAtParty[]) required broadcast;\r\n  setPartyStartedTime(string startedTime) required broadcast;\r\n  setHostName(string hostName) required broadcast;\r\n  enteredParty() clsend airecv;\r\n};\r\n\r\ndclass DistributedPartyActivity : DistributedObject {\r\n  setX(int16/10 x) broadcast required;\r\n  setY(int16/10 y) broadcast required;\r\n  setH(uint16%360/100 h) broadcast required;\r\n  setPartyDoId(uint32 partyDoId) broadcast required;\r\n  toonJoinRequest() airecv clsend;\r\n  toonExitRequest() airecv clsend;\r\n  toonExitDemand() airecv clsend;\r\n  toonReady() airecv clsend;\r\n  joinRequestDenied(uint8 reason);\r\n  exitRequestDenied(uint8 reason);\r\n  setToonsPlaying(uint32 toonIds[]) broadcast ram;\r\n  setState(string newState, int16 timestamp) broadcast ram;\r\n  showJellybeanReward(uint32 earnedAmount, uint8 jarAmount, string message);\r\n};\r\n\r\ndclass DistributedPartyTeamActivity : DistributedPartyActivity {\r\n  toonJoinRequest(uint8(0-1) todo0) airecv clsend;\r\n  toonExitRequest(uint8(0-1) todo0) airecv clsend;\r\n  toonSwitchTeamRequest() airecv clsend;\r\n  setPlayersPerTeam(uint8 min, uint8 max) broadcast required;\r\n  setDuration(uint8 duration) broadcast required;\r\n  setCanSwitchTeams(bool canSwitchTeams) broadcast required;\r\n  setState(string newState, int16 timestamp, uint32 data) broadcast ram;\r\n  setToonsPlaying(uint32 leftTeamToonIds[0-8], uint32 rightTeamToonIds[0-8]) required broadcast ram;\r\n  setAdvantage(uint16/100 advantage);\r\n  switchTeamRequestDenied(uint8 reason);\r\n};\r\n\r\nstruct CatchGeneration {\r\n  uint32 generation;\r\n  uint32 timestamp;\r\n  int8 numPlayers;\r\n};\r\n\r\ndclass DistributedPartyCatchActivity : DistributedPartyActivity {\r\n  setStartTimestamp(uint32 timestamp32) required broadcast ram;\r\n  setGenerations(CatchGeneration generations[]) required broadcast ram;\r\n  requestActivityStart() airecv clsend;\r\n  startRequestResponse(uint8 UNKNOWN);\r\n  claimCatch(uint32 generation, uint32 objNum, uint32 objType) airecv clsend;\r\n  setObjectCaught(uint32 avId, uint32 generation, uint32 objNum) broadcast;\r\n};\r\n\r\ndclass DistributedPartyWinterCatchActivity : DistributedPartyCatchActivity {\r\n};\r\n\r\ndclass DistributedPartyCogActivity : DistributedPartyTeamActivity {\r\n  pieThrow(uint32 toonId, int32 timestamp, int32/100 h, int32/100 x, int32/100 y, int32/100 z, uint8 power) clsend broadcast;\r\n  pieHitsToon(uint32 toonId, int32 timestamp, int32/100 x, int32/100 y, int32/100 z) clsend broadcast;\r\n  pieHitsCog(uint32 toonId, int32 timestamp, int8(0-2) hitCogNum, int32/100 x, int32/100 y, int32/100 z, int32 direction, bool part) clsend broadcast airecv;\r\n  setCogDistances(int8/100 distances[3]) broadcast ram;\r\n  setHighScore(string toonName, uint16 score) broadcast ram;\r\n};\r\n\r\ndclass DistributedPartyWinterCogActivity : DistributedPartyCogActivity {\r\n};\r\n\r\ndclass DistributedPartyDanceActivityBase : DistributedPartyActivity {\r\n  updateDancingToon(uint8 state, char anim[0-256]) clsend airecv;\r\n  setToonsPlaying(uint32 toonIds[], uint16%360/100 toonHeadings[]) broadcast ram;\r\n  setDancingToonState(uint32 toonId, uint8 state, string anim) broadcast;\r\n};\r\n\r\ndclass DistributedPartyDanceActivity : DistributedPartyDanceActivityBase {\r\n};\r\n\r\ndclass DistributedPartyDance20Activity : DistributedPartyDanceActivityBase {\r\n};\r\n\r\ndclass DistributedPartyValentineDanceActivity : DistributedPartyDanceActivityBase {\r\n};\r\n\r\ndclass DistributedPartyValentineDance20Activity : DistributedPartyDanceActivityBase {\r\n};\r\n\r\ndclass DistributedPartyJukeboxActivityBase : DistributedPartyActivity {\r\n  setNextSong(jukeboxSongInfo song) clsend airecv;\r\n  setSongPlaying(jukeboxSongInfo songInfo, uint32 toonId) broadcast ram;\r\n  queuedSongsRequest() clsend airecv;\r\n  queuedSongsResponse(jukeboxSongInfo songInfoList[], int16 index);\r\n  setSongInQueue(jukeboxSongInfo songInfo);\r\n  moveHostSongToTopRequest() clsend airecv;\r\n  moveHostSongToTop();\r\n};\r\n\r\ndclass DistributedPartyJukeboxActivity : DistributedPartyJukeboxActivityBase {\r\n};\r\n\r\ndclass DistributedPartyJukebox40Activity : DistributedPartyJukeboxActivityBase {\r\n};\r\n\r\ndclass DistributedPartyValentineJukeboxActivity : DistributedPartyJukeboxActivityBase {\r\n};\r\n\r\ndclass DistributedPartyValentineJukebox40Activity : DistributedPartyJukeboxActivityBase {\r\n};\r\n\r\ndclass DistributedPartyCannonActivity : DistributedPartyActivity {\r\n  setMovie(uint8 mode, uint32 toonId) broadcast;\r\n  setLanded(uint32 toonId) airecv broadcast clsend;\r\n  setCannonWillFire(uint32 cannonId, int32/100 zRot, uint32/100 angle) broadcast;\r\n  cloudsColorRequest() clsend airecv;\r\n  cloudsColorResponse(partyCloudColor cloudColorList[]);\r\n  requestCloudHit(uint16 cloudId, uint8/100 r, uint8/100 g, uint8/100 b) clsend airecv;\r\n  setCloudHit(uint16 cloudNumber, uint8/100 r, uint8/100 g, uint8/100 b) broadcast;\r\n  setToonTrajectoryAi(int32 launchTime, int32/100 x, int32/100 y, int32/100 z, int32/100 h, int32/100 p, int32/100 r, int32/100 vx, int32/100 vy, int32/100 vz) airecv clsend;\r\n  setToonTrajectory(uint32 avId, int32 launchTime, int32/100 x, int32/100 y, int32/100 z, int32/100 h, int32/100 p, int32/100 r, int32/100 vx, int32/100 vy, int32/100 vz) broadcast;\r\n  updateToonTrajectoryStartVelAi(int32/100 vx, int32/100 vy, int32/100 vz) airecv clsend;\r\n  updateToonTrajectoryStartVel(uint32 avId, int32/100 vx, int32/100 vy, int32/100 vz) broadcast;\r\n};\r\n\r\ndclass DistributedPartyCannon : DistributedObject {\r\n  setActivityDoId(uint64 doId) required broadcast ram;\r\n  setPosHpr(int16/10 x, int16/10 y, int16/10 z, int16/10 h, int16/10 p, int16/10 r) required broadcast ram;\r\n  requestEnter() airecv clsend;\r\n  requestExit() broadcast;\r\n  setMovie(uint8 mode, uint32 avId) broadcast ram;\r\n  setCannonPosition(int32/100 rot, uint32/100 angle) airecv clsend;\r\n  setCannonLit(int32/100 rot, uint32/100 angle) airecv clsend;\r\n  setFired() airecv clsend;\r\n  setLanded(uint32 avId) airecv clsend;\r\n  updateCannonPosition(uint32 avId, int32/100 zRot, uint32/100 angle) broadcast ram;\r\n  setCannonExit(uint32) broadcast;\r\n  setTimeout() clsend airecv;\r\n};\r\n\r\ndclass DistributedPartyFireworksActivity : DistributedPartyActivity {\r\n  setEventId(uint8 eventId) required broadcast;\r\n  setShowStyle(uint8 style) required broadcast;\r\n  setSongId(uint8 songId) required broadcast;\r\n};\r\n\r\ndclass DistributedPartyTrampolineActivity : DistributedPartyActivity {\r\n  awardBeans(uint8 numBeans, uint16 height) clsend airecv;\r\n  setBestHeightInfo(string toonName, uint16 height) broadcast ram;\r\n  reportHeightInformation(uint16 height) airecv clsend;\r\n  leaveTrampoline() broadcast;\r\n  requestAnim(char request[0-256]) clsend airecv;\r\n  requestAnimEcho(string request) broadcast;\r\n  removeBeans(int8 beansToRemove[]) clsend airecv;\r\n  removeBeansEcho(int8 beansToRemove[]) broadcast;\r\n};\r\n\r\ndclass DistributedPartyValentineTrampolineActivity : DistributedPartyTrampolineActivity {\r\n};\r\n\r\ndclass DistributedPartyVictoryTrampolineActivity : DistributedPartyTrampolineActivity {\r\n};\r\n\r\ndclass DistributedPartyWinterTrampolineActivity : DistributedPartyTrampolineActivity {\r\n};\r\n\r\ndclass DistributedPartyTugOfWarActivity : DistributedPartyTeamActivity {\r\n  reportKeyRateForce(uint32 todo0, int16/100 todo1) airecv clsend;\r\n  reportFallIn(uint8 todo0) airecv clsend;\r\n  setToonsPlaying(uint32 leftTeamToonIds[0-4], uint32 rightTeamToonIds[0-4]) required broadcast ram;\r\n  updateToonKeyRate(uint32 toonId, uint32 keyRate) broadcast;\r\n  updateToonPositions(int16/1000 offset) broadcast;\r\n};\r\n\r\ndclass DeleteManager : DistributedObject {\r\n  setInventory(blob newInventoryString) airecv clsend;\r\n};\r\n\r\nstruct weeklyCalendarHoliday {\r\n  uint8 holidayId;\r\n  uint8 dayOfTheWeek;\r\n};\r\n\r\nstruct yearlyCalendarHoliday {\r\n  uint8 holidayId;\r\n  uint8[] firstStartTime;\r\n  uint8[] lastEndTime;\r\n};\r\n\r\nstruct oncelyCalendarHoliday {\r\n  uint8 holidayId;\r\n  uint16[] firstStartTime;\r\n  uint16[] lastEndTime;\r\n};\r\n\r\nstruct relativelyCalendarHoliday {\r\n  uint8 holidayId;\r\n  uint16[] firstStartTime;\r\n  uint16[] lastEndTime;\r\n};\r\n\r\nstruct startAndEndTime {\r\n  uint16[] startTime;\r\n  uint16[] endTime;\r\n};\r\n\r\nstruct multipleStartHoliday {\r\n  uint8 holidayId;\r\n  startAndEndTime times[];\r\n};\r\n\r\ndclass NewsManager : DistributedObject {\r\n  setPopulation(uint32 population) broadcast ram;\r\n  setBingoWin(uint32 zoneId) broadcast ram;\r\n  setBingoStart() broadcast;\r\n  setBingoEnd() broadcast;\r\n  setCircuitRaceStart() broadcast;\r\n  setCircuitRaceEnd() broadcast;\r\n  setTrolleyHolidayStart() broadcast;\r\n  setTrolleyHolidayEnd() broadcast;\r\n  setTrolleyWeekendStart() broadcast;\r\n  setTrolleyWeekendEnd() broadcast;\r\n  setRoamingTrialerWeekendStart() broadcast;\r\n  setRoamingTrialerWeekendEnd() broadcast;\r\n  setInvasionStatus(uint8 msgType, string cogType, uint32 numRemaining, uint8 specialSuit) broadcast;\r\n  setHolidayIdList(uint32 holidayIdList[]) broadcast ram;\r\n  holidayNotify() broadcast;\r\n  setWeeklyCalendarHolidays(weeklyCalendarHoliday weeklyCalendarHolidays[]) required broadcast ram;\r\n  setYearlyCalendarHolidays(yearlyCalendarHoliday yearlyCalendarHolidays[]) required broadcast ram;\r\n  setOncelyCalendarHolidays(oncelyCalendarHoliday oncelyCalendarHolidays[]) required broadcast ram;\r\n  setRelativelyCalendarHolidays(relativelyCalendarHoliday relativelyCalendarHolidays[]) required broadcast ram;\r\n  setMultipleStartHolidays(multipleStartHoliday multipleStartHolidays[]) required broadcast ram;\r\n  sendSystemMessage(string message, uint8 style) broadcast ram;\r\n};\r\n\r\ndclass PurchaseManager : DistributedObject {\r\n  setPlayerIds(uint32 playerIds, uint32, uint32, uint32) required broadcast ram;\r\n  setNewbieIds(uint32 newbieIds[]) required broadcast ram;\r\n  setMinigamePoints(uint8 mpArray, uint8, uint8, uint8) required broadcast ram;\r\n  setPlayerMoney(uint8 moneyArray, uint8, uint8, uint8) required broadcast ram;\r\n  setPlayerStates(uint8 stateArray, uint8, uint8, uint8) required broadcast ram;\r\n  setCountdown(int16 timestamp) required broadcast ram;\r\n  setMetagameRound(int8 round) required broadcast ram;\r\n  setVotesArray(int16 votesArray[]) required broadcast ram;\r\n  requestExit() airecv clsend;\r\n  requestPlayAgain() airecv clsend;\r\n  setInventory(blob data, int16 newMoney, uint8 done) airecv clsend;\r\n  setPurchaseExit() broadcast;\r\n};\r\n\r\ndclass NewbiePurchaseManager : PurchaseManager {\r\n  setOwnedNewbieId(uint32 ownedNewbieId) required broadcast ram;\r\n};\r\n\r\ndclass TutorialManager : DistributedObject {\r\n  requestTutorial() airecv clsend;\r\n  rejectTutorial() airecv clsend;\r\n  requestSkipTutorial() airecv clsend;\r\n  skipTutorialResponse(uint8 allOk);\r\n  enterTutorial(uint32 branchZone, uint32 streetZone, uint32 shopZone, uint32 hqZone);\r\n  allDone() airecv clsend;\r\n  toonArrived() airecv clsend;\r\n};\r\n\r\ndclass CatalogManager : DistributedObject {\r\n  startCatalog() airecv clsend;\r\n};\r\n\r\ndclass DistributedMyTest : DistributedObject {\r\n  setMyTest(uint16) broadcast;\r\n};\r\n\r\ndclass DistributedTreasure : DistributedObject {\r\n  setTreasureType(uint16 treasureType) required broadcast ram;\r\n  setPosition(int16/10 x, int16/10 y, int16/10 z) required broadcast ram;\r\n  requestGrab() airecv clsend;\r\n  setGrab(uint32 avId) broadcast ram;\r\n  setReject() broadcast;\r\n};\r\n\r\ndclass DistributedCashbotBossTreasure : DistributedTreasure {\r\n  setGoonId(uint32 todo0) required broadcast ram;\r\n  setFinalPosition(int16/10 todo0, int16/10 todo1, int16/10 todo2) required broadcast ram;\r\n  setStyle(uint16 todo0) required broadcast ram;\r\n};\r\n\r\ndclass DistributedLargeBlobSender : DistributedObject {\r\n  setMode(uint8) required broadcast ram;\r\n  setTargetAvId(uint32) required broadcast ram;\r\n  setChunk(blob);\r\n  setFilename(string);\r\n  setAck() airecv clsend;\r\n};\r\n\r\ndclass DistributedLevel : DistributedObject {\r\n  setLevelZoneId(uint32 zoneId) required broadcast ram;\r\n  setPlayerIds(uint32 avIdList[]) required broadcast ram;\r\n  setEntranceId(uint8 entranceId) required broadcast ram;\r\n  setZoneIds(uint32 zoneIds[]) broadcast ram;\r\n  setStartTimestamp(int32 timestamp) broadcast ram;\r\n  setOuch(uint8 penalty) airecv clsend;\r\n  requestCurrentLevelSpec(string specHash, string entTypeRegHash) airecv clsend;\r\n  setSpecDeny(blob);\r\n  setSpecSenderDoId(uint32);\r\n  setAttribChange(uint32, blob, blob, blob) broadcast;\r\n};\r\n\r\ndclass DistributedEntity : DistributedObject {\r\n  setLevelDoId(uint32 levelDoId) required broadcast ram;\r\n  setEntId(uint32 entId) required broadcast ram;\r\n};\r\n\r\ndclass DistributedInteractiveEntity : DistributedEntity {\r\n  setAvatarInteract(uint32 avatarId) required broadcast ram;\r\n  requestInteract() airecv clsend;\r\n  rejectInteract();\r\n  requestExit() airecv clsend;\r\n  avatarExit(uint32 avatarId) broadcast;\r\n  setState(string state, int32 timestamp) required broadcast ram;\r\n};\r\n\r\ndclass DistributedTrophyMgr : DistributedObject {\r\n  requestTrophyScore() airecv clsend;\r\n};\r\n\r\ndclass DistributedBuilding : DistributedObject {\r\n  setBlock(uint16 block, uint32 interiorZoneId) required broadcast ram;\r\n  setSuitData(int8 suitTrack, int8 difficulty, int8 numFloors) required broadcast ram;\r\n  setVictorList(uint32 victorList[]) broadcast ram;\r\n  setState(string state, int16 timestamp) broadcast ram;\r\n  setVictorReady() airecv clsend;\r\n};\r\n\r\ndclass DistributedAnimBuilding : DistributedBuilding {\r\n};\r\n\r\ndclass DistributedToonInterior : DistributedObject {\r\n  setZoneIdAndBlock(uint32 zoneId, uint16 block) required broadcast ram;\r\n  setToonData(blob toonData) required broadcast ram;\r\n  setState(string state, int16 timestamp) required broadcast ram;\r\n  nextSnowmanHeadPart() clsend airecv;\r\n};\r\n\r\ndclass DistributedToonHallInterior : DistributedToonInterior {\r\n};\r\n\r\ndclass DistributedSuitInterior : DistributedObject {\r\n  setZoneId(uint32 zoneId) required broadcast ram;\r\n  setExtZoneId(uint32 extZoneId) required broadcast ram;\r\n  setDistBldgDoId(uint32 distBldgDoId) required broadcast ram;\r\n  setNumFloors(int8 numFloors) required broadcast ram;\r\n  setToons(uint32 toonIds[], uint16 hack) broadcast ram;\r\n  setSuits(uint32 suitIds[], uint32 reserveIds[], uint16 values[]) broadcast ram;\r\n  setState(string state, int16 timestamp) required broadcast ram;\r\n  setAvatarJoined() airecv clsend;\r\n  elevatorDone() airecv clsend;\r\n  reserveJoinDone() airecv clsend;\r\n};\r\n\r\ndclass DistributedCogdoBarrel : DistributedObject {\r\n  requestGrab() airecv clsend;\r\n  setIndex(uint32 index) required broadcast ram;\r\n  setState(uint32 state) required broadcast ram;\r\n  setGrab(uint32 avId) broadcast ram;\r\n  setReject() broadcast;\r\n};\r\n\r\ndclass DistributedCogdoInterior : DistributedObject {\r\n  setZoneId(uint32 zoneId) required broadcast ram;\r\n  setExtZoneId(uint32 extZoneId) required broadcast ram;\r\n  setDistBldgDoId(uint32 distBldgDoId) required broadcast ram;\r\n  setNumFloors(int8 numFloors) required broadcast ram;\r\n  setShopOwnerNpcId(uint32 npcId) required broadcast ram;\r\n  setSOSNpcId(uint32 npcId) broadcast ram;\r\n  setFOType(int8 typeId) broadcast ram;\r\n  setToons(uint32 toonIds[], uint16 hack) broadcast ram;\r\n  setSuits(uint32 suitIds[], uint32 reserveIds[], uint16 values[]) broadcast ram;\r\n  setState(string state, int16 timestamp) required broadcast ram;\r\n  setAvatarJoined() airecv clsend;\r\n  elevatorDone() airecv clsend;\r\n  reserveJoinDone() airecv clsend;\r\n  toonLeftBarrelRoom() airecv clsend;\r\n  toonBarrelRoomIntroDone() airecv clsend;\r\n  setBarrelRoomReward(uint32 avIds[], uint8 laffs[]) broadcast;\r\n  toonBarrelRoomRewardDone() airecv clsend;\r\n};\r\n\r\ndclass DistributedCogdoBattleBldg : DistributedBattleBldg {\r\n};\r\n\r\ndclass DistCogdoGame : DistributedObject {\r\n  setInteriorId(uint32 interiorId) required broadcast ram;\r\n  setExteriorZone(uint32 exteriorZone) broadcast ram required;\r\n  setDifficultyOverrides(int32 difficultyOverride, int32 exteriorZoneOverride) broadcast ram required;\r\n  setVisible() broadcast;\r\n  setIntroStart() broadcast;\r\n  setToonSad(uint32 toonId) broadcast;\r\n  setToonDisconnect(uint32 toonId) broadcast;\r\n  setAvatarReady() airecv clsend;\r\n  setGameStart(int16 timestamp) broadcast;\r\n  setGameFinish(int16 timestamp) broadcast;\r\n};\r\n\r\ndclass DistCogdoLevelGame : DistCogdoGame, DistributedLevel {\r\n};\r\n\r\ndclass DistCogdoMazeGame : DistCogdoGame {\r\n  requestAction(uint8 action, uint32 data) airecv clsend;\r\n  doAction(uint8 action, uint32 data, int16 networkTime) broadcast;\r\n  setNumSuits(uint8 numSuits[3]) required broadcast;\r\n  requestUseGag(int16/10 x, int16/10 y, int16/10 h, int16 networkTime) clsend airecv;\r\n  toonUsedGag(uint32 toonId, int16/10 x, int16/10 y, int16/10 h, int16 networkTime) broadcast;\r\n  requestSuitHitByGag(uint8 suitType, uint8 suitNum) clsend airecv;\r\n  suitHitByGag(uint32 toonId, uint8 suitType, uint8 suitNum) broadcast;\r\n  requestHitBySuit(uint8 suitType, uint8 suitNum, int16 networkTime) clsend airecv;\r\n  toonHitBySuit(uint32 toonId, uint8 suitType, uint8 suitNum, int16 networkTime) broadcast;\r\n  requestHitByDrop() clsend airecv;\r\n  toonHitByDrop(uint32 toonId) broadcast;\r\n  requestPickUp(uint8 pickupNum) clsend airecv;\r\n  pickUp(uint32 toonId, uint8 pickupNum, int16 networkTime) broadcast;\r\n  requestGag(uint8 waterCoolerIndex) clsend airecv;\r\n  hasGag(uint32 toonId, int16 networkTime) broadcast;\r\n};\r\n\r\ndclass DistCogdoFlyingGame : DistCogdoGame {\r\n  requestAction(uint8 action, uint8 data) airecv clsend;\r\n  requestPickUp(uint16 pickupNum, uint8 pickupType) airecv clsend;\r\n  pickUp(uint32 toonId, uint16 pickupNum, int16 networkTime) broadcast;\r\n  debuffPowerup(uint32 toonId, uint16 pickupType, int16 networkTime) broadcast;\r\n  doAction(uint8 action, uint32 data) broadcast;\r\n  eagleExitCooldown(uint32 eagleId, int16 networkTime) broadcast;\r\n  toonSetAsEagleTarget(uint32 toonId, uint8 eagleId, int16 networkTime) broadcast;\r\n  toonClearAsEagleTarget(uint32 toonId, uint8 eagleId, int16 networkTime) broadcast;\r\n  toonDied(uint32 toonId, int32 networkTime) broadcast;\r\n  toonSpawn(uint32 toonId, int32 networkTime) broadcast;\r\n  toonSetBlades(uint32 toonId, int32 fuelState) broadcast;\r\n  toonBladeLost(uint32 toonId) broadcast;\r\n};\r\n\r\ndclass DistCogdoBoardroomGame : DistCogdoLevelGame {\r\n};\r\n\r\ndclass DistCogdoCraneGame : DistCogdoLevelGame {\r\n};\r\n\r\ndclass DistCogdoCrane : DistributedObject {\r\n  setCraneGameId(uint32 craneGameId) required broadcast ram;\r\n  setIndex(uint8 index) required broadcast ram;\r\n  setState(char state, uint32 avId) broadcast ram;\r\n  clearSmoothing(int8 bogus) broadcast clsend;\r\n  setCablePos(uint8 changeSeq, int16/100 y, uint16%360/100 h, LinkPosition links[3], int16 timestamp) broadcast clsend;\r\n};\r\n\r\ndclass DistCogdoCraneObject : DistributedObject {\r\n  setCraneGameId(uint32) required broadcast ram;\r\n  setObjectState(char, uint32, uint32) broadcast ram;\r\n  requestGrab() airecv clsend;\r\n  rejectGrab();\r\n  requestDrop() airecv clsend;\r\n  hitFloor() clsend;\r\n  requestFree(int16/10, int16/10, int16/10, uint16%360/100) airecv clsend;\r\n  hitBoss(uint16/255) airecv clsend;\r\n  setX(int16/10) broadcast ram clsend airecv;\r\n  setY(int16/10) broadcast ram clsend airecv;\r\n  setZ(int16/10) broadcast ram clsend airecv;\r\n  setH(int16%360/10) broadcast ram clsend airecv;\r\n  setP(int16%360/10) broadcast ram clsend airecv;\r\n  setR(int16%360/10) broadcast ram clsend airecv;\r\n  setPos : setX, setY, setZ;\r\n  setHpr : setH, setP, setR;\r\n  setPosHpr : setX, setY, setZ, setH, setP, setR;\r\n  setXY : setX, setY;\r\n  setXZ : setX, setZ;\r\n  setXYH : setX, setY, setH;\r\n  setXYZH : setX, setY, setZ, setH;\r\n  setComponentL(uint64) broadcast ram clsend airecv;\r\n  setComponentX(int16/10) broadcast ram clsend airecv;\r\n  setComponentY(int16/10) broadcast ram clsend airecv;\r\n  setComponentZ(int16/10) broadcast ram clsend airecv;\r\n  setComponentH(int16%360/10) broadcast ram clsend airecv;\r\n  setComponentP(int16%360/10) broadcast ram clsend airecv;\r\n  setComponentR(int16%360/10) broadcast ram clsend airecv;\r\n  setComponentT(int16) broadcast ram clsend airecv;\r\n  setSmStop : setComponentT;\r\n  setSmH : setComponentH, setComponentT;\r\n  setSmZ : setComponentZ, setComponentT;\r\n  setSmXY : setComponentX, setComponentY, setComponentT;\r\n  setSmXZ : setComponentX, setComponentZ, setComponentT;\r\n  setSmPos : setComponentX, setComponentY, setComponentZ, setComponentT;\r\n  setSmHpr : setComponentH, setComponentP, setComponentR, setComponentT;\r\n  setSmXYH : setComponentX, setComponentY, setComponentH, setComponentT;\r\n  setSmXYZH : setComponentX, setComponentY, setComponentZ, setComponentH, setComponentT;\r\n  setSmPosHpr : setComponentX, setComponentY, setComponentZ, setComponentH, setComponentP, setComponentR, setComponentT;\r\n  setSmPosHprL : setComponentL, setComponentX, setComponentY, setComponentZ, setComponentH, setComponentP, setComponentR, setComponentT;\r\n  clearSmoothing(int8) broadcast clsend;\r\n};\r\n\r\ndclass DistCogdoCraneMoneyBag : DistCogdoCraneObject {\r\n  setIndex(uint8 index) required broadcast ram;\r\n  requestInitial() airecv clsend;\r\n};\r\n\r\ndclass DistCogdoCraneCog : DistributedObject {\r\n  setGameId(uint32 gameId) required broadcast ram;\r\n  setDNAString(blob dnaString) required broadcast ram;\r\n  setSpawnInfo(uint8 entranceId, int16 timestamp) required broadcast ram;\r\n};\r\n\r\ndclass DistributedHQInterior : DistributedObject {\r\n  setZoneIdAndBlock(uint32 zoneId, uint16 block) required broadcast ram;\r\n  setLeaderBoard(blob leaderData) required broadcast ram;\r\n  setTutorial(uint8 flag) required broadcast ram;\r\n};\r\n\r\ndclass DistributedGagshopInterior : DistributedObject {\r\n  setZoneIdAndBlock(uint32 zoneId, uint16 block) required broadcast ram;\r\n};\r\n\r\ndclass DistributedPetshopInterior : DistributedObject {\r\n  setZoneIdAndBlock(uint32 zoneId, uint16 block) required broadcast ram;\r\n};\r\n\r\ndclass DistributedKartShopInterior : DistributedObject {\r\n  setZoneIdAndBlock(uint32 zoneId, uint16 block) required broadcast ram;\r\n};\r\n\r\ndclass DistributedDoor : DistributedObject {\r\n  setZoneIdAndBlock(uint32 zoneId, uint32 block) required broadcast ram;\r\n  setSwing(int8 flags) required broadcast ram;\r\n  setDoorType(uint8 doorType) required broadcast ram;\r\n  setDoorIndex(uint8 doorIndex) required broadcast ram;\r\n  setOtherZoneIdAndDoId(uint32 zoneId, uint32 distributedObjectID);\r\n  requestEnter() airecv clsend;\r\n  requestExit() airecv clsend;\r\n  rejectEnter(int8 reason);\r\n  avatarEnter(uint32 avatarID) broadcast;\r\n  avatarExit(uint32 avatarID) broadcast;\r\n  setState(string state, int16 timestamp) required broadcast ram;\r\n  setExitDoorState(string state, int16 timestamp) required broadcast ram;\r\n};\r\n\r\ndclass DistributedAnimDoor : DistributedDoor {\r\n};\r\n\r\ndclass DistributedHouseDoor : DistributedDoor {\r\n};\r\n\r\ndclass DistributedCogHQDoor : DistributedDoor {\r\n};\r\n\r\ndclass DistributedSellbotHQDoor : DistributedCogHQDoor {\r\n  informPlayer(uint8 suitType) broadcast ram;\r\n};\r\n\r\ndclass DistributedNPCToonBase : DistributedNode {\r\n  setName(string name) required broadcast ram;\r\n  setDNAString(blob dnaString) required broadcast ram;\r\n  setPositionIndex(uint8 posIndex) required broadcast ram;\r\n  setAnimState(string animName, int16/1000 animMultiplier, int16 timestamp) broadcast ram;\r\n  setPageNumber(int16 paragraph, int8 pageNumber, int16 timestamp) broadcast ram clsend;\r\n  avatarEnter() airecv clsend;\r\n  freeAvatar();\r\n};\r\n\r\ndclass DistributedNPCToon : DistributedNPCToonBase {\r\n  setMovie(uint8 mode, uint32 npcId, uint32 avId, uint16 quests[], int16 timestamp) broadcast ram;\r\n  setMovieDone() airecv clsend;\r\n  chooseQuest(uint16 questId) airecv clsend;\r\n  chooseTrack(int8 trackId) airecv clsend;\r\n};\r\n\r\ndclass DistributedNPCSnowballGiver : DistributedNPCToonBase {\r\n  gaveSnowballs(uint32 npcId, uint32 avId, uint8 sbPhraseId) broadcast ram;\r\n};\r\n\r\ndclass DistributedNPCSpecialQuestGiver : DistributedNPCToonBase {\r\n  setMovie(uint8 mode, uint32 npcId, uint32 avId, uint16 quests[], int16 timestamp) broadcast ram;\r\n  setMovieDone() airecv clsend;\r\n  chooseQuest(uint16 questId) airecv clsend;\r\n  chooseTrack(int8 trackId) airecv clsend;\r\n};\r\n\r\ndclass DistributedNPCFlippyInToonHall : DistributedNPCToon {\r\n};\r\n\r\ndclass DistributedNPCScientist : DistributedNPCToonBase {\r\n  setChat(char topic[0-1024], uint8 partPos, uint32 partId, uint8 progress, uint8 flags) ownsend broadcast;\r\n};\r\n\r\ndclass DistributedNPCClerk : DistributedNPCToonBase {\r\n  setMovie(uint8 mode, uint32 npcId, uint32 avId, int16 timestamp) broadcast ram;\r\n  setInventory(blob inventoryNetString, int16, uint8) airecv clsend;\r\n};\r\n\r\ndclass DistributedNPCTailor : DistributedNPCToonBase {\r\n  setMovie(uint8 mode, uint32 npcId, uint32 avId, int16 timestamp) broadcast ram;\r\n  setDNA(blob dna, int8 black, uint8 heads) airecv clsend;\r\n  setCustomerDNA(uint32 avId, blob dnaString) broadcast ram;\r\n};\r\n\r\ndclass DistributedNPCBlocker : DistributedNPCToonBase {\r\n  setMovie(uint8 mode, uint32 npcId, uint32 avId, int16 timestamp) broadcast ram;\r\n};\r\n\r\ndclass DistributedNPCFisherman : DistributedNPCToonBase {\r\n  setMovie(uint8 mode, uint32 npcId, uint32 avId, uint32 extraArgs[], int16 timestamp) broadcast ram;\r\n  completeSale(uint8 sell) airecv clsend;\r\n};\r\n\r\ndclass DistributedNPCPartyPerson : DistributedNPCToonBase {\r\n  setMovie(uint8 mode, uint32 npcId, uint32 avId, uint32 extraArgs[], int16 timestamp) broadcast ram;\r\n  answer(uint8 wantsToPlan) airecv clsend;\r\n};\r\n\r\ndclass DistributedNPCPetclerk : DistributedNPCToonBase {\r\n  setMovie(uint8 mode, uint32 npcId, uint32 avId, uint32 extraArgs[], int16 timestamp) broadcast ram;\r\n  setPetSeeds(uint32 petSeeds[]);\r\n  petAdopted(uint8 petNum, uint32 nameIndex) airecv clsend;\r\n  petReturned() airecv clsend;\r\n  fishSold() airecv clsend;\r\n  transactionDone() airecv clsend;\r\n};\r\n\r\ndclass DistributedNPCKartClerk : DistributedNPCToonBase {\r\n  setMovie(uint8 mode, uint32 npcId, uint32 avId, uint32 extraArgs[], int16 timestamp) broadcast ram;\r\n  buyKart(uint8 whichKart) airecv clsend;\r\n  buyAccessory(uint8 whichAcc) airecv clsend;\r\n  transactionDone() airecv clsend;\r\n};\r\n\r\ndclass DistributedKnockKnockDoor : DistributedAnimatedProp {\r\n};\r\n\r\ndclass DistributedElevator : DistributedObject {\r\n  setBldgDoId(uint32 bldgDoId) required broadcast ram;\r\n  setState(string state, int16 timestamp) broadcast ram;\r\n  fillSlot0(uint32 avId, uint8 wantBoardingShow) broadcast ram;\r\n  fillSlot1(uint32 avId, uint8 wantBoardingShow) broadcast ram;\r\n  fillSlot2(uint32 avId, uint8 wantBoardingShow) broadcast ram;\r\n  fillSlot3(uint32 avId, uint8 wantBoardingShow) broadcast ram;\r\n  fillSlot4(uint32 avId, uint8 wantBoardingShow) broadcast ram;\r\n  fillSlot5(uint32 avId, uint8 wantBoardingShow) broadcast ram;\r\n  fillSlot6(uint32 avId, uint8 wantBoardingShow) broadcast ram;\r\n  fillSlot7(uint32 avId, uint8 wantBoardingShow) broadcast ram;\r\n  emptySlot0(uint32 avId, int8 bailFlag, int16 timestamp, int16 time) broadcast ram;\r\n  emptySlot1(uint32 avId, int8 bailFlag, int16 timestamp, int16 time) broadcast ram;\r\n  emptySlot2(uint32 avId, int8 bailFlag, int16 timestamp, int16 time) broadcast ram;\r\n  emptySlot3(uint32 avId, int8 bailFlag, int16 timestamp, int16 time) broadcast ram;\r\n  emptySlot4(uint32 avId, int8 bailFlag, int16 timestamp, int16 time) broadcast ram;\r\n  emptySlot5(uint32 avId, int8 bailFlag, int16 timestamp, int16 time) broadcast ram;\r\n  emptySlot6(uint32 avId, int8 bailFlag, int16 timestamp, int16 time) broadcast ram;\r\n  emptySlot7(uint32 avId, int8 bailFlag, int16 timestamp, int16 time) broadcast ram;\r\n  requestBoard() airecv clsend;\r\n  rejectBoard(uint32 avId, uint8 reason);\r\n  requestExit() airecv clsend;\r\n  setElevatorTripId(uint32 id) required broadcast ram;\r\n  setAntiShuffle(uint8 antiShuffle) required broadcast ram;\r\n  setMinLaff(uint8 minLaff) required broadcast ram;\r\n};\r\n\r\ndclass DistributedElevatorFSM : DistributedObject {\r\n  setBldgDoId(uint32 bldgDoId) required broadcast ram;\r\n  setState(string state, int16 timestamp) broadcast ram;\r\n  fillSlot0(uint32 avId) broadcast ram;\r\n  fillSlot1(uint32 avId) broadcast ram;\r\n  fillSlot2(uint32 avId) broadcast ram;\r\n  fillSlot3(uint32 avId) broadcast ram;\r\n  fillSlot4(uint32 avId) broadcast ram;\r\n  fillSlot5(uint32 avId) broadcast ram;\r\n  fillSlot6(uint32 avId) broadcast ram;\r\n  fillSlot7(uint32 avId) broadcast ram;\r\n  emptySlot0(uint32 avId, int8 bailFlag, int16 timestamp) broadcast ram;\r\n  emptySlot1(uint32 avId, int8 bailFlag, int16 timestamp) broadcast ram;\r\n  emptySlot2(uint32 avId, int8 bailFlag, int16 timestamp) broadcast ram;\r\n  emptySlot3(uint32 avId, int8 bailFlag, int16 timestamp) broadcast ram;\r\n  emptySlot4(uint32 avId, int8 bailFlag, int16 timestamp) broadcast ram;\r\n  emptySlot5(uint32 avId, int8 bailFlag, int16 timestamp) broadcast ram;\r\n  emptySlot6(uint32 avId, int8 bailFlag, int16 timestamp) broadcast ram;\r\n  emptySlot7(uint32 avId, int8 bailFlag, int16 timestamp) broadcast ram;\r\n  requestBoard() airecv clsend;\r\n  rejectBoard(uint32 avId, uint8 reason);\r\n  requestExit() airecv clsend;\r\n  setElevatorTripId(uint32 id) required broadcast ram;\r\n  setAntiShuffle(uint8 antiShuffle) required broadcast ram;\r\n  setMinLaff(uint8 minLaff) required broadcast ram;\r\n};\r\n\r\ndclass DistributedElevatorFloor : DistributedElevatorFSM {\r\n  setFloor(int8 floorNumber) broadcast ram;\r\n  setLocked(uint16 locked) required broadcast ram;\r\n  setEntering(uint16 entering) required broadcast ram;\r\n  kickToonsOut() broadcast;\r\n  setLatch(uint32 markerId) required broadcast ram;\r\n};\r\n\r\ndclass DistributedElevatorExt : DistributedElevator {\r\n  setFloor(int8 floorNumber) broadcast ram;\r\n};\r\n\r\ndclass DistributedLawOfficeElevatorExt : DistributedElevatorExt {\r\n  setEntranceId(uint8 entranceId) required broadcast ram;\r\n  setLawOfficeInteriorZone(uint32 zoneId);\r\n  setLawOfficeInteriorZoneForce(uint32 zoneId);\r\n};\r\n\r\ndclass DistributedElevatorInt : DistributedElevator {\r\n  requestBuildingExit() airecv clsend;\r\n  forcedExit(uint32 avId);\r\n};\r\n\r\ndclass DistributedFactoryElevatorExt : DistributedElevatorExt {\r\n  setEntranceId(uint8 entranceId) required broadcast ram;\r\n  setFactoryInteriorZone(uint32 zoneId);\r\n  setFactoryInteriorZoneForce(uint32 zoneId);\r\n};\r\n\r\ndclass DistributedMintElevatorExt : DistributedElevatorExt {\r\n  setMintId(uint16 mintId) required broadcast ram;\r\n  setMintInteriorZone(uint32 zoneId);\r\n  setMintInteriorZoneForce(uint32 zoneId);\r\n};\r\n\r\ndclass DistributedCogdoElevatorExt : DistributedElevatorExt {\r\n};\r\n\r\ndclass DistributedLawOfficeElevatorInt : DistributedElevatorFloor {\r\n  setLawOfficeInteriorZone(uint32 zoneId);\r\n};\r\n\r\ndclass DistributedCogdoElevatorInt : DistributedElevatorInt {\r\n};\r\n\r\ndclass DistributedBossElevator : DistributedElevatorExt {\r\n  setBossOfficeZone(uint32 zoneId);\r\n  setBossOfficeZoneForce(uint32 zoneId);\r\n};\r\n\r\ndclass DistributedVPElevator : DistributedBossElevator {\r\n};\r\n\r\ndclass DistributedCFOElevator : DistributedBossElevator {\r\n};\r\n\r\ndclass DistributedCJElevator : DistributedBossElevator {\r\n};\r\n\r\ndclass DistributedBBElevator : DistributedBossElevator {\r\n};\r\n\r\ndclass DistributedBoardingParty : DistributedObject {\r\n  postGroupInfo(uint32 leaderId, uint32 memberList[], uint32 inviteeList[], uint32 kickedList[]) broadcast;\r\n  informDestinationInfo(uint8 offset) clsend airecv;\r\n  postDestinationInfo(uint8 offset) broadcast;\r\n  postInvite(uint32 leaderId, uint32 inviterId) broadcast;\r\n  postInviteCanceled() broadcast;\r\n  postKick(uint32 leaderId) broadcast;\r\n  postKickReject(uint32 leaderId, uint32 inviterId, uint32 inviteeId) broadcast;\r\n  postSizeReject(uint32 leaderId, uint32 inviterId, uint32 inviteeId) broadcast;\r\n  postInviteAccepted(uint32 inviteeId) broadcast;\r\n  postInviteDelcined(uint32 inviteeId) broadcast;\r\n  postInviteNotQualify(uint32 avId, int8 reason, uint32 elevatorId) broadcast;\r\n  postAlreadyInGroup() broadcast;\r\n  postGroupDissolve(uint32 quitterId, uint32 leaderId, uint32 memberList[], uint8 kick) broadcast;\r\n  postMessageAcceptanceFailed(uint32 inviteeId, int8 reason) broadcast;\r\n  postGroupAlreadyFull() broadcast;\r\n  postSomethingMissing() broadcast;\r\n  postRejectBoard(uint32 elevatorId, int8 reason, uint32 avatarsFailingRequirements[], uint32 avatarsInBattle[]) broadcast;\r\n  postRejectGoto(uint32 elevatorId, int8 reason, uint32 avatarsFailingRequirements[], uint32 avatarsInBattle[]) broadcast;\r\n  postMessageInvited(uint32 inviteeId, uint32 inviterId) broadcast;\r\n  postMessageInvitationFailed(uint32 inviterId) broadcast;\r\n  acceptGoToFirstTime(uint32 elevatorId) broadcast;\r\n  acceptGoToSecondTime(uint32 elevatorId) broadcast;\r\n  rejectGoToRequest(uint32 elevatorId, int8 reason, uint32 avatarsFailingRequirements[], uint32 avatarsInBattle[]) broadcast;\r\n  requestInvite(uint32 inviteeId) airecv clsend;\r\n  requestCancelInvite(uint32 inviteeId) airecv clsend;\r\n  requestAcceptInvite(uint32 leaderId, uint32 inviterId) airecv clsend;\r\n  requestRejectInvite(uint32 leaderId, uint32 inviterId) airecv clsend;\r\n  requestKick(uint32 kickId) airecv clsend;\r\n  requestLeave(uint32 place) airecv clsend;\r\n  requestBoard(uint32 elevatorId) airecv clsend;\r\n  requestGoToFirstTime(uint32 elevatorId) airecv clsend;\r\n  requestGoToSecondTime(uint32 elevatorId) airecv clsend;\r\n  setElevatorIdList(uint32 elevatorIdList[]) required broadcast ram;\r\n  setGroupSize(uint8 groupSize) required broadcast ram;\r\n};\r\n\r\ndclass DistributedTutorialInterior : DistributedObject {\r\n  setZoneIdAndBlock(uint32 zoneId, uint16 block) required broadcast ram;\r\n  setTutorialNpcId(uint32 npcId) required broadcast ram;\r\n};\r\n\r\ndclass DistributedBankMgr : DistributedObject {\r\n  transferMoney(int16 amount) airecv clsend;\r\n};\r\n\r\ndclass DistributedMailbox : DistributedObject {\r\n  setHouseId(uint32 houseId) required broadcast ram;\r\n  setHousePos(uint8 housePosInd) required broadcast ram;\r\n  setName(string name) required broadcast ram;\r\n  setFullIndicator(uint8 full) broadcast ram;\r\n  avatarEnter() airecv clsend;\r\n  avatarExit() airecv clsend;\r\n  freeAvatar();\r\n  setMovie(uint8 mode, uint32 avId) broadcast ram;\r\n  acceptItemMessage(uint16 todo0, blob todo1, uint8 todo2, int32 todo3) airecv clsend;\r\n  acceptItemResponse(uint16 context, int8 retcode);\r\n  discardItemMessage(uint16 todo0, blob todo1, uint8 todo2, int32 todo3) airecv clsend;\r\n  discardItemResponse(uint16 context, int8 retcode);\r\n  acceptInviteMessage(uint16 todo0, uint64 todo1) airecv clsend;\r\n  rejectInviteMessage(uint16 todo0, uint64 todo1) airecv clsend;\r\n  markInviteReadButNotReplied(uint64 todo0) airecv clsend;\r\n};\r\n\r\ndclass DistributedFurnitureManager : DistributedObject {\r\n  setOwnerId(uint32 ownerId) required broadcast ram;\r\n  setOwnerName(string ownerName) required broadcast ram;\r\n  setInteriorId(uint32 interiorId) required broadcast ram;\r\n  setAtticItems(blob atticItems) required broadcast ram;\r\n  setAtticWallpaper(blob atticWallpaper) required broadcast ram;\r\n  setAtticWindows(blob atticWindows) required broadcast ram;\r\n  setDeletedItems(blob deletedItems) required broadcast ram;\r\n  suggestDirector(uint32 directorId) airecv clsend;\r\n  setDirector(uint32 directorId) broadcast ram;\r\n  avatarEnter() airecv clsend;\r\n  avatarExit() airecv clsend;\r\n  moveItemToAtticMessage(uint32 doId, uint16 context) airecv clsend;\r\n  moveItemToAtticResponse(int8 retval, uint16 context);\r\n  moveItemFromAtticMessage(uint16 index, int16/10 x, int16/10 y, int16/100 z, int16/10 h, int16/10 p, int16/10 r, uint16 context) airecv clsend;\r\n  moveItemFromAtticResponse(int8 retval, uint32 doId, uint16 context);\r\n  deleteItemFromAtticMessage(blob item, uint16 index, uint16 context) airecv clsend;\r\n  deleteItemFromAtticResponse(int8 retval, uint16 context);\r\n  deleteItemFromRoomMessage(blob item, uint32 doId, uint16 context) airecv clsend;\r\n  deleteItemFromRoomResponse(int8 retval, uint16 context);\r\n  moveWallpaperFromAtticMessage(uint16 index, uint8 room, uint16 context) airecv clsend;\r\n  moveWallpaperFromAtticResponse(int8 retval, uint16 context);\r\n  deleteWallpaperFromAtticMessage(blob item, uint16 index, uint16 context) airecv clsend;\r\n  deleteWallpaperFromAtticResponse(int8 retval, uint16 context);\r\n  moveWindowToAtticMessage(uint8 slot, uint16 context) airecv clsend;\r\n  moveWindowToAtticResponse(int8 retval, uint16 context);\r\n  moveWindowFromAtticMessage(uint16 index, uint8 slot, uint16 context) airecv clsend;\r\n  moveWindowFromAtticResponse(int8 retval, uint16 context);\r\n  moveWindowMessage(uint8 fromSlot, uint8 toSlot, uint16 context) airecv clsend;\r\n  moveWindowResponse(int8 retval, uint16 context);\r\n  deleteWindowFromAtticMessage(blob item, uint16 index, uint16 context) airecv clsend;\r\n  deleteWindowFromAtticResponse(int8 retval, uint16 context);\r\n  recoverDeletedItemMessage(blob item, uint16 index, uint16 context) airecv clsend;\r\n  recoverDeletedItemResponse(int8 retval, uint16 context);\r\n};\r\n\r\ndclass DistributedFurnitureItem : DistributedSmoothNode {\r\n  setItem(uint32 furnitureMgrId, blob item) required broadcast ram;\r\n  requestPosHpr(uint8 final, int16/10 x, int16/10 y, int16/100 z, int16/10 h, int16/10 p, int16/10 r, int16 t) airecv clsend;\r\n  setMode(uint8 mdoe, uint32 avId) required broadcast ram;\r\n};\r\n\r\ndclass DistributedBank : DistributedFurnitureItem {\r\n  avatarEnter() airecv clsend;\r\n  freeAvatar();\r\n  setMovie(uint8 mode, uint32 avId, int16 timestamp) broadcast ram;\r\n  transferMoney(int16 amount) airecv clsend;\r\n};\r\n\r\ndclass DistributedCloset : DistributedFurnitureItem {\r\n  setOwnerId(uint32 avId) required broadcast ram;\r\n  enterAvatar() airecv clsend;\r\n  freeAvatar();\r\n  removeItem(blob trashItem, uint8 t_or_b) airecv clsend;\r\n  setDNA(blob dnaString, int8 finished, uint8 whichItems) airecv clsend;\r\n  setState(uint8 mode, uint32 avId, uint32 ownerId, string gender, uint8 topList[], uint8 botList[]) broadcast ram;\r\n  setMovie(uint8 mode, uint32 avId, int16 timestamp) broadcast ram;\r\n  resetItemLists() broadcast ram;\r\n  setCustomerDNA(uint32 avId, blob dnaString) broadcast ram;\r\n};\r\n\r\ndclass DistributedTrunk : DistributedCloset {\r\n  setState(uint8 mode, uint32 avId, uint32 ownerId, string gender, uint8 hatList[], uint8 glassesList[], uint8 backpackList[], uint8 shoesList[]) broadcast ram;\r\n  removeItem(uint8 todo0, uint8 todo1, uint8 todo2, uint8 todo3) airecv clsend;\r\n  setDNA(uint8 todo0, uint8 todo1, uint8 todo2, uint8 todo3, uint8 todo4, uint8 todo5, uint8 todo6, uint8 todo7, uint8 todo8, uint8 todo9, uint8 todo10, uint8 todo11, int8 todo12, uint8 todo13) airecv clsend;\r\n  setCustomerDNA(uint32 avId, uint8 hatIdx, uint8 hatTexture, uint8 hatColor, uint8 glassesIdx, uint8 glassesTexture, uint8 glassesColor, uint8 backpackIdx, uint8 backpackTexture, uint8 backpackColor, uint8 shoesIdx, uint8 shoesTexture, uint8 shoesColor, uint8 which) broadcast ram;\r\n};\r\n\r\ndclass DistributedPhone : DistributedFurnitureItem {\r\n  setInitialScale(uint8/170 sx, uint8/170 sy, uint8/170 sz) required broadcast ram;\r\n  setNewScale(uint8/170 sx, uint8/170 sy, uint8/170 sz) airecv clsend;\r\n  avatarEnter() airecv clsend;\r\n  avatarExit() airecv clsend;\r\n  freeAvatar();\r\n  setLimits(uint16 numHouseItems);\r\n  setMovie(uint8 mode, uint32 avId, int32 timestamp) broadcast ram;\r\n  requestPurchaseMessage(uint16 context, blob data, int32 optional) airecv clsend;\r\n  requestPurchaseResponse(uint16 context, int8 retcode);\r\n  requestGiftPurchaseMessage(uint16 context, uint32 targetDoID, blob data, int32 optional) airecv clsend;\r\n  requestGiftPurchaseResponse(uint16 context, int8 retcode);\r\n};\r\n\r\ndclass DistributedFireworkShow : DistributedObject {\r\n  startShow(uint8 eventId, uint8 style, uint8 songId, int16 timestamp) broadcast ram;\r\n  requestFirework(int16/10 x, int16/10 y, int16/100 z, uint8 style, uint8 color1, uint8 color2) airecv clsend;\r\n  shootFirework(int16/10 x, int16/10 y, int16/100 z, uint8 style, uint8 color1, uint8 color2) broadcast;\r\n};\r\n\r\ndclass DistributedFireworksCannon : DistributedFireworkShow {\r\n  avatarEnter() airecv clsend;\r\n  avatarExit() airecv clsend;\r\n  freeAvatar();\r\n  setMovie(uint8 mode, uint32 avId, int16 timestamp) broadcast ram;\r\n  setPosition(int16/10 x, int16/10 y, int16/10 z) required broadcast ram;\r\n};\r\n\r\ndclass LobbyManager : DistributedObject {\r\n};\r\n\r\ndclass DistributedFactory : DistributedLevel {\r\n  setFactoryId(uint16 id) required broadcast ram;\r\n  setSuits(uint32 suitIds[], uint32 reserveSuitIds[]) broadcast ram;\r\n  setForemanConfronted(uint32 avId) broadcast ram;\r\n  setDefeated() broadcast ram;\r\n};\r\n\r\ndclass DistributedLawOffice : DistributedObject {\r\n  setLawOfficeId(uint16 id) required broadcast ram;\r\n  startSignal() broadcast ram;\r\n  readyForNextFloor() airecv clsend;\r\n};\r\n\r\ndclass DistributedLawOfficeFloor : DistributedLevel {\r\n  setLawOfficeId(uint16 id) required broadcast ram;\r\n  setSuits(uint32 suitIds[], uint32 reserveSuitIds[]) broadcast ram;\r\n  readyForNextFloor() airecv clsend;\r\n  setForemanConfronted(uint32 avId) broadcast ram;\r\n  setDefeated() broadcast ram;\r\n};\r\n\r\ndclass DistributedMint : DistributedObject {\r\n  setZoneId(uint32 zoneId) required broadcast ram;\r\n  setMintId(uint16 id) required broadcast ram;\r\n  setFloorNum(uint8 num) required broadcast ram;\r\n  setRoomDoIds(uint32 roomDoIds[]) broadcast ram;\r\n};\r\n\r\ndclass DistributedMintRoom : DistributedLevel {\r\n  setMintId(uint16 mintId) required broadcast ram;\r\n  setRoomId(uint16 roomId) required broadcast ram;\r\n  setRoomNum(uint8 num) required broadcast ram;\r\n  setSuits(uint32 suitIds[], uint32 reserveSuitIds[]) broadcast ram;\r\n  setBossConfronted(uint32 avId) broadcast ram;\r\n  setDefeated() broadcast ram;\r\n};\r\n\r\ndclass DistributedStage : DistributedObject {\r\n  setZoneId(uint32 zoneId) required broadcast ram;\r\n  setStageId(uint16 id) required broadcast ram;\r\n  setLayoutIndex(uint16 layoutIndex) required broadcast ram;\r\n  setFloorNum(uint8 num) required broadcast ram;\r\n  setRoomDoIds(uint32 roomDoIds[]) broadcast ram;\r\n  setStageZone(uint32 zoneId) broadcast ram;\r\n  elevatorAlert(uint32 avId) broadcast ram;\r\n};\r\n\r\ndclass DistributedStageRoom : DistributedLevel {\r\n  setStageId(uint16 stageId) required broadcast ram;\r\n  setRoomId(uint16 roomId) required broadcast ram;\r\n  setRoomNum(uint8 num) required broadcast ram;\r\n  setSuits(uint32 suitIds[], uint32 reserveSuitIds[]) broadcast ram;\r\n  setBossConfronted(uint32 avId) broadcast ram;\r\n  setDefeated() broadcast ram;\r\n};\r\n\r\ndclass DistributedInGameEditor : DistributedObject {\r\n  setEditorAvId(uint32) required broadcast ram;\r\n  setEditUsername(blob) required broadcast ram;\r\n  setLevelDoId(uint32) required broadcast ram;\r\n  requestCurrentLevelSpec() airecv clsend;\r\n  setSpecSenderDoId(uint32);\r\n  setEdit(uint32, blob, blob, blob) airecv clsend;\r\n  setAttribChange(uint32, blob, blob, blob);\r\n  setFinished() airecv clsend;\r\n};\r\n\r\ndclass DistributedLift : DistributedEntity {\r\n  setStateTransition(uint8 toState, uint8 fromState, uint32 arrivalTimestamp) required broadcast ram;\r\n  setAvatarEnter() airecv clsend;\r\n  setAvatarLeave() airecv clsend;\r\n};\r\n\r\ndclass DistributedDoorEntity : DistributedEntity {\r\n  setLocksState(uint16 stateBits) required broadcast ram;\r\n  setDoorState(uint8 stateIndex, int32 timeStamp) required broadcast ram;\r\n  requestOpen() airecv clsend;\r\n};\r\n\r\ndclass DistributedSwitch : DistributedInteractiveEntity {\r\n};\r\n\r\ndclass DistributedButton : DistributedSwitch {\r\n};\r\n\r\ndclass DistributedTrigger : DistributedSwitch {\r\n};\r\n\r\ndclass DistributedCrushableEntity : DistributedEntity {\r\n  setPosition(int16/10 x, int16/10 y, int16/10 z) broadcast ram;\r\n  setCrushed(uint32 crusherId, uint8 axis) broadcast ram;\r\n};\r\n\r\ndclass DistributedCrusherEntity : DistributedEntity {\r\n};\r\n\r\ndclass DistributedElevatorMarker : DistributedEntity {\r\n};\r\n\r\ndclass DistributedStomper : DistributedCrusherEntity {\r\n  setMovie(uint8 mode, int16 timestamp, uint32 crushedList[]) broadcast ram;\r\n};\r\n\r\ndclass DistributedStomperPair : DistributedEntity {\r\n  setChildren(uint32 doIds[]) broadcast ram;\r\n  setSquash() airecv clsend;\r\n};\r\n\r\ndclass DistributedBarrelBase : DistributedEntity {\r\n  requestGrab() airecv clsend;\r\n  setGrab(uint32 avId) broadcast ram;\r\n  setReject() broadcast;\r\n};\r\n\r\ndclass DistributedGagBarrel : DistributedBarrelBase {\r\n};\r\n\r\ndclass DistributedBeanBarrel : DistributedBarrelBase {\r\n};\r\n\r\ndclass DistributedHealBarrel : DistributedBarrelBase {\r\n};\r\n\r\ndclass DistributedGrid : DistributedEntity {\r\n};\r\n\r\ndclass ActiveCell : DistributedEntity {\r\n  setState(uint8 state, uint32 objId) broadcast ram;\r\n};\r\n\r\ndclass DirectionalCell : ActiveCell {\r\n};\r\n\r\ndclass CrusherCell : ActiveCell {\r\n};\r\n\r\ndclass DistributedCrate : DistributedCrushableEntity {\r\n  requestPush(uint8 side) airecv clsend;\r\n  setReject();\r\n  setAccept() broadcast;\r\n  setMoveTo(uint32 avId, int16/10 x0, int16/10 y0, int16/10 z0, int16/10 x1, int16/10 y1, int16/10 z1) broadcast ram;\r\n  setDone() airecv clsend;\r\n};\r\n\r\ndclass DistributedSinkingPlatform : DistributedEntity {\r\n  setOnOff(uint8 on, uint32 timestamp) airecv clsend;\r\n  setSinkMode(uint32 avId, uint8 mode, uint32 ts) broadcast ram;\r\n};\r\n\r\ndclass DistributedGoon : DistributedCrushableEntity {\r\n  requestBattle(int16/10 pauseTime) airecv clsend;\r\n  requestStunned(int16/10 pauseTime) airecv clsend;\r\n  requestResync() airecv clsend;\r\n  setParameterize(int16/10 x, int16/10 y, int16/10 z, uint32 pathIndex) airecv clsend;\r\n  setMovie(uint8 mode, uint32 avId, int32/10 pauseTime, int16 timestamp) broadcast ram;\r\n};\r\n\r\ndclass DistributedGridGoon : DistributedGoon {\r\n  setPathPts(int16/10 xi, int16/10 yi, int16/10 zi, int16/10 xf, int16/10 yf, int16/10 zf) broadcast ram;\r\n};\r\n\r\ndclass BattleBlocker : DistributedEntity {\r\n  setActive(uint8 active) required broadcast ram;\r\n  setSuits(uint32 suitIds[]) broadcast ram;\r\n  setBattle(uint32 battleId) broadcast ram;\r\n  setBattleFinished() broadcast ram;\r\n};\r\n\r\ndclass DistributedLaserField : BattleBlocker {\r\n  setGrid(uint8 gridNumX, uint8 gridNumY) required broadcast ram;\r\n  setField(uint8 fieldData[]) required broadcast ram;\r\n  setSuccess(uint8 success) broadcast ram;\r\n  hit(int8 hitX, int8 hitY, int8 oldX, int8 oldY) airecv clsend;\r\n  trapFire() airecv clsend;\r\n  setActiveLF(uint8 active) broadcast ram;\r\n  hideSuit(uint32 suitIdarray[]) broadcast ram;\r\n  showSuit(uint32 suitIdarray[]) broadcast ram;\r\n  setGridGame(string gameName) broadcast ram;\r\n};\r\n\r\nstruct golfGreenGameBoardData {\r\n  uint8 posX;\r\n  uint8 posZ;\r\n  uint8 typeIndex;\r\n};\r\n\r\nstruct golfGreenGameScoreData {\r\n  uint32 avId;\r\n  uint8 score;\r\n};\r\n\r\ndclass DistributedGolfGreenGame : BattleBlocker {\r\n  requestJoin() airecv clsend;\r\n  leaveGame() airecv clsend;\r\n  acceptJoin(uint16 time, int32 timeStamp, uint32 avIds[]) broadcast ram;\r\n  requestBoard(uint8 boardVerify) airecv clsend;\r\n  startBoard(golfGreenGameBoardData board[], uint8 attackPattern[]);\r\n  signalDone(uint8 success) broadcast ram;\r\n  boardCleared(uint32 avId);\r\n  scoreData(uint8 total, uint8 closed, golfGreenGameScoreData scoreList[]) broadcast ram;\r\n  informGag(uint8 track, uint8 level);\r\n  helpOthers(uint32 avId) broadcast;\r\n  setTimerStart(uint16 time, int32 timeStamp) broadcast ram;\r\n};\r\n\r\ndclass DistributedSecurityCamera : DistributedEntity {\r\n  trapFire() airecv clsend;\r\n  setTarget(uint8 targetHash) broadcast ram;\r\n};\r\n\r\ndclass DistributedMover : DistributedEntity {\r\n  startMove(int16 timeStamp) broadcast ram;\r\n};\r\n\r\ntypedef uint16/10000 PetTrait;\r\n\r\ndclass DistributedPet : DistributedSmoothNode {\r\n  setOwnerId(uint32) required broadcast db;\r\n  setPetName(string) required broadcast db;\r\n  setTraitSeed(uint32) required broadcast db;\r\n  setSafeZone(uint32) required broadcast db;\r\n  setForgetfulness(PetTrait) required broadcast db;\r\n  setBoredomThreshold(PetTrait) required broadcast db;\r\n  setRestlessnessThreshold(PetTrait) required broadcast db;\r\n  setPlayfulnessThreshold(PetTrait) required broadcast db;\r\n  setLonelinessThreshold(PetTrait) required broadcast db;\r\n  setSadnessThreshold(PetTrait) required broadcast db;\r\n  setFatigueThreshold(PetTrait) required broadcast db;\r\n  setHungerThreshold(PetTrait) required broadcast db;\r\n  setConfusionThreshold(PetTrait) required broadcast db;\r\n  setExcitementThreshold(PetTrait) required broadcast db;\r\n  setAngerThreshold(PetTrait) required broadcast db;\r\n  setSurpriseThreshold(PetTrait) required broadcast db;\r\n  setAffectionThreshold(PetTrait) required broadcast db;\r\n  setHead(int8(-1 - 1)) required broadcast db; // Supposed to be -1 - 0, but minification causes this to become -1-0, which is a parse problem.\r\n  setEars(int8(-1 - 4)) required broadcast db;\r\n  setNose(int8(-1 - 3)) required broadcast db;\r\n  setTail(int8(-1 - 6)) required broadcast db;\r\n  setBodyTexture(int8(0-6)) required broadcast db;\r\n  setColor(int8(0-25)) required broadcast db;\r\n  setColorScale(int8(0-8)) required broadcast db;\r\n  setEyeColor(int8(0-5)) required broadcast db;\r\n  setGender(int8(0-1)) required broadcast db;\r\n  setLastSeenTimestamp(uint32) required broadcast db;\r\n  setBoredom(uint16/1000(0-1)) required broadcast db;\r\n  setRestlessness(uint16/1000(0-1)) required broadcast db;\r\n  setPlayfulness(uint16/1000(0-1)) required broadcast db;\r\n  setLoneliness(uint16/1000(0-1)) required broadcast db;\r\n  setSadness(uint16/1000(0-1)) required broadcast db;\r\n  setAffection(uint16/1000(0-1)) required broadcast db;\r\n  setHunger(uint16/1000(0-1)) required broadcast db;\r\n  setConfusion(uint16/1000(0-1)) required broadcast db;\r\n  setExcitement(uint16/1000(0-1)) required broadcast db;\r\n  setFatigue(uint16/1000(0-1)) required broadcast db;\r\n  setAnger(uint16/1000(0-1)) required broadcast db;\r\n  setSurprise(uint16/1000(0-1)) required broadcast db;\r\n  setMood : setBoredom, setRestlessness, setPlayfulness, setLoneliness, setSadness, setAffection, setHunger, setConfusion, setExcitement, setFatigue, setAnger, setSurprise;\r\n  teleportIn(int16) broadcast ownsend;\r\n  teleportOut(int16) broadcast ownsend;\r\n  setTrickAptitudes(uint16/10000(0-1) []) required broadcast db;\r\n  doTrick(uint8, int16) broadcast ram;\r\n  avatarInteract(uint32);\r\n  setMovie(uint8, uint32, int16) broadcast ram;\r\n  freeAvatar();\r\n};\r\n\r\ndclass DistributedPetProxy : DistributedPet {\r\n  setDominantMood(string dominantMood) broadcast ram;\r\n};\r\n\r\ndclass DistributedBlackCatMgr : DistributedObject {\r\n  doBlackCatTransformation(uint32 avId) broadcast;\r\n  requestBlackCatTransformation() airecv clsend;\r\n};\r\n\r\ndclass DistributedPolarBearMgr : DistributedObject {\r\n  doPolarBearTransformation(uint32 avId) broadcast;\r\n  requestPolarBearTransformation() airecv clsend;\r\n};\r\n\r\ndclass DistributedPolarPlaceEffectMgr : DistributedObject {\r\n  addPolarPlaceEffect() airecv clsend;\r\n};\r\n\r\ndclass DistributedGreenToonEffectMgr : DistributedObject {\r\n  addGreenToonEffect() airecv clsend;\r\n};\r\n\r\ndclass DistributedResistanceEmoteMgr : DistributedObject {\r\n  addResistanceEmote() airecv clsend;\r\n};\r\n\r\ndclass DistributedScavengerHuntTarget : DistributedObject {\r\n  attemptScavengerHunt() airecv clsend;\r\n};\r\n\r\ndclass DistributedTrickOrTreatTarget : DistributedScavengerHuntTarget {\r\n};\r\n\r\ndclass DistributedWinterCarolingTarget : DistributedScavengerHuntTarget {\r\n};\r\n\r\ndclass DistributedDataStoreManager : DistributedObject {\r\n  startStore(uint8 todo0);\r\n  stopStore(uint8 todo0);\r\n  queryStore(uint8 todo0, string todo1);\r\n  receiveResults(uint8 todo0, string todo1);\r\n  deleteBackupStores();\r\n};\r\n\r\ndclass DistributedVehicle : DistributedSmoothNode {\r\n  setOwner(uint32 avId) required broadcast ram;\r\n  setState(char state, uint32 avId) broadcast ram;\r\n  setBodyType(int8 bodyType) required broadcast ram;\r\n  setBodyColor(int8 bodyColor) required broadcast ram;\r\n  setAccessoryColor(int8 accColor) required broadcast ram;\r\n  setEngineBlockType(int8 ebType) required broadcast ram;\r\n  setSpoilerType(int8 spType) required broadcast ram;\r\n  setFrontWheelWellType(int8 fwwType) required broadcast ram;\r\n  setBackWheelWellType(int8 bwwType) required broadcast ram;\r\n  setRimType(int8 rimsType) required broadcast ram;\r\n  setDecalType(int8 decalType) required broadcast ram;\r\n  requestControl() airecv clsend;\r\n  requestParked() airecv clsend;\r\n  setInput(int8 on) broadcast ram;\r\n};\r\n\r\nstruct avatarAndKart {\r\n  uint32 avId;\r\n  uint32 kartId;\r\n};\r\n\r\ndclass DistributedRace : DistributedObject {\r\n  setZoneId(uint32 zoneId) required broadcast ram;\r\n  setTrackId(uint16 id) required broadcast ram;\r\n  setRaceType(uint16 raceType) required broadcast ram;\r\n  setCircuitLoop(uint16 circuitLoop[]) required broadcast ram;\r\n  setAvatars(uint32 avIds[]) required broadcast ram;\r\n  setStartingPlaces(uint8 startList[]) required broadcast ram;\r\n  setLapCount(uint8 lapCount) broadcast required ram;\r\n  waitingForJoin() broadcast ram;\r\n  setEnteredRacers(avatarAndKart avAndKarts[]) broadcast ram;\r\n  prepForRace() broadcast ram;\r\n  startTutorial() broadcast ram;\r\n  startRace(int16 startTime) broadcast ram;\r\n  goToSpeedway(uint32 avIds[], uint8 reason) broadcast ram;\r\n  genGag(uint8 slot, uint16 number, uint8 type) broadcast ram;\r\n  dropAnvilOn(uint32 ownerId, uint32 avId, int16 timeStamp) broadcast ram;\r\n  shootPiejectile(uint32 sourceId, uint32 targetId, uint8 type) broadcast ram;\r\n  racerDisconnected(uint32 avId) broadcast ram;\r\n  setPlace(uint32 avId, uint32/1000 totalTime, uint8 place, uint32 entryFee, uint8 qualify, uint32 winnings, uint32 bonus, uint32 trophies[], uint16 circuitPoints[], uint32/1000 circuitTime) broadcast ram;\r\n  setCircuitPlace(uint32 avId, uint8 place, uint32 entryFee, uint32 winnings, uint32 bonus, uint32 trophies[]) broadcast ram;\r\n  endCircuitRace() broadcast ram;\r\n  setRaceZone(uint32 zoneId, uint32 trackId);\r\n  hasGag(uint8 slot, uint8 type, uint8 index) broadcast airecv clsend;\r\n  racerLeft(uint32 avId) clsend airecv broadcast ram;\r\n  heresMyT(uint32 avId, int8 avNumLaps, uint16/65535 avTime, int16 timestamp) clsend airecv broadcast;\r\n  requestThrow(int32/1000 x, int32/1000 y, int32/1000 z) clsend airecv;\r\n  requestKart() clsend airecv;\r\n};\r\n\r\ndclass DistributedGag : DistributedObject {\r\n  setInitTime(int16 initTime) required broadcast ram;\r\n  setActivateTime(int16 actTime) required broadcast ram;\r\n  setPos(int32/1000 x, int32/1000 y, int32/1000 z) required broadcast ram;\r\n  setRace(uint32 doId) required broadcast ram;\r\n  setOwnerId(uint32 ownerId) required broadcast ram;\r\n  setType(uint8 type) required broadcast ram;\r\n  hitSomebody(uint32 avId, int16 timeStamp) broadcast clsend airecv;\r\n};\r\n\r\ndclass DistributedProjectile : DistributedObject {\r\n  setInitTime(int16 todo0) required broadcast ram;\r\n  setPos(int32/1000 pos, int32/1000, int32/1000) required broadcast ram;\r\n  setRace(uint32 todo0) required broadcast ram;\r\n  setOwnerId(uint32 todo0) required broadcast ram;\r\n  setType(uint8 todo0) required broadcast ram;\r\n  hitSomebody(uint32 todo0, int16 todo1) broadcast clsend airecv;\r\n};\r\n\r\ndclass DistributedKartPad : DistributedObject {\r\n  setArea(uint32 area) required broadcast ram;\r\n};\r\n\r\ndclass DistributedRacePad : DistributedKartPad {\r\n  setState(string state, int16 timestamp) required broadcast ram;\r\n  setRaceZone(uint32 zoneId);\r\n  setTrackInfo(uint16 trackInfo[]) required broadcast ram;\r\n};\r\n\r\ndclass DistributedViewPad : DistributedKartPad {\r\n  setLastEntered(int16 timeStamp) required broadcast ram;\r\n};\r\n\r\ndclass DistributedStartingBlock : DistributedObject {\r\n  setPadDoId(uint32 padDoId) required broadcast ram;\r\n  setPosHpr(int16/10 x, int16/10 y, int16/10 z, int16/10 h, int16/10 p, int16/10 r) required broadcast ram;\r\n  setPadLocationId(uint8 padLocationId) required broadcast ram;\r\n  requestEnter(uint8 isPaid) airecv clsend;\r\n  rejectEnter(uint8 errCode);\r\n  requestExit() airecv clsend;\r\n  setOccupied(uint32 avId) broadcast ram;\r\n  setMovie(uint8 mode) broadcast ram;\r\n  movieFinished() airecv clsend;\r\n};\r\n\r\ndclass DistributedViewingBlock : DistributedStartingBlock {\r\n};\r\n\r\ndclass DistributedLeaderBoard : DistributedObject {\r\n  setPosHpr(int16/10 x, int16/10 y, int16/10 z, int16/10 h, int16/10 p, int16/10 r) required broadcast ram;\r\n  setDisplay(blob pData) broadcast ram;\r\n};\r\n\r\ndclass DistributedDeliveryManager : DistributedObject {\r\n  hello(string todo0) clsend;\r\n  rejectHello(string message);\r\n  helloResponse(string message);\r\n  getName(uint32 todo0);\r\n  receiveRejectGetName(string todo0);\r\n  receiveAcceptGetName(string todo0);\r\n  addName(uint32 todo0, string todo1);\r\n  receiveRejectAddName(uint32 todo0);\r\n  receiveAcceptAddName(uint32 todo0);\r\n  addGift(uint32 todo0, blob todo1, uint32 todo2, uint32 todo3, uint32 todo4);\r\n  receiveRejectAddGift(uint32 todo0);\r\n  receiveAcceptAddGift(uint32 todo0, uint32 todo1, uint32 todo2, uint32 todo3);\r\n  deliverGifts(uint32 todo0, uint32 todo1);\r\n  receiveAcceptDeliverGifts(uint32 todo0, string todo1);\r\n  receiveRejectDeliverGifts(uint32 todo0, string todo1);\r\n  receiveRequestPayForGift(blob todo0, uint32 todo1, uint32 todo2) airecv clsend;\r\n  receiveRequestPurchaseGift(blob todo0, uint32 todo1, uint32 todo2, uint32 todo3) airecv;\r\n  receiveAcceptPurchaseGift(uint32 todo0, uint32 todo1, int16 todo2);\r\n  receiveRejectPurchaseGift(uint32 todo0, uint32 todo1, int16 todo2, uint16 todo3);\r\n  heartbeat() airecv;\r\n  giveBeanBonus(uint32 todo0, uint16 todo1);\r\n  requestAck() clsend;\r\n  returnAck();\r\n  givePartyRefund(uint32 todo0, uint32 todo1, uint64 todo2, int8 todo3, uint16 todo4);\r\n};\r\n\r\ndclass DistributedLawbotBoss : DistributedBossCog {\r\n  setState(string state) broadcast ram;\r\n  setBossDamage(uint16 bossDamage, uint8 recoverRate, int16 timestamp) broadcast ram;\r\n  touchWitnessStand() airecv clsend;\r\n  hitBoss(uint8 bossDamage) airecv clsend;\r\n  healBoss(uint8 bossHeal) airecv clsend;\r\n  hitToon(uint32 toonId) airecv clsend;\r\n  hitDefensePan() airecv clsend;\r\n  hitProsecutionPan() airecv clsend;\r\n  hitChair(uint8 chairNum, uint8 index) airecv clsend;\r\n  setLawyerIds(uint32 lawyerIds[]) broadcast ram;\r\n  setTaunt(int8 tauntIndex, int8 extraInfo) broadcast;\r\n  toonGotHealed(uint32 toonId) broadcast;\r\n  enteredBonusState() broadcast;\r\n  setBattleDifficulty(uint8 diff) broadcast ram;\r\n};\r\n\r\ndclass DistributedLawbotBossSuit : DistributedSuitBase {\r\n  setPosHpr(int16/10 posHpr, int16/10, int16/10, int16/10, int16/10, int16/10) required broadcast ram;\r\n  doAttack(int16/10 x1, int16/10 y1, int16/10 z1, int16/10 x2, int16/10 y2, int16/10 z2) broadcast;\r\n  doProsecute() broadcast;\r\n  hitByToon() airecv clsend;\r\n  doStun() broadcast;\r\n};\r\n\r\ndclass DistributedLawbotBossGavel : DistributedObject {\r\n  setBossCogId(uint32 bossCogId) required broadcast ram;\r\n  setIndex(uint8 index) required broadcast ram;\r\n  setState(char state) broadcast ram;\r\n};\r\n\r\ndclass DistributedLawbotCannon : DistributedObject {\r\n  setBossCogId(uint32 bossCogId) required broadcast ram;\r\n  setIndex(uint8 index) required broadcast ram;\r\n  setPosHpr(int16/10 x, int16/10 y, int16/10 z, int16/10 h, int16/10 p, int16/10 r) required broadcast ram;\r\n  requestEnter() airecv clsend;\r\n  setMovie(int8 mode, uint32 avId, uint8 extraInfo) broadcast;\r\n  setCannonPosition(int16/10 rotation, int16/10 angle) airecv clsend;\r\n  updateCannonPosition(uint32 avId, int16/10 zRot, int16/10 angle) broadcast;\r\n  setCannonLit(int16/10 rotation, int16/10 angle) airecv clsend;\r\n  setCannonWillFire(uint32 avId, int16/10 fireTime, int16/10 zRot, int16/10 angle, int16 timestamp) broadcast;\r\n  setLanded() airecv clsend;\r\n  requestLeave() airecv clsend;\r\n};\r\n\r\ndclass DistributedLawbotChair : DistributedObject {\r\n  setBossCogId(uint32 bossCogId) required broadcast ram;\r\n  setIndex(uint8 index) required broadcast ram;\r\n  setState(char state) broadcast ram;\r\n  showCogJurorFlying() broadcast;\r\n  setToonJurorIndex(int8 newVal) broadcast ram;\r\n};\r\n\r\ndclass DistributedLawnDecor : DistributedNode {\r\n  setPlot(int8 plot) required broadcast ram;\r\n  setHeading(int16/10 h) required broadcast ram;\r\n  setPosition(int16/10 x, int16/10 y, int16/10 z) required broadcast ram;\r\n  setOwnerIndex(int8 index) required broadcast ram;\r\n  plotEntered() airecv clsend;\r\n  removeItem() airecv clsend;\r\n  setMovie(uint8 mode, uint32 avId) broadcast ram;\r\n  movieDone() airecv clsend;\r\n  interactionDenied(uint32 avId) broadcast ram;\r\n};\r\n\r\ndclass DistributedGardenPlot : DistributedLawnDecor {\r\n  plantFlower(uint8 todo0, uint8 todo1) airecv clsend;\r\n  plantGagTree(uint8 todo0, uint8 todo1) airecv clsend;\r\n  plantStatuary(uint8 todo0) airecv clsend;\r\n  plantToonStatuary(uint8 todo0, uint16 todo1) airecv clsend;\r\n  plantNothing(uint8 todo0) airecv clsend;\r\n};\r\n\r\ndclass DistributedGardenBox : DistributedLawnDecor {\r\n  setTypeIndex(uint8 typeIndex) required broadcast ram;\r\n};\r\n\r\ndclass DistributedStatuary : DistributedLawnDecor {\r\n  setTypeIndex(uint8 typeIndex) required broadcast ram;\r\n  setWaterLevel(int8 waterLevel) required broadcast ram;\r\n  setGrowthLevel(int8 growthLevel) required broadcast ram;\r\n};\r\n\r\ndclass DistributedToonStatuary : DistributedStatuary {\r\n  setOptional(uint16 optional) required broadcast ram;\r\n};\r\n\r\ndclass DistributedAnimatedStatuary : DistributedStatuary {\r\n};\r\n\r\ndclass DistributedChangingStatuary : DistributedStatuary {\r\n  setGrowthLevel(int8 growthLevel) required broadcast ram;\r\n};\r\n\r\ndclass DistributedPlantBase : DistributedLawnDecor {\r\n  setTypeIndex(uint8 typeIndex) required broadcast ram;\r\n  setWaterLevel(int8 waterLevel) required broadcast ram;\r\n  setGrowthLevel(int8 growthLevel) required broadcast ram;\r\n  waterPlant() airecv clsend;\r\n  waterPlantDone() airecv clsend;\r\n};\r\n\r\ndclass DistributedFlower : DistributedPlantBase {\r\n  setTypeIndex(uint8 typeIndex) required broadcast ram;\r\n  setVariety(uint8 variety) required broadcast ram;\r\n};\r\n\r\ndclass DistributedGagTree : DistributedPlantBase {\r\n  setWilted(int8 wilted) required broadcast ram;\r\n  requestHarvest() airecv clsend;\r\n};\r\n\r\ndclass DistributedTravelGame : DistributedMinigame {\r\n  setTimerStartTime(int16 timestamp) broadcast;\r\n  setAvatarChoice(uint16 votes, uint8 direction) airecv clsend;\r\n  setAvatarVotes(uint32 avId, uint16 votes) broadcast;\r\n  setAvatarChose(uint32 avId) broadcast;\r\n  setServerChoices(int16 votes[], uint8 directions[], uint8 directionToGo, uint8 directionReason) broadcast;\r\n  setMinigames(uint8 switches[], uint8 minigames[]) broadcast;\r\n  setBonuses(uint8 switches[], uint8 beans[]) broadcast;\r\n  setBoardIndex(uint8 boardIndex) required broadcast ram;\r\n};\r\n\r\ndclass DistributedPairingGame : DistributedMinigame {\r\n  setDeckSeed(uint32 deckSeed) required broadcast ram;\r\n  setMaxOpenCards(uint8) broadcast ram;\r\n  openCardRequest(int16 deckOrderIndex, int16 bonusGlowCard) airecv clsend;\r\n  openCardResult(int16 cardToTurnUp, uint32 avId, int16 matchingCard, int8 points, int16 cardsToTurnDown[]) broadcast;\r\n  reportDone() airecv clsend;\r\n  setEveryoneDone() broadcast;\r\n  setSignaling(uint32 avId) clsend broadcast;\r\n};\r\n\r\nstruct golfData {\r\n  int16 frame;\r\n  int32/100000 x;\r\n  int32/100000 y;\r\n  int32/100000 z;\r\n};\r\n\r\nstruct Coord3 {\r\n  int32/100000 x;\r\n  int32/100000 y;\r\n  int32/100000 z;\r\n};\r\n\r\nstruct CommonObjectData {\r\n  uint8 id;\r\n  uint8 type;\r\n  int32/100000 x;\r\n  int32/100000 y;\r\n  int32/100000 z;\r\n  int32/100000 q1;\r\n  int32/100000 q2;\r\n  int32/100000 q3;\r\n  int32/100000 q4;\r\n  int32/100000 aVX;\r\n  int32/100000 aVY;\r\n  int32/100000 aVZ;\r\n  int32/100000 lVX;\r\n  int32/100000 lVY;\r\n  int32/100000 lVZ;\r\n};\r\n\r\ndclass DistributedPhysicsWorld : DistributedObject {\r\n  clientCommonObject(uint8 type, uint8 commonId, Coord3 pos, Coord3 hpr, int32/100 sizeX, int32/100 sizeY, int32/1000 moveDistance) broadcast ram;\r\n  setCommonObjects(CommonObjectData objectData[]) broadcast;\r\n  upSetCommonObjects(CommonObjectData objectData[]) airecv clsend;\r\n};\r\n\r\ndclass DistributedGolfHole : DistributedPhysicsWorld {\r\n  setHoleId(int8 holeId) broadcast ram required;\r\n  setTimingCycleLength(uint32/1000 time) broadcast ram required;\r\n  setAvatarReadyHole() airecv clsend;\r\n  setGolfCourseDoId(uint32 golfCourseDoId) broadcast ram required;\r\n  turnDone() airecv clsend;\r\n  ballInHole() airecv clsend;\r\n  setAvatarTempTee(uint32 avId, uint8 tempTee) clsend broadcast;\r\n  setTempAimHeading(uint32 avId, int32/1000 heading) clsend broadcast;\r\n  setAvatarFinalTee(uint32 avId, uint8 finalTee) broadcast;\r\n  setGolferIds(uint32 avIds[]) broadcast ram required;\r\n  golfersTurn(uint32 avId) broadcast;\r\n  golferChooseTee(uint32 avId) broadcast;\r\n  setAvatarTee(uint8 tee) airecv clsend;\r\n  postSwing(uint32/1000 todo0, int32 todo1, int32/1000 todo2, int32/1000 todo3, int32/1000 todo4, int32/1000 todo5, int32/1000 todo6) airecv clsend;\r\n  postSwingState(uint32/1000 cycleTime, int32 power, int32/1000 bX, int32/1000 bY, int32/1000 bZ, int32/1000 x, int32/1000 y, uint16/100 aimTime, CommonObjectData cod[]) airecv clsend;\r\n  swing(uint32 todo0, int32 todo1, int32/1000 todo2, int32/1000 todo3, int32/1000 todo4, int32/1000 todo5, int32/1000 todo6) broadcast;\r\n  ballMovie2AI(uint32/1000 cycleTime, uint32 avId, golfData recording[], golfData aVRecording[], uint16 ballInHoleFrame, uint16 ballTouchedHoleFrame, uint16 ballFirstTouchedHoleFrame, CommonObjectData COD[]) airecv clsend;\r\n  ballMovie2Client(uint32/1000 cycleTime, uint32 avId, golfData movie[], golfData spinMovie[], uint16 ballInFrame, uint16 ballTouchedHoleFrame, uint16 ballFirstTouchedHoleFrame, CommonObjectData commonObjectData[]) broadcast;\r\n  assignRecordSwing(uint32 avId, uint32/1000 cycleTime, int32 power, int32/1000 x, int32/1000 y, int32/1000 z, int32/1000 dirX, int32/1000 dirY, CommonObjectData commonObjectData[]);\r\n  setBox(int32/1000 todo0, int32/1000 todo1, int32/1000 todo2, int32/1000 todo3, int32/1000 todo4, int32/1000 todo5, int32/1000 todo6, int32/1000 todo7, int32/1000 todo8, int32/1000 todo9, int32/1000 todo10, int32/1000 todo11, int32/1000 todo12) airecv clsend;\r\n  sendBox(int32/1000 pos0, int32/1000 pos1, int32/1000 pos2, int32/1000 quat0, int32/1000 quat1, int32/1000 quat2, int32/1000 quat3, int32/1000 anV0, int32/1000 anV1, int32/1000 anV2, int32/1000 lnV0, int32/1000 lnV1, int32/1000 lnV2) broadcast;\r\n};\r\n\r\ndclass DistributedGolfCourse : DistributedObject {\r\n  setGolferIds(uint32 avIds[]) broadcast ram required;\r\n  setCourseId(int8 courseId) broadcast ram required;\r\n  setAvatarJoined() airecv clsend;\r\n  setAvatarReadyCourse() airecv clsend;\r\n  setAvatarReadyHole() airecv clsend;\r\n  setAvatarExited() airecv clsend;\r\n  setCurHoleIndex(int8 holeIndex) broadcast ram required;\r\n  setCurHoleDoId(uint32 holeDoId) broadcast ram required;\r\n  setDoneReward() airecv clsend;\r\n  setReward(uint8[] [], int8[], uint8[] [], uint8[] [], uint8[] [], uint32, uint32/100, uint32/100, uint32/100, uint32/100) broadcast;\r\n  setCourseReady(int8 numHoles, int16 holeIds[], int8 coursePar) broadcast;\r\n  setHoleStart(int16 UNKNOWN) broadcast;\r\n  setCourseExit() broadcast;\r\n  setCourseAbort(uint32 avId) broadcast;\r\n  setPlayHole() broadcast;\r\n  avExited(uint32 avId) broadcast;\r\n  setScores(int16 scoreList[]) broadcast;\r\n  changeDrivePermission(uint32 avId, int8 canDrive) broadcast;\r\n};\r\n\r\ndclass DistributedVineGame : DistributedMinigame {\r\n  reachedEndVine(int8 vineIndex) clsend airecv;\r\n  setNewVine(uint32 avId, int8 vineIndex, uint32/10000 vineT, int8 facingRight) airecv clsend broadcast;\r\n  setNewVineT(uint32 avId, uint32/10000 vineT, int8 climbDir) clsend broadcast;\r\n  setJumpingFromVine(uint32 avId, int8 vineIndex, int8 facingRight, int32/100 posX, int16/100 posZ, int16/100 velX, int16 velZ) clsend broadcast;\r\n  claimTreasure(uint32 treasureNum) airecv clsend;\r\n  setTreasureGrabbed(uint32 avId, uint32 treasureNum) broadcast;\r\n  setScore(uint32 avId, uint32 score) broadcast;\r\n  allAtEndVine() broadcast;\r\n  setFallingFromVine(uint32 avId, int8 vineIndex, int8 facingRight, int32/100 posX, int16/100 posZ, int16/100 velX, int16 velZ, int8 fallingInfo) clsend broadcast;\r\n  setFallingFromMidair(uint32 avId, int8 facingRight, int32/100 posX, int16/100 posZ, int16/100 velX, int16 velZ, int8 fallingInfo) clsend broadcast;\r\n  setVineSections(uint8 vineSections[]) required broadcast ram;\r\n};\r\n\r\ndclass TTAvatarFriendsManager : AvatarFriendsManager {\r\n};\r\n\r\ndclass TTPlayerFriendsManager : PlayerFriendsManager {\r\n};\r\n\r\ndclass TTSpeedchatRelay : SpeedchatRelay {\r\n};\r\n\r\ndclass DistributedGolfKart : DistributedObject {\r\n  setState(string state, int16 timestamp) broadcast ram;\r\n  fillSlot0(uint32 avId) broadcast ram;\r\n  fillSlot1(uint32 avId) broadcast ram;\r\n  fillSlot2(uint32 avId) broadcast ram;\r\n  fillSlot3(uint32 avId) broadcast ram;\r\n  emptySlot0(uint32 avId, int16 timestamp) broadcast ram;\r\n  emptySlot1(uint32 avId, int16 timestamp) broadcast ram;\r\n  emptySlot2(uint32 avId, int16 timestamp) broadcast ram;\r\n  emptySlot3(uint32 avId, int16 timestamp) broadcast ram;\r\n  requestBoard() airecv clsend;\r\n  rejectBoard(uint32 avId);\r\n  requestExit() airecv clsend;\r\n  setMinigameZone(uint32 zoneId, uint16 minigameId);\r\n  setGolfZone(uint32 zoneId, uint16 courseId);\r\n  setGolfCourse(int8 golfCourse) required broadcast ram;\r\n  setPosHpr(int16/10 x, int16/10 y, int16/10 z, int16/10 h, int16/10 p, int16/10 r) required broadcast ram;\r\n  setColor(int16 r, int16 g, int16 b) required broadcast ram;\r\n};\r\n\r\ndclass DistributedTimer : DistributedObject {\r\n  setStartTime(int32 time) broadcast ram required;\r\n};\r\n\r\ndclass DistributedPicnicBasket : DistributedObject {\r\n  setState(string state, uint16 seed, int16 timestamp) broadcast ram;\r\n  fillSlot0(uint32 avId) broadcast ram;\r\n  fillSlot1(uint32 avId) broadcast ram;\r\n  fillSlot2(uint32 avId) broadcast ram;\r\n  fillSlot3(uint32 avId) broadcast ram;\r\n  emptySlot0(uint32 avId, int16 timestamp) broadcast ram;\r\n  emptySlot1(uint32 avId, int16 timestamp) broadcast ram;\r\n  emptySlot2(uint32 avId, int16 timestamp) broadcast ram;\r\n  emptySlot3(uint32 avId, int16 timestamp) broadcast ram;\r\n  requestBoard(int16 todo0) airecv clsend;\r\n  rejectBoard(uint32 avId);\r\n  requestExit() airecv clsend;\r\n  doneExit() airecv clsend;\r\n  setMinigameZone(uint32 todo0, uint16 todo1);\r\n  setPicnicDone();\r\n  setPosHpr(int16/10 x, int16/10 y, int16/10 z, int16/10 h, int16/10 p, int16/10 r) required broadcast ram;\r\n  setTableNumber(int16 tn) required broadcast ram;\r\n};\r\n\r\ndclass DistributedBossbotBoss : DistributedBossCog {\r\n  setState(string state) broadcast ram;\r\n  setBattleDifficulty(uint8 diff) broadcast ram;\r\n  requestGetFood(int8 beltIndex, int8 foodIndex, uint32 foodNum) airecv clsend;\r\n  toonGotFood(uint32 avId, int8 beltIndex, int8 foodIndex, uint32 foodNum) broadcast;\r\n  requestServeFood(int8 tableIndex, int8 chairIndex) airecv clsend;\r\n  toonServeFood(uint32 avId, int8 tableIndex, int8 chairIndex) broadcast;\r\n  hitBoss(uint8 bossDamage) airecv clsend;\r\n  hitToon(uint32 toonId) airecv clsend;\r\n  ballHitBoss(uint8 bossDamage) airecv clsend;\r\n  setBossDamage(uint16 bossDamage, uint8 recoverRate, int16 recoverStartTime) broadcast ram;\r\n  setSpeedDamage(uint16 speedDamage, uint8 recoverRate, int16 timestamp) broadcast ram;\r\n  reachedTable(uint8 tableIndex) airecv clsend;\r\n  hitTable(uint8 tableIndex) airecv clsend;\r\n  awayFromTable(uint8 tableIndex) airecv clsend;\r\n  toonGotHealed(uint32 toonId) broadcast;\r\n  requestGetToonup(int8 beltIndex, int8 toonupIndex, uint32 toonupNum) airecv clsend;\r\n  toonGotToonup(uint32 avId, int8 beltIndex, int8 toonupIndex, uint32 toonupNum) broadcast;\r\n};\r\n\r\ndclass DistributedCogKart : DistributedElevatorExt {\r\n  setCountryClubId(uint16 countryClubId) required broadcast ram;\r\n  setPosHpr(int16/10 x, int16/10 y, int16/10 z, int16/10 h, int16/10 p, int16/10 r) required broadcast ram;\r\n  setCountryClubInteriorZone(uint32 zoneId);\r\n  setCountryClubInteriorZoneForce(uint32 zoneId);\r\n};\r\n\r\ndclass DistributedCountryClub : DistributedObject {\r\n  setZoneId(uint32 zoneId) required broadcast ram;\r\n  setBlockedRooms(uint8 blockedRooms[]) required broadcast ram;\r\n  setCountryClubId(uint16 id) required broadcast ram;\r\n  setLayoutIndex(uint16 layoutIndex) required broadcast ram;\r\n  setFloorNum(uint8 num) required broadcast ram;\r\n  setRoomDoIds(uint32 roomDoIds[]) broadcast ram;\r\n  setCountryClubZone(uint32 zoneId) broadcast ram;\r\n  elevatorAlert(uint32 avId) broadcast ram;\r\n};\r\n\r\ndclass DistributedCountryClubRoom : DistributedLevel {\r\n  setCountryClubId(uint16 countryClubId) required broadcast ram;\r\n  setRoomId(uint16 roomId) required broadcast ram;\r\n  setRoomNum(uint8 num) required broadcast ram;\r\n  setSuits(uint32 suitIds[], uint32 reserveSuitIds[]) broadcast ram;\r\n  setBossConfronted(uint32 avId) broadcast ram;\r\n  setDefeated() broadcast ram;\r\n  forceOuch(uint8 penalty) broadcast;\r\n};\r\n\r\ndclass DistributedMoleField : DistributedEntity {\r\n  setGameStart(int16 timestamp, uint8 molesWhackTarget, uint16 totalTime) broadcast;\r\n  setClientTriggered() airecv clsend;\r\n  whackedMole(int8 moleIndex, int16 popupNum) airecv clsend;\r\n  whackedBomb(int8 moleIndex, int16 popupNum, int32 timestamp) airecv clsend;\r\n  updateMole(int8 moleIndex, int8 status) broadcast;\r\n  reportToonHitByBomb(uint32 avId, int8 moleIndex, int32 timestamp) broadcast;\r\n  setScore(int16 score) required broadcast ram;\r\n  damageMe() airecv clsend;\r\n  setPityWin() broadcast;\r\n};\r\n\r\ndclass DistributedCountryClubBattle : DistributedLevelBattle {\r\n};\r\n\r\ndclass DistributedClubElevator : DistributedElevatorFSM {\r\n  setFloor(int8 floorNumber) broadcast ram;\r\n  setLocked(uint16 locked) required broadcast ram;\r\n  setEntering(uint16 entering) required broadcast ram;\r\n  kickToonsOut() broadcast;\r\n  setLatch(uint32 markerId) required broadcast ram;\r\n};\r\n\r\ndclass DistributedMaze : DistributedEntity {\r\n  setRoomDoId(uint32 roomDoId) required broadcast ram;\r\n  setGameStart(int16 timestamp) broadcast;\r\n  setClientTriggered() airecv clsend;\r\n  setFinishedMaze() airecv clsend;\r\n  setGameOver() broadcast;\r\n  toonFinished(uint32 avId, uint8 place, uint8 lastToon) broadcast;\r\n  damageMe() airecv clsend;\r\n};\r\n\r\ndclass DistributedBattleWaiters : DistributedBattleFinal {\r\n};\r\n\r\ndclass DistributedFoodBelt : DistributedObject {\r\n  setBossCogId(uint32 bossCogId) required broadcast ram;\r\n  setIndex(uint8 index) required broadcast ram;\r\n  setState(char state) broadcast ram;\r\n};\r\n\r\ndclass DistributedBanquetTable : DistributedObject {\r\n  setIndex(uint8 index) required broadcast ram;\r\n  setNumDiners(uint8 numDiners) required broadcast ram;\r\n  setBossCogId(uint32 bossCogId) required broadcast ram;\r\n  setDinerInfo(uint8 hungryDurations[], uint8 eatingDurations[], uint8 dinerLevels[]) required broadcast ram;\r\n  setState(char state, uint32 avId, int8 extraInfo) broadcast ram;\r\n  setDinerStatus(uint8 chairIndex, uint8 status) broadcast;\r\n  requestControl() airecv clsend;\r\n  requestFree(int8 gotHitByBoss) airecv clsend;\r\n  setPitcherPos(uint8 changeSeq, uint16%360/100 h, int16 timestamp) broadcast clsend;\r\n  clearSmoothing(int8 bogus) broadcast clsend;\r\n  firingWater(int32/100 startX, int32/100 startY, int32/100 startZ, int32/100 endX, int32/100 endY, int32/100 endZ) broadcast clsend;\r\n  waterHitBoss(uint8 tableIndex) broadcast clsend;\r\n};\r\n\r\ndclass DistributedBattleDiners : DistributedBattleFinal {\r\n};\r\n\r\ndclass DistributedGolfSpot : DistributedObject {\r\n  setIndex(uint8 index) required broadcast ram;\r\n  setBossCogId(uint32 bossCogId) required broadcast ram;\r\n  setState(char state, uint32 avId, int8 extraInfo) broadcast ram;\r\n  setGoingToReward() broadcast ram;\r\n  requestControl() airecv clsend;\r\n  requestFree(int8 gotHitByBoss) airecv clsend;\r\n  setGolfSpotPos(uint8 changeSeq, uint16%360/100 h, int16 timestamp) broadcast clsend;\r\n  clearSmoothing(int8 bogus) broadcast clsend;\r\n  setSwingInfo(uint8 power, int16/10 angle, uint8 sequenceNum) broadcast clsend;\r\n};\r\n\r\nstruct TireInput {\r\n  int32/100 force;\r\n  int32/100 heading;\r\n};\r\n\r\ndclass DistributedIceGame : DistributedMinigame {\r\n  setForceArrowInfo(uint32 avId, int32/100 force, int32/100 heading) broadcast clsend;\r\n  setAvatarChoice(int32/100 force, int32/100 direction) airecv clsend;\r\n  endingPositions(Coord3 positions[]) airecv clsend;\r\n  reportScoringMovieDone() airecv clsend;\r\n  claimTreasure(uint8 treasureNum) airecv clsend;\r\n  claimPenalty(uint8 penaltyNum) airecv clsend;\r\n  setTireInputs(TireInput tireInputs[]) broadcast;\r\n  setTimerStartTime(int16 timestamp) broadcast;\r\n  setFinalPositions(Coord3 finalPos[]) broadcast;\r\n  setMatchAndRound(int8 match, int8 round) broadcast;\r\n  setScores(int8 match, int8 round, int16 scores[]) broadcast;\r\n  setNewState(string state) broadcast;\r\n  setTreasureGrabbed(uint32 avId, uint32 treasureNum) broadcast;\r\n  setPenaltyGrabbed(uint32 avId, uint32 penaltyNum) broadcast;\r\n};\r\n\r\ndclass DistributedCogThiefGame : DistributedMinigame {\r\n  throwingPie(uint32 avId, int32 timestamp, int32/100 heading, int32/100 x, int32/100 y, int32/100 z) clsend broadcast;\r\n  hitBySuit(uint32 avId, int32 timestamp, int8 suitNum, int32/100 x, int32/100 y, int32/100 z) clsend broadcast airecv;\r\n  pieHitSuit(uint32 avId, int32 timestamp, int8 suitNum, int32/100 x, int32/100 y, int32/100 z) clsend broadcast airecv;\r\n  cogHitBarrel(int32 clientStamp, int8 cogIndex, int8 barrelIndex, int32/100 x, int32/100 y, int32/100 z) clsend airecv;\r\n  cogAtReturnPos(int32 clientstamp, int8 cogIndex, int8 barrelIndex) clsend airecv;\r\n  updateSuitGoal(int32 timestamp, int32 inResponseToClientStamp, int8 suitNum, int8 goalType, int64 goalId, int32/100 x, int32/100 y, int32/100 z) broadcast;\r\n  makeCogCarryBarrel(int32 timestamp, int32 inResponseToClientStamp, int8 cogIndex, int8 barrelIndex, int32/100 x, int32/100 y, int32/100 z) broadcast;\r\n  makeCogDropBarrel(int32 timestamp, int32 inResponseToClientStamp, int8 cogIndex, int8 barrelIndex, int32/100 x, int32/100 y, int32/100 z) broadcast;\r\n  markBarrelStolen(int32 timestamp, int32 inResponseToClientStamp, int8 barrelIndex) broadcast;\r\n};\r\n\r\nstruct twoDTreasureInfo {\r\n  uint8 treasureIndex;\r\n  uint8 treasureValue;\r\n};\r\n\r\nstruct twoDSectionInfo {\r\n  uint8 sectionIndex;\r\n  uint8 enemyIndicesSelected[];\r\n  twoDTreasureInfo treasureIndicesSelected[];\r\n  uint8 spawnPointIndicesSelected[];\r\n  uint8 stomperIndicesSelected[];\r\n};\r\n\r\ndclass DistributedTwoDGame : DistributedMinigame {\r\n  showShootGun(uint32 avId, int16 timestamp) clsend broadcast;\r\n  toonHitByEnemy(uint32 avId, int16 timestamp) clsend broadcast airecv;\r\n  toonFellDown(uint32 avId, int16 timestamp) clsend broadcast airecv;\r\n  toonSquished(uint32 avId, int16 timestamp) clsend broadcast airecv;\r\n  toonVictory(uint32 avId, int16 timestamp) clsend broadcast airecv;\r\n  claimTreasure(uint8 sectionIndex, uint8 treasureIndex) airecv clsend;\r\n  claimEnemyShot(uint8 sectionIndex, uint8 enemyIndex) airecv clsend;\r\n  reportDone() airecv clsend;\r\n  setSectionsSelected(twoDSectionInfo sectionsSelected[]) required broadcast ram;\r\n  setTreasureGrabbed(uint32 avId, uint8 sectionIndex, uint8 treasureIndex) broadcast;\r\n  setEnemyShot(uint32 avId, uint8 sectionIndex, uint8 enemyIndex, uint32 enemyHealth) broadcast;\r\n  addVictoryScore(uint32 avId, uint8 score) broadcast;\r\n  setEveryoneDone() broadcast;\r\n};\r\n\r\ndclass DistributedPicnicTable : DistributedNode {\r\n  fillSlot(uint32 avId, uint8 index, int16/10 x, int16/10 y, int16/10 z, int16/10 h, int16/10 p, int16/10 r, int16 timestamp, uint32 parentDoId) broadcast;\r\n  emptySlot(uint32 avId, uint8 index, int16 timestamp) broadcast;\r\n  requestTableState() airecv clsend;\r\n  setTableState(uint32 tableStateList[], uint8 isplaying) broadcast ram;\r\n  setGameZone(uint32 zoneId, uint8 gamestate) broadcast;\r\n  setIsPlaying(uint8 isPlaying) broadcast ram;\r\n  requestJoin(uint8 todo0, int16/10 todo1, int16/10 todo2, int16/10 todo3, int16/10 todo4, int16/10 todo5, int16/10 todo6) airecv clsend;\r\n  rejectJoin() broadcast;\r\n  requestObserve() airecv clsend;\r\n  leaveObserve() airecv clsend;\r\n  requestGameZone() airecv clsend;\r\n  requestPickedGame(uint8 todo0) clsend airecv;\r\n  requestExit() airecv clsend;\r\n  requestZone() clsend airecv;\r\n  announceWinner(string winString, uint32 avId) broadcast;\r\n  allowObserve() broadcast;\r\n  allowPick() broadcast;\r\n  setZone(uint32 zoneId) broadcast;\r\n};\r\n\r\ndclass DistributedChineseCheckers : DistributedNode {\r\n  requestExit() clsend airecv;\r\n  requestBegin() clsend airecv;\r\n  requestMove(uint8 todo0[]) clsend airecv;\r\n  requestTimer() clsend airecv;\r\n  requestSeatPositions() clsend airecv;\r\n  startBeginTimer(uint16 todo0, int16 todo1) broadcast ram;\r\n  gameStart(uint8 playerNum) broadcast;\r\n  setTableDoId(uint32 doId) required broadcast ram;\r\n  setGameState(uint8 tableState[], uint8 moveList[]) required broadcast ram;\r\n  setTimer(int16 timerEnd) broadcast ram required;\r\n  setTurnTimer(int16 turnEnd) broadcast ram required;\r\n  sendTurn(uint8 playersTurn) broadcast ram;\r\n  requestWin() clsend airecv;\r\n  announceWin(uint32 avId) broadcast;\r\n  announceSeatPositions(uint8 playerPos[]) broadcast;\r\n};\r\n\r\ndclass DistributedCheckers : DistributedNode {\r\n  requestExit() clsend airecv;\r\n  requestBegin() clsend airecv;\r\n  requestTimer() clsend airecv;\r\n  requestMove(uint8 todo0[]) clsend airecv;\r\n  startBeginTimer(uint16 todo0, int16 todo1) broadcast ram;\r\n  gameStart(uint8 playerNum) broadcast;\r\n  setTableDoId(uint32 doId) required broadcast ram;\r\n  setGameState(uint8 tableState[], uint8 moveList[]) required broadcast ram;\r\n  setTimer(int16 timerEnd) broadcast ram required;\r\n  setTurnTimer(int16 turnEnd) broadcast ram required;\r\n  sendTurn(uint8 playersTurn) broadcast ram;\r\n  requestWin() clsend airecv;\r\n  announceWin(uint32 avId) broadcast;\r\n  illegalMove() broadcast;\r\n};\r\n\r\ndclass DistributedFindFour : DistributedNode {\r\n  requestExit() clsend airecv;\r\n  requestBegin() clsend airecv;\r\n  requestMove(uint8 todo0) clsend airecv;\r\n  requestTimer() clsend airecv;\r\n  requestWin(uint8 todo0[]) clsend airecv;\r\n  startBeginTimer(uint16 todo0, int16 todo1) broadcast ram;\r\n  setTableDoId(uint32 doId) required broadcast ram;\r\n  setGameState(uint8 tableState[][], uint8 moveCol, uint8 movePos, uint8 turn) required broadcast ram;\r\n  setTimer(int16 timerEnd) broadcast ram required;\r\n  setTurnTimer(int16 turnEnd) broadcast ram required;\r\n  gameStart(uint8 playerNum) broadcast;\r\n  sendTurn(uint8 playersTurn) broadcast ram;\r\n  announceWin(uint32 avId) broadcast;\r\n  announceWinLocation(uint8 todo0, uint8 todo1, uint8 todo2, uint8 todo3) broadcast;\r\n  announceWinnerPosition(uint8 x, uint8 y, uint8 winDirection, uint8 playerNum) broadcast;\r\n  illegalMove() broadcast;\r\n  tie() broadcast;\r\n};\r\n\r\ndclass DistributedMailManager : DistributedObject {\r\n  sendSimpleMail(uint32 todo0, uint32 todo1, string todo2);\r\n  setNumMailItems(uint32 todo0, uint32 todo1) airecv;\r\n};\r\n\r\ndclass DistributedPartyManager : DistributedObject {\r\n  addParty(uint32 todo0, uint32 todo1, string todo2, string todo3, int8 todo4, int8 todo5, activity todo6[], decoration todo7[], uint32 todo8[], uint16 todo9);\r\n  addPartyRequest(uint32 hostId, char startTime[0-256], char endTime[0-256], int8 isPrivate, int8 inviteTheme, activity activities[], decoration decorations[], uint32 inviteeIds[]) airecv clsend;\r\n  addPartyResponse(uint32 hostId, int8 errorCode);\r\n  addPartyResponseUdToAi(uint64 partyId, int8 errorCode, party partyStruct) airecv;\r\n\r\n  markInviteAsReadButNotReplied(uint32 todo0, uint64 todo1);\r\n  respondToInvite(uint32 todo0, uint32 todo1, uint16 todo2, uint64 todo3, uint8 todo4);\r\n  respondToInviteResponse(uint32 todo0, uint16 todo1, uint64 todo2, int8 todo3, uint8 todo4) airecv;\r\n\r\n  changePrivateRequest(uint64 todo0, int8 todo1) airecv clsend;\r\n  changePrivateRequestAiToUd(uint32 todo0, uint64 todo1, int8 todo2);\r\n  changePrivateResponseUdToAi(uint32 todo0, uint64 todo1, int8 todo2, int8 todo3) airecv;\r\n  changePrivateResponse(uint64 partyId, int8 newPrivateStatus, int8 errorCode);\r\n\r\n  changePartyStatusRequest(uint64 partyId, int8 newPartyStatus) airecv clsend;\r\n  changePartyStatusRequestAiToUd(uint32 todo0, uint64 todo1, int8 todo2);\r\n  changePartyStatusResponseUdToAi(uint32 todo0, uint64 todo1, int8 todo2, int8 todo3) airecv;\r\n  changePartyStatusResponse(uint64 partyId, int8 newPartyStatus, int8 errorCode, uint16 beansRefunded);\r\n\r\n  partyInfoOfHostRequestAiToUd(uint32 todo0, uint32 todo1);\r\n  partyInfoOfHostFailedResponseUdToAi(uint32 todo0) airecv;\r\n  partyInfoOfHostResponseUdToAi(party partyStruct, uint32 inviteeIds[]) airecv;\r\n\r\n  givePartyRefundResponse(uint32 todo0, uint64 todo1, int8 todo2, uint16 todo3, uint32 todo4);\r\n  getPartyZone(uint32 hostId, uint32 zoneId, uint8 isAvAboutToPlanParty) clsend airecv;\r\n  receivePartyZone(uint32 hostId, uint64 partyId, uint32 zoneId);\r\n  freeZoneIdFromPlannedParty(uint32 hostId, uint32 zoneId) clsend airecv;\r\n\r\n  sendAvToPlayground(uint32 avId, uint8 retCode);\r\n  exitParty(uint32 partyZone) clsend airecv;\r\n  removeGuest(uint32 ownerId, uint32 avId) airecv clsend;\r\n  partyManagerAIStartingUp(uint32 todo0, uint32 todo1);\r\n  partyManagerAIGoingDown(uint32 todo0, uint32 todo1);\r\n  partyHasStartedAiToUd(uint64 partyId, uint32 shardId, uint32 zoneId, string hostName);\r\n  toonHasEnteredPartyAiToUd(uint32 todo0);\r\n  toonHasExitedPartyAiToUd(uint32 todo0);\r\n  partyHasFinishedUdToAllAi(uint64 partyId) airecv;\r\n  updateToPublicPartyInfoUdToAllAi(uint32 shardId, uint32 zoneId, uint64 partyId, uint32 hostId, uint8 numGuests, uint8 maxGuests, string hostName, uint8 activities[], uint8 minLeft) airecv;\r\n  updateToPublicPartyCountUdToAllAi(uint32 partyCount, uint64 partyId) airecv;\r\n  requestShardIdZoneIdForHostId(uint32 todo0) clsend airecv;\r\n  sendShardIdZoneIdToAvatar(uint32 shardId, uint32 zoneId);\r\n  partyManagerUdStartingUp() airecv;\r\n  partyManagerUdLost() airecv;\r\n  updateAllPartyInfoToUd(uint32 todo0, uint64 todo1, uint32 todo2, uint32 todo3, uint8 todo4, uint8 todo5, string todo6, uint8 todo7[], uint64 todo8);\r\n  forceCheckStart();\r\n  requestMw(uint32 todo0, string todo1, uint32 todo2, uint32 todo3);\r\n  mwResponseUdToAllAi(uint32 todo0, string todo1, uint32 todo2, uint32 todo3) airecv;\r\n  receiveId(uint64 ids[]) airecv;\r\n};\r\n\r\ndclass DistributedObjectGlobal : DistributedObject {\r\n};\r\n\r\ndclass GlobalPartyManager : DistributedObjectGlobal {\r\n    partyManagerAIHello(uint32 channel);\r\n    queryParty(uint32 hostId);\r\n    addParty(DoId avId, uint64 partyId, string start, string end, int8 isPrivate,\r\n             int8 inviteTheme, activity activities[], decoration decorations[], DoIdList inviteeIds);\r\n    partyHasStarted(uint64 partyId, uint32 shardId, uint32 zoneId, string hostName);\r\n    toonJoinedParty(uint64 partyId, uint32 avId);\r\n    toonLeftParty(uint64 partyId, uint32 avId);\r\n    requestPartySlot(uint64 partyId, uint32 avId, uint32 gateId);\r\n    partyDone(uint64 partyId);\r\n    allocIds(uint16 count);\r\n    avatarJoined(uint32 avId);\r\n};\r\n\r\nstruct PotentialToon {\r\n  uint32 avNum;\r\n  string avName;\r\n  string avDNA;\r\n  uint8 avPosition;\r\n  uint8 aname;\r\n};\r\n\r\ndclass ClientServicesManager : DistributedObjectGlobal {\r\n  login(string cookie, blob sig) clsend;\r\n  acceptLogin();\r\n\r\n  requestAvatars() clsend;\r\n  setAvatars(PotentialToon avatars[]);\r\n\r\n  createAvatar(blob dna, uint8 index) clsend;\r\n  createAvatarResp(uint32 avId);\r\n\r\n  setNameTyped(uint32 avId, string name) clsend;\r\n  setNameTypedResp(uint32 avId, uint8 status);\r\n  setNamePattern(uint32 avId, int16 p1, uint8 f1, int16 p2, uint8 f2, int16 p3, uint8 f3, int16 p4, uint8 f4) clsend;\r\n  setNamePatternResp(uint32 avId, uint8 status);\r\n\r\n  acknowledgeAvatarName(uint32 avId) clsend;\r\n  acknowledgeAvatarNameResp();\r\n\r\n  deleteAvatar(uint32 avId) clsend;\r\n\r\n  chooseAvatar(uint32 avId) clsend;\r\n\r\n  systemMessage(uint16 code, string params[]);\r\n\r\n  reportPlayer(uint32 avId, uint8 category) clsend;\r\n};\r\n\r\ndclass RATManager : DistributedObjectGlobal {\r\n};\r\n\r\ndclass AwardManager : DistributedObjectGlobal {\r\n  giveAwardToToon(uint32 todo0, DoId todo1, string todo2, DoId todo3, uint32 todo4, uint32 todo5);\r\n};\r\n\r\ndclass DistributedCpuInfoMgr : DistributedObjectGlobal {\r\n  setCpuInfoToUd(uint32 todo0, uint32 todo1, string todo2, string todo3);\r\n};\r\n\r\ndclass DistributedSecurityMgr : DistributedObjectGlobal {\r\n  requestAccountId(uint32 todo0, uint32 todo1, uint32 todo2);\r\n  requestAccountIdResponse(uint32 todo0, uint32 todo1) airecv;\r\n};\r\n\r\ndclass NonRepeatableRandomSourceClient {\r\n  getRandomSamplesReply(uint32, uint32 []) airecv;\r\n};\r\n\r\ndclass TTCodeRedemptionMgr : DistributedObject, NonRepeatableRandomSourceClient {\r\n  giveAwardToToonResult(uint32 todo0, uint32 todo1);\r\n  redeemCode(uint32 code, char callback[0-256]) airecv clsend;\r\n  redeemCodeAiToUd(uint32 todo0, DoId todo1, uint32 todo2, string todo3, uint32 todo4);\r\n  redeemCodeResultUdToAi(uint32 todo0, uint32 todo1, uint32 todo2, uint32 todo3, uint32 todo4) airecv;\r\n  redeemCodeResult(uint32 context, uint32 result, uint32 awardMgrResult);\r\n};\r\n\r\ndclass NonRepeatableRandomSource : DistributedObject, NonRepeatableRandomSourceClient {\r\n  getRandomSamples(DoId callback, string num, uint32 context, uint32);\r\n  randomSample(DoId nrrsDoId, uint32 random);\r\n  randomSampleAck() airecv;\r\n};\r\n\r\ndclass DistributedInGameNewsMgr : DistributedObjectGlobal {\r\n  setLatestIssueStr(string issueStr) required broadcast ram;\r\n  inGameNewsMgrAIStartingUp(uint32 todo0, uint32 todo1);\r\n  newIssueUDtoAI(string todo0) airecv;\r\n};\r\n\r\ndclass DistributedWhitelistMgr : DistributedObjectGlobal {\r\n  updateWhitelist() broadcast;\r\n  whitelistMgrAIStartingUp(uint32 todo0, uint32 todo1);\r\n  newListUDtoAI() airecv;\r\n};\r\n\r\nstruct Friend\r\n{\r\nuint32 doId;\r\nstring name;\r\nblob dna;\r\nuint32 petId;\r\n};\r\n\r\ndclass TTRFriendsManager : DistributedObjectGlobal {\r\n  clearList(uint32 avId);\r\n  removeFriend(uint32 avId) clsend;\r\n  requestAvatarInfo(uint32 avIds[]) clsend;\r\n\r\n  requestFriendsList() clsend;\r\n\r\n  friendInfo(Friend resp);\r\n  friendList(Friend resp[]);\r\n\r\n  friendOnline(uint32 id, uint8 commonChatFlags, uint8 whitelistChatFlags);\r\n  friendOffline(uint32 id);\r\n\r\n  comingOnline(uint32 avId, uint32 friendIds[]);\r\n  goingOffline(uint32 avId);\r\n\r\n  getAvatarDetails(uint32 friendId) clsend;\r\n  friendDetails(uint32 friendId, blob details);\r\n};\r\n\r\n\r\ndclass DistributedPhaseEventMgr : DistributedObject {\r\n  setNumPhases(uint8 numPhases) required broadcast ram;\r\n  setDates(datetime holidayDates[]) broadcast required;\r\n  setCurPhase(int8 curPhase) required broadcast ram;\r\n  setIsRunning(bool isRunning) required broadcast ram;\r\n};\r\n\r\ndclass DistributedHydrantZeroMgr : DistributedPhaseEventMgr {\r\n};\r\n\r\ndclass DistributedMailboxZeroMgr : DistributedPhaseEventMgr {\r\n};\r\n\r\ndclass DistributedTrashcanZeroMgr : DistributedPhaseEventMgr {\r\n};\r\n\r\ndclass DistributedSillyMeterMgr : DistributedPhaseEventMgr {\r\n};\r\n\r\ndclass ARGManager : DistributedObjectGlobal {\r\n};'
